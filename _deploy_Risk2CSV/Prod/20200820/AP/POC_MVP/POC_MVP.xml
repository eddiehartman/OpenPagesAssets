<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig IDIversion="Created by SDI7.2 - 2019-07-08" created="Mon Mar 30 14:14:39 IST 2020" createdBy="DishaSingh" modified="Wed Aug 19 21:51:28 CEST 2020" modifiedBy="eddie" version="7.1.1">
    <Folder name="AssemblyLines">
        
        
        
        <AssemblyLine name="Risk_2_csv">
            <ModTime>1597836840168</ModTime>
            <Settings>
                <parameter name="ALPoolSettingsDialog">showALPoolSettings</parameter>
                <parameter name="automapattributes">false</parameter>
                <parameter name="createTombstones">false</parameter>
                <parameter name="includeGlobalPrologs">true</parameter>
                <parameter name="includePrologs"><![CDATA[Script_Lib
SCP
]]></parameter>
                <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
            </Settings>
            <Hooks>
                <ModTime>1597836840168</ModTime>
                <Hook name="epilog2">
                    <InheritFrom>[no inheritance]</InheritFrom>
                    <Name>epilog2</Name>
                    <Script><![CDATA[if(cnt>0)
{
	log("Transferring " + csvFilename + "...");
	retries = 100;
	fileTransferred = false;
	do {
		try {
			file = new java.io.File(csvFilename);
			if (file.exists()) {
				scp.put(csvFilename, system.getTDIProperty("gsa.folder.path"));
				fileTransferred = true;
				
				log("CSV file successfully transferred!");
				
				if (system.deleteFile(csvFilename)) {
					log("CSV file deleted.");
				} else {
					log("ERROR", "Unable to delete CSV file");
				}
			} else {
				fileTransferred = true;
			}
		} catch (ex) {
			log("Error transferring file to GSA: " + ex);
		}
		
		if (!fileTransferred) {
			// Sleep a little before trying again
			system.sleep(360);
		}
	} while (!fileTransferred && retries-- <= 0);
}


return;

if (typeof fieldNames != "undefined") {
	var names = fieldNames.getAttributeNames();
	java.util.Arrays.sort(names);
	for(name in names)
	{
		if(found[name] != true)
		{
			log("Missing: "+name);
		}
	}
}]]></Script>
                    <Enabled>true</Enabled>
                </Hook>
                <Hook name="onfailure">
                    <InheritFrom>[no inheritance]</InheritFrom>
                    <Name>onfailure</Name>
                    <Script>cnt = 0;</Script>
                    <Enabled>true</Enabled>
                </Hook>
                <Hook name="prolog0">
                    <InheritFrom>[no inheritance]</InheritFrom>
                    <Name>prolog0</Name>
                    <Script><![CDATA[//vrs = "20200511 1249"; // Using scp on Linux and winscp on Windows
//vrs = "20200513 1449"; // Updated mapping according to spec from Blade
//vrs = "20200522 16:00"; // Added logging
//vrs = "20200528 16:05"; // Deleting CSV file after transfer to GSA (if successful)
//vrs = "20200602 10:53"; // Added geo to the CSV filename (from a property)
//vrs = "20200602 17:15"; // Put geo at the end of the filename
//vrs = "20200617 1143"; // Disabled missing field report at end of AL
//vrs = "20200626 1611"; // Solution now deletes all older csv files
//vrs = "20200626 1744"; // Fixed solution deleting all older csv files
//vrs = "20200703 1249"; // Formating Extracted Timestamp column as other timestamps
vrs = "20200818 1316"; // Retrying scp to GSA 10 times with a 6 min wait between attempts

log("Risk_2_csv AL v" + vrs);

var cnt = 0;


var now = new Date();
var utc = new Date(now.getTime() + now.getTimezoneOffset() * 60000);
dateString = system.formatDate(utc, "yyyyMMdd")

var geo = system.getTDIProperty("geo") || "DEV";
var csvFilename = "POC_MVP/risk_" + dateString + "_" + geo + ".csv";
var fieldNames = fileToEntry("POC_MVP/riskField.txt");
var fieldNamesParameters = fieldNames.getAttributeNames().join("\n");

//var parentTypes = fileToAttribute("POC_MVP/parents.txt", "$parentTypes");
var found = system.newEntry();
var scp = new SCP(system.getTDIProperty("gsa.hostname"), 
						system.getTDIProperty("gsa.username"),
						system.getTDIProperty("gsa.password"),
						system.getTDIProperty("gsa.hostkey"));
						
// Now to delete all older CSV files
var solFolder = new java.io.File("POC_MVP");
var list = solFolder.list();

for (filename in list) {
	filenameLC = filename.toLowerCase();
	if (filenameLC.startsWith("risk_") && filenameLC.contains(".csv")) {
		if (system.deleteFile("POC_MVP/" + filename)) {
			log("Deleted " + filename);
		} else {
			log("ERROR", "Unable to delete CSV file: " + filename);
		}
	}
}]]></Script>
                    <Enabled>true</Enabled>
                </Hook>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="Fix attribute names" state="Enabled"/>
                    <Component name="SOXAccount Parent" state="Enabled"/>
                    <Component name="Debug Output" state="Enabled"/>
                    <Component name="Filter SOXRisk with no Parent SOXAccount" state="Enabled"/>
                    <Component name="Clean Risk Data" state="Enabled"/>
                    <Component name="Filter Fields" state="Enabled"/>
                    <Component name="DumpWorkEntry" state="Enabled"/>
                    <Component name="Output" state="Simulated"/>
                    <Component name="OpenPages Connector" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig>
                <ModTime>1597835328364</ModTime>
                <Logger name="DailyRollingFileAppender">
                    <InheritFrom>system:/Loggers/ibmdi.DailyRollingFileAppender</InheritFrom>
                    <ModTime>1597835328364</ModTime>
                    <parameter name="DailyRollingFile.Append">false</parameter>
                    <parameter name="DailyRollingFile.DatePattern">'.'dd</parameter>
                    <parameter name="DailyRollingFile.File">logs/Risk_2_csv.log</parameter>
                    <parameter name="Pattern.ConversionPattern">%d{ISO8601} %-5p - %m%n</parameter>
                    <parameter name="com.ibm.di.log.layout">Pattern</parameter>
                    <parameter name="com.ibm.di.log.level">INFO</parameter>
                    <parameter name="enabled">false</parameter>
                </Logger>
            </LogConfig>
            <ContainerEF name="EntryFeedContainer">
                <Connector name="OpenPages Connector">
                    <InheritFrom>/Connectors/OpenPages Connector</InheritFrom>
                    <ModTime>1590574421696</ModTime>
                    <ConnectorMode>Iterator</ConnectorMode>
                    <ConnectorState>Enabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                        <parameter name="object">SOXRisk</parameter>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>/AttributeMaps/OP_SOXRisk</InheritFrom>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <DeltaSettings>
                        <UniqueAttribute/>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <SchemaItem>
                            <Name>$grcObject</Name>
                            <NativeSyntax>JavaScript Object</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>$grcObjectJSON</Name>
                            <NativeSyntax>JSON</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>$grcObjectType</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Comment</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Created By</Name>
                            <NativeSyntax>Integer (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Creation Date</Name>
                            <NativeSyntax>Date (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Description</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Domain:Domain</Name>
                            <NativeSyntax>String (multi-valued)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Policies:AppPolicies</Name>
                            <NativeSyntax>String (multi-valued)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Regulations:AppRegs</Name>
                            <NativeSyntax>String (multi-valued)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Regulations:IsRegulated</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Regulations:Other Regulations</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Regulations:Regulations Comments</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:AppCITRO</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:AppDPE</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:AppGeoGM</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:AppMarketGM</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:AppPE</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:AppSrLegalCounsel</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:AssDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:AssessedBy</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CIRATSSIMID</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CITRO</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CITROAppComments</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CITRODate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CITROName</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CITRORiskRejectDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CITRORiskRejectedBy</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CMAppBy</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CMAppDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CMComments</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CMLetterRejectDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CMLetterRejectedBy</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CMRiskRejectDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CMRiskRejectedBy</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CMT</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CRF</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CRF Validation Result</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CRFComments</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CRFValidatedBy</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CRFValidationDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CitroAppBy</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CitroAppDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CitroComments</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:ClaimCode</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:ClientDepRedRsk</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CltCommunicationComplete</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CltCommunicationDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CltResponse</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CltResponseComments</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CltResponseDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:Comments</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CurrentStatusDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CustDueDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:DPEAppDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:DPEComments</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:DPEName</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:DataAttract</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:Date Closed</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:DateLetterSent</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:DevicesImpacted</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:EarlyNotification</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:Examples of potential Vulnerabilities</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:ExtRMCaptured</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:ExtRMComments</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:ExtRMReference</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:Final Risk Assessment</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:GRAAppBy</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:GRAAppDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:GRAApprover</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:GRAComments</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:GRARejectDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:GRARejectedBy</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:GeoGMComments</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:GeoGMDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:GeoGMName</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:Heatmap</Name>
                            <NativeSyntax>?undefined gts-risk:heatmap?</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:InCauseDet</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LegalAppBy</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LegalAppDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LegalComments</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LegalReview</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LegalReviewComments</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LegalReviewDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LegalRiskRejectDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LegalRiskRejectedBy</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LetterAttached</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LetterDocumentedBy</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LetterDocumentedDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LetterNotSentReason</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LetterRecName</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LetterRecTitle</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LetterSent</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LoProcessDiffEval</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LoProcessDiffEvalOther</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:MainThreatEvent</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:MitigatingControls</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:MrktGMAppDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:MrktGMComments</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:MrktGMName</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:NegativeConfirmation</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:NegativeConfirmationSent</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:NegativeConfirmationSentDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:NoOfDevicesImpacted</Name>
                            <NativeSyntax>Integer</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:Non Compliance Issue Number</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:NonCompCond</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:Other Platforms</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:OtherProcess</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:OtherRecipient</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:PEAppDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:PEComments</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:PEName</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:Perform CRF Validation</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:Platform</Name>
                            <NativeSyntax>String (multi-valued)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:PotImpactRiskExp</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:PotRiskCause</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:PotRiskCausedBy</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:PotRiskToIBM</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:PotRiskToIBMAction</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:ProceedToMonitoring</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:Process</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:Process Sub Domain</Name>
                            <NativeSyntax>String (multi-valued)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:ProcessSubDomain</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:ProgressBar</Name>
                            <NativeSyntax>?undefined gts-risk:progressbar?</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RegImpacted</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RegImpactedCountry</Name>
                            <NativeSyntax>String (multi-valued)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:Risk Expiration Date</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:Risk Identified</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:Risk Identifier Comments</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RiskAppBy</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RiskAppDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RiskApprovalHistory</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RiskRejectDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RiskRejectedBy</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RiskType</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RiskValidationComments</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RiskValidationDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RiskViewReport</Name>
                            <NativeSyntax>?undefined gts-risk:riskviewreport?</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RootCause</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RskActionPlanEliminate</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RskActionPlanReduce</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RskApprover</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RskApproverComments</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RskDetailedDesc</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RskIdentifier</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RskIssueTrackingSystem</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RskOwner</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RskOwnerComments</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RskShortDesc</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RskValidatedBy</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RskValidator</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:SMEList</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:SrLegalCounselAppComment</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:SrLegalCounselAppDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:SrLegalCounselName</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:ThreatSource</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:VulnerabilityDesc</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:Workflow Comment</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:EstImpactLevel</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:EstImpactLevelComments</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:EstOverallProb</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:EstProbTEAdvImpacts</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:EstProbTEAdvImpactsComments</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:EstProbTEOccurance</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:EstProbTEOccuranceComments</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:EstRiskRating</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:FinImpactLevel</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:FinImpactLevelComments</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:FinOverallProb</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:FinProbTEAdvImpacts</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:FinProbTEAdvImpactsComments</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:FinProbTEOccuranceComments</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:FinRiskRating</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:FintProbTEOccurance</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InImpactLevel</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InImpactLevelComments</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InOverallProb</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InProbTEAdvImpacts</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InProbTEAdvImpactsComments</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InProbTEOccurance</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InProbTEOccuranceComments</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InRiskRating</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:Initial Risk Response</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:ORiskRating</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:OveralImpact</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:Overall Heatmap</Name>
                            <NativeSyntax>?undefined gts-riskrating:overall heatmap?</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:OverallProb</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:Reset Risk Response</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:RskResponse</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:RskResponseDetails</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Shared:AccountID</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Shared:DuplicateRecord</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Shared:Migrated</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Shared:RiskID</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modification Date</Name>
                            <NativeSyntax>Date (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modified By</Name>
                            <NativeSyntax>Integer (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Location</Name>
                            <NativeSyntax>String (limited to 4000 characters) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Name</Name>
                            <NativeSyntax>String (limited to 4000 characters) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:LCName</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:LCPhase</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:LCStage</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:LCStatus</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:LCTransition</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase History</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_CompletedLate_Assess</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_CompletedLate_Closed</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_CompletedLate_Communicate</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_CompletedLate_Document</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_CompletedLate_Implement</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_CompletedLate_Monitor</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_CompletedLate_NegativeConfirmation</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_CompletedLate_New</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_CompletedLate_Validate</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Completed_Late_Implement</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Assess</Name>
                            <NativeSyntax>Integer</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Closed</Name>
                            <NativeSyntax>Integer</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Communicate</Name>
                            <NativeSyntax>Integer</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Document</Name>
                            <NativeSyntax>Integer</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Implement</Name>
                            <NativeSyntax>Integer</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Monitor</Name>
                            <NativeSyntax>Integer</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_NegativeConfirmation</Name>
                            <NativeSyntax>Integer</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_New</Name>
                            <NativeSyntax>Integer</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Validate</Name>
                            <NativeSyntax>Integer</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_DueDate_Assess</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_DueDate_Closed</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_DueDate_Communicate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_DueDate_Current Phase</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_DueDate_Document</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_DueDate_Implement</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_DueDate_Monitor</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_DueDate_NegativeConfirmation</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_DueDate_New</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_DueDate_Validate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_EndDate_Assess</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_EndDate_Closed</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_EndDate_Communicate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_EndDate_Current Phase</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_EndDate_Document</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_EndDate_Implement</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_EndDate_Monitor</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_EndDate_NegativeConfirmation</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_EndDate_New</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_EndDate_Validate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_StartDate_Assess</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_StartDate_Closed</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_StartDate_Communicate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_StartDate_Current Phase</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_StartDate_Document</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_StartDate_Implement</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_StartDate_Monitor</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_StartDate_NegativeConfirmation</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_StartDate_New</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_StartDate_Validate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-Std:LCAssignee</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-Std:LCComment</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-Std:LCCustStageDueDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-Std:LCDueDate</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-Std:LCInReview</Name>
                            <NativeSyntax>Boolean (true or false)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-Std:LCReadOnly</Name>
                            <NativeSyntax>Boolean (true or false)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-Std:LCUpdateAssignee</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Accp:Acceptance</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Accp:Reason for Acceptance</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Accp:Within Tolerance</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Inherent Impact</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Inherent Likelihood</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Inherent Risk Rating</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Residual Impact</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Residual Likelihood</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Residual Risk Rating</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:Audit Inherent Frequency</Name>
                            <NativeSyntax>Floating point decimal</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:Audit Inherent Severity</Name>
                            <NativeSyntax>Number (value in default currency)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:Audit Residual Frequency</Name>
                            <NativeSyntax>Floating point decimal</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:Audit Residual Severity</Name>
                            <NativeSyntax>Number (value in default currency)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:AuditInherentRiskExposure</Name>
                            <NativeSyntax>Number (value in default currency)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:AuditResidualRiskExposure</Name>
                            <NativeSyntax>Number (value in default currency)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Fin:Financial Statement Assertions</Name>
                            <NativeSyntax>String (multi-valued)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Fin:General Guidance</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Fin:In Scope</Name>
                            <NativeSyntax>String (multi-valued)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Inherent Impact</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Inherent Likelihood</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Inherent Risk Rating</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Residual Impact</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Residual Likelihood</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Residual Risk Rating</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Inherent Frequency</Name>
                            <NativeSyntax>Floating point decimal</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Inherent Risk Exposure</Name>
                            <NativeSyntax>Number (value in default currency)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Inherent Severity</Name>
                            <NativeSyntax>Number (value in default currency)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Residual Frequency</Name>
                            <NativeSyntax>Floating point decimal</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Residual Risk Exposure</Name>
                            <NativeSyntax>Number (value in default currency)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Residual Severity</Name>
                            <NativeSyntax>Number (value in default currency)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Approve Reject</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Assessment Method</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Baseline Risk Statement</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Control Objective</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Functional Risk Area</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Implemented Risk Statement</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Level 1 Category</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Level 2 Category</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Level 3 Category</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Level 4 Category</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Level 5 Category</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Level 6 Category</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Level 7 Category</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Level 8 Category</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Rejection Comment</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Risk Statement</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Status</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Submit</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Rsk:Additional Description</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Rsk:Domain</Name>
                            <NativeSyntax>String (multi-valued)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Rsk:Owner</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Shared-Basel:Risk Category</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Shared-Basel:Risk Example</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Shared-Basel:Risk Subcategory</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Shared-Lib:Library ID</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Orphan</Name>
                            <NativeSyntax>String (limited to 4000 characters) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Resource ID</Name>
                            <NativeSyntax>Integer (Id) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>TEST_HUJ:Test Link</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>parentFolderId</Name>
                            <NativeSyntax>Integer (Id)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>primaryParentId</Name>
                            <NativeSyntax>Integer (Id)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>typeDefinitionId</Name>
                            <NativeSyntax>Integer (Id)</NativeSyntax>
                        </SchemaItem>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <SchemaItem>
                            <Name>$grcObject</Name>
                            <Syntax>com.ibm.jscript.std.ObjectObject</Syntax>
                            <NativeSyntax>JavaScript Object</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>$grcObjectJSON</Name>
                            <Syntax>java.lang.String</Syntax>
                            <NativeSyntax>JSON</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Created By</Name>
                            <Syntax>java.lang.Integer</Syntax>
                            <NativeSyntax>Integer (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Creation Date</Name>
                            <Syntax>java.util.Date</Syntax>
                            <NativeSyntax>Date (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Description</Name>
                            <Syntax>java.lang.String</Syntax>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Policies:AppPolicies</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Regulations:AppRegs</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:AssDate</Name>
                            <Syntax>java.util.Date</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:AssessedBy</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CIRATSSIMID</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CMAppBy</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CMAppDate</Name>
                            <Syntax>java.util.Date</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CMComments</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CMT</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CRF</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CRFComments</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:ClaimCode</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:ClientDepRedRsk</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:ClientDepRedRsk_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CltCommunicationComplete</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CltCommunicationComplete_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CltCommunicationDate</Name>
                            <Syntax>java.util.Date</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CltResponse</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CltResponseComments</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CltResponseDate</Name>
                            <Syntax>java.util.Date</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CltResponse_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:CurrentStatusDate</Name>
                            <Syntax>java.util.Date</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:DataAttract</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:DataAttract_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:DateLetterSent</Name>
                            <Syntax>java.util.Date</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:EarlyNotification</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:EarlyNotification_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:Examples of potential Vulnerabilities</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:Final Risk Assessment</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:Final Risk Assessment_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:GRAAppBy</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:GRAAppDate</Name>
                            <Syntax>java.util.Date</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:GRAApprover</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:GRAComments</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:GRARejectDate</Name>
                            <Syntax>java.util.Date</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:GRARejectedBy</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:InCauseDet</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LegalReview</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LegalReview_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LetterDocumentedBy</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LetterDocumentedDate</Name>
                            <Syntax>java.util.Date</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LetterRecName</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LetterRecTitle</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LetterRecTitle_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LetterSent</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LetterSent_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LoProcessDiffEval</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:LoProcessDiffEval_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:MainThreatEvent</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:MitigatingControls</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:NoOfDevicesImpacted</Name>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:Platform</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:PotImpactRiskExp</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:PotRiskCause</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:PotRiskCausedBy</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:PotRiskCausedBy_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:PotRiskToIBM</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:PotRiskToIBMAction</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:PotRiskToIBM_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:Process</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:Process_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RegImpacted</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RegImpacted_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RiskAppBy</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RiskAppDate</Name>
                            <Syntax>java.util.Date</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RiskRejectDate</Name>
                            <Syntax>java.util.Date</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RiskRejectedBy</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RiskType</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RiskType_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RiskValidationComments</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RiskValidationDate</Name>
                            <Syntax>java.util.Date</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RootCause</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RskApprover</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RskApproverComments</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RskDetailedDesc</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RskIdentifier</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RskOwner</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RskOwnerComments</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RskShortDesc</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RskValidatedBy</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:RskValidator</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:SMEList</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:ThreatSource</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:ThreatSource_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:VulnerabilityDesc</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:EstImpactLevel</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:EstImpactLevelComments</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:EstImpactLevel_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:EstOverallProb</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:EstOverallProb_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:EstProbTEAdvImpacts</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:EstProbTEAdvImpactsComments</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:EstProbTEAdvImpacts_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:EstProbTEOccurance</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:EstProbTEOccuranceComments</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:EstProbTEOccurance_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:EstRiskRating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:EstRiskRating_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InImpactLevel</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InImpactLevelComments</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InImpactLevel_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InOverallProb</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InOverallProb_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InProbTEAdvImpacts</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InProbTEAdvImpactsComments</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InProbTEAdvImpacts_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InProbTEOccurance</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InProbTEOccuranceComments</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InProbTEOccurance_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InRiskRating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InRiskRating_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:ORiskRating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:ORiskRating_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:OveralImpact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:OveralImpact_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:OverallProb</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:OverallProb_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:RskResponse</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:RskResponseDetails</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:RskResponse_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Shared:AccountID</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Shared:RiskID</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modification Date</Name>
                            <Syntax>java.util.Date</Syntax>
                            <NativeSyntax>Date (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modified By</Name>
                            <Syntax>java.lang.Integer</Syntax>
                            <NativeSyntax>Integer (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Location</Name>
                            <Syntax>java.lang.String</Syntax>
                            <NativeSyntax>String (limited to 4000 characters) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Name</Name>
                            <Syntax>java.lang.String</Syntax>
                            <NativeSyntax>String (limited to 4000 characters) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:LCName</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:LCName_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:LCPhase</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:LCPhase_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:LCStage</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:LCStage_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:LCStatus</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:LCStatus_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:LCTransition</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:LCTransition_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Assess</Name>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Closed</Name>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Communicate</Name>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Document</Name>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Implement</Name>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Monitor</Name>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_NegativeConfirmation</Name>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_New</Name>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Validate</Name>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_StartDate_Current Phase</Name>
                            <Syntax>java.util.Date</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_StartDate_Validate</Name>
                            <Syntax>java.util.Date</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-Std:LCAssignee</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-Std:LCComment</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-Std:LCCustStageDueDate</Name>
                            <Syntax>java.util.Date</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-Std:LCDueDate</Name>
                            <Syntax>java.util.Date</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Inherent Impact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Inherent Impact_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Inherent Likelihood</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Inherent Likelihood_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Inherent Risk Rating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Inherent Risk Rating_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Residual Impact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Residual Impact_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Residual Likelihood</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Residual Likelihood_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Residual Risk Rating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Residual Risk Rating_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:Audit Inherent Severity</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:Audit Inherent Severity_localAmount</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:Audit Residual Severity</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:Audit Residual Severity_localAmount</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:AuditInherentRiskExposure</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:AuditInherentRiskExposure_localAmount</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:AuditResidualRiskExposure</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:AuditResidualRiskExposure_localAmount</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Inherent Impact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Inherent Impact_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Inherent Likelihood</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Inherent Likelihood_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Inherent Risk Rating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Inherent Risk Rating_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Residual Impact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Residual Impact_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Residual Likelihood</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Residual Likelihood_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Residual Risk Rating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Residual Risk Rating_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Inherent Risk Exposure</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Inherent Risk Exposure_localAmount</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Inherent Severity</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Inherent Severity_localAmount</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Residual Risk Exposure</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Residual Risk Exposure_localAmount</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Residual Severity</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Residual Severity_localAmount</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Assessment Method</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Assessment Method_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Status</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Status_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Submit</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Submit_index</Name>
                            <Syntax>java.lang.Integer</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Orphan</Name>
                            <Syntax>java.lang.String</Syntax>
                            <NativeSyntax>String (limited to 4000 characters) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Resource ID</Name>
                            <Syntax>java.lang.String</Syntax>
                            <NativeSyntax>Integer (Id) (read only)</NativeSyntax>
                        </SchemaItem>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
            </ContainerEF>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1597752242289</ModTime>
                <Script name="Fix attribute names">
                    <ModTime>1589204379607</ModTime>
                    <parameter name="enabled">true</parameter>
                    <parameter name="script"><![CDATA[// Replacing ':' with '.' 
var entry = system.newEntry();
for(att in work)
{
	var newName = att.getName().replaceAll(":",".");
	var value = att.getValue(0);
	if(value instanceof java.util.Date)
	{
		var dateStr = system.formatDate(value, "yyyy-MM-dd HH:mm:ss");
		entry[newName] = dateStr;
	}
	else
	{
		entry[newName] = att;	
	}
}
work.removeAllAttributes();
work.merge(entry);

// Prepare to loop for parents of SOXRisk
//work.setAttribute(parentTypes);]]></parameter>
                </Script>
                <Loop name="SOXAccount Parent">
                    <ModTime>1597751350696</ModTime>
                    <LoopType>1</LoopType>
                    <LoopInitOption>2</LoopInitOption>
                    <Connector name="SOXAccount Parent">
                        <InheritFrom>/Connectors/OpenPagesGRCObjectQuery</InheritFrom>
                        <ModTime>1597751350696</ModTime>
                        <ConnectorMode>Iterator</ConnectorMode>
                        <ConnectorState>Enabled</ConnectorState>
                        <Configuration>
                            <InheritFrom>[parent]</InheritFrom>
                            <ModTime>1592419103270</ModTime>
                            <parameter name="keepGlobalState">false</parameter>
                            <parameter name="password">@SUBSTITUTE{property.POC_MVP:op.password}</parameter>
                            <parameter name="query"><![CDATA[@SUBSTITUTE{javascript query = "select [SOXAccount].[Name]," 
		+ "[SOXAccount].[GTS-Account:AccAlias],"
		+ "[SOXAccount].[Description],"
		+ "[SOXAccount].[GTS-Account:AccRegulated],"
		+ "[SOXAccount].[GTS-Account:BAMID],"
		+ "[SOXAccount].[GTS-Account:CltRskReviewPeriod],"
		+ "[SOXAccount].[GTS-Account:AccCountry],"
		+ "[SOXAccount].[GTS-Account:CContractEndDate],"
		+ "[SOXAccount].[GTS-Account:AccGeo],"
		+ "[SOXAccount].[GTS-Account:AccIndustry],"
		+ "[SOXAccount].[GTS-Account:AccMarket],"
		+ "[SOXAccount].[GTS-Account:Restricted],"
		+ "[SOXAccount].[GTS-Account:AccSector],"
		+ "[SOXAccount].[GTS-Account:Status],"
		+ "[SOXAccount].[GTS-Account:SteadyStateDate],"
		+ "[SOXAccount].[GTS-Account:TransformationDate],"
		+ "[SOXAccount].[GTS-Account:TransitionDate],"
		+ "[SOXAccount].[GTS-Account:Type],"
		+ "[SOXAccount].[GTS-Account:TypeofRestriction],"
		+ "[SOXRisk].[Resource ID] from [SOXAccount] join [SOXRisk] on PARENT([SOXAccount]) where [SOXRisk].[Resource ID]='"
		+ work["Resource ID"]
		+ "';";}]]></parameter>
                        </Configuration>
                        <Parser>
                            <InheritFrom>[parent]</InheritFrom>
                        </Parser>
                        <AttributeMap name="Input">
                            <InheritFrom>/AttributeMaps/OP_SOXAccount</InheritFrom>
                        </AttributeMap>
                        <AttributeMap name="Output">
                            <AttributeMapItem>
                                <Name>query</Name>
                                <Type>advanced</Type>
                                <Script><![CDATA[query = "select [SOXAccount].[Name]," 
		+ "[SOXAccount].[GTS-Account:AccAlias],"
		+ "[SOXAccount].[Description],"
		+ "[SOXAccount].[GTS-Account:AccRegulated],"
		+ "[SOXAccount].[GTS-Account:BAMID],"
		+ "[SOXAccount].[GTS-Account:CltRskReviewPeriod],"
		+ "[SOXAccount].[GTS-Account:AccCountry],"
		+ "[SOXAccount].[GTS-Account:CContractEndDate],"
		+ "[SOXAccount].[GTS-Account:AccGeo],"
		+ "[SOXAccount].[GTS-Account:AccIndustry],"
		+ "[SOXAccount].[GTS-Account:AccMarket],"
		+ "[SOXAccount].[GTS-Account:Restricted],"
		+ "[SOXAccount].[GTS-Account:AccSector],"
		+ "[SOXAccount].[GTS-Account:Status],"
		+ "[SOXAccount].[GTS-Account:SteadyStateDate],"
		+ "[SOXAccount].[GTS-Account:TransformationDate],"
		+ "[SOXAccount].[GTS-Account:TransitionDate],"
		+ "[SOXAccount].[GTS-Account:Type],"
		+ "[SOXAccount].[GTS-Account:TypeofRestriction],"
		+ "[SOXRisk].[Resource ID] from [SOXAccount] join [SOXRisk] on PARENT([SOXAccount]) where [SOXRisk].[Resource ID]='"
		+ work["Resource ID"]
		+ "';";]]></Script>
                                <Simple>query</Simple>
                                <SubstitutionTemplate><![CDATA[select [SOXAccount].[Name], [SOXRisk].[Resource ID]  from [SOXAccount]  outer join [SOXRisk] on parent([SOXAccount]) where [SOXRisk].[Resource ID] = '{work["Resource ID"]}'
]]></SubstitutionTemplate>
                            </AttributeMapItem>
                        </AttributeMap>
                        <DeltaSettings>
                            <UniqueAttribute/>
                            <WhenToCommit>After every database operation</WhenToCommit>
                            <RowLocking>SERIALIZABLE</RowLocking>
                            <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                        </DeltaSettings>
                        <Schema name="Input">
                            <InheritFrom>[parent]</InheritFrom>
                        </Schema>
                        <Schema name="Output">
                            <UserComment>{extsyntax=TEXTAREA, name=userComment}</UserComment>
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <ModTime>1597751350696</ModTime>
                            <SchemaItem>
                                <Name>debug</Name>
                                <NativeSyntax>boolean</NativeSyntax>
                            </SchemaItem>
                            <SchemaItem>
                                <Name>help</Name>
                            </SchemaItem>
                            <SchemaItem>
                                <Name>includeFiles</Name>
                                <NativeSyntax>TEXTAREA</NativeSyntax>
                            </SchemaItem>
                            <SchemaItem>
                                <Name>includePrologs</Name>
                                <NativeSyntax>textarea</NativeSyntax>
                            </SchemaItem>
                            <SchemaItem>
                                <Name>keepGlobalState</Name>
                                <NativeSyntax>boolean</NativeSyntax>
                            </SchemaItem>
                            <SchemaItem>
                                <Name>password</Name>
                                <NativeSyntax>password</NativeSyntax>
                            </SchemaItem>
                            <SchemaItem>
                                <Name>query</Name>
                            </SchemaItem>
                            <SchemaItem>
                                <Name>root</Name>
                            </SchemaItem>
                            <SchemaItem>
                                <Name>script</Name>
                                <NativeSyntax>EDITORWINDOW</NativeSyntax>
                            </SchemaItem>
                            <SchemaItem>
                                <Name>url</Name>
                            </SchemaItem>
                            <SchemaItem>
                                <Name>userComment</Name>
                                <NativeSyntax>TEXTAREA</NativeSyntax>
                            </SchemaItem>
                            <SchemaItem>
                                <Name>username</Name>
                            </SchemaItem>
                        </Schema>
                        <LinkCriteria/>
                        <Hooks>
                            <InheritFrom>[parent]</InheritFrom>
                            <Hook name="after_getnext">
                                <InheritFrom>[no inheritance]</InheritFrom>
                                <Name>after_getnext</Name>
                                <Script><![CDATA[entry.removeAllAttributes(); // defined earlier in Fix attribute names script
for(att in conn)
{
	var newName = att.getName().replaceAll(":",".");
	var value = att.getValue(0);
	if(value instanceof java.util.Date)
	{
		var dateStr = system.formatDate(value, "yyyy-MM-dd HH:mm:ss");
		entry[newName] = dateStr;
	}
	else
	{
		entry[newName] = att;	
	}
}
conn.removeAllAttributes();
conn.merge(entry);]]></Script>
                                <Enabled>true</Enabled>
                            </Hook>
                            <Hook name="before_getnext">
                                <Name>before_getnext</Name>
                                <Enabled>true</Enabled>
                            </Hook>
                        </Hooks>
                        <CheckpointConfig/>
                        <SandboxConfig/>
                        <Reconnect>
                            <InheritFrom>[parent]</InheritFrom>
                            <ReconnectRules/>
                        </Reconnect>
                        <Operations/>
                        <PoolDefinition>
                            <InheritFrom>[parent]</InheritFrom>
                        </PoolDefinition>
                        <PoolInstance/>
                    </Connector>
                    <Branch name="SOXAccount Parent">
                        <ModTime>1597751350696</ModTime>
                        <Script name="Debug Output">
                            <ModTime>1587572607482</ModTime>
                            <parameter name="enabled">true</parameter>
                            <parameter name="script"><![CDATA[parent = work.getString("Account Name");
if(parent != null)
{
	log("Found PARENT: "+work["Account Name"]+" for SOXRisk: "+ work["Resource ID"]);
}]]></parameter>
                        </Script>
                        <Conditions/>
                        <MatchAny>false</MatchAny>
                        <Enabled>true</Enabled>
                        <Type>0</Type>
                    </Branch>
                </Loop>
                <Script name="Filter SOXRisk with no Parent SOXAccount">
                    <ModTime>1587587990057</ModTime>
                    <parameter name="enabled">true</parameter>
                    <parameter name="script"><![CDATA[parent = work.getString("Account Name");
if(parent == null)
{
	log("SOXRisk: "
			+ work["Risk ID"] + "("
			+ work["Resource ID"]
			+ ") has no SOXAccount Parent. Skipping...");
	system.skipEntry();
}]]></parameter>
                </Script>
                <Script name="Clean Risk Data">
                    <ModTime>1587545159422</ModTime>
                    <parameter name="enabled">true</parameter>
                    <parameter name="script"><![CDATA[//Remove all the attribute which starts with '$'
for(var att in work)
{
	
	if(att.getName().startsWith("$"))
	{
		work.removeAttribute(att);
	}
	
}]]></parameter>
                </Script>
                <Script name="Filter Fields">
                    <ModTime>1587545163933</ModTime>
                    <parameter name="enabled">true</parameter>
                    <parameter name="script"><![CDATA[for(att in work)
{
	var attName = att.getName();
	if(fieldNames[attName] != true)
	{
		//log("Field name not in list: "+attName);
		work.removeAttribute(attName);
	}
	else
	{   
		found[attName] = true;
	}
}]]></parameter>
                </Script>
                <Script name="DumpWorkEntry">
                    <ModTime>1587545167526</ModTime>
                    <parameter name="enabled">true</parameter>
                    <parameter name="script"><![CDATA[// Dump the work entry
//task.dumpEntry(work);
/*
var attNames = work.getAttributeNames();
java.util.Arrays.sort(attNames);
for(attName in attNames)
{
	log("    "+attName);
}*/
cnt++;
if (cnt % 100 == 0)
{
	log(cnt);
}]]></parameter>
                </Script>
                <Connector name="Output">
                    <InheritFrom>system:/Connectors/ibmdi.FileSystem</InheritFrom>
                    <ModTime>1597752242289</ModTime>
                    <ConnectorMode>AddOnly</ConnectorMode>
                    <ConnectorState>Enabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                        <parameter name="filePath"><![CDATA[@SUBSTITUTE{javascript // e.g. return "string value"
return csvFilename;}]]></parameter>
                    </Configuration>
                    <Parser>
                        <InheritFrom>system:/Parsers/ibmdi.CSV</InheritFrom>
                        <parameter name="csvColumnSeparator">,</parameter>
                        <parameter name="csvColumns"><![CDATA[@SUBSTITUTE{javascript // e.g. return "string value"
return fieldNamesParameters;}]]></parameter>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1593773239525</ModTime>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>Extracted Timestamp</Name>
                            <Type>advanced</Type>
                            <Script>return system.formatDate(utc, "yyyy-MM-dd HH:mm:ss")</Script>
                            <Simple>Extracted Timestamp</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <DeltaSettings/>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <SchemaItem>
                            <Name>$grcObject</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>$grcObjectJSON</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Created By</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Creation Date</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Description</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk.NoOfDevicesImpacted</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:NoOfDevicesImpacted</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.FinImpactLevel</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.FinImpactLevel_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.FinOverallProb</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.FinOverallProb_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.FinProbTEAdvImpacts</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.FinProbTEAdvImpacts_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.FintProbTEOccurance</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.FintProbTEOccurance_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.InImpactLevel</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.InImpactLevel_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.InOverallProb</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.InOverallProb_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.InOverallProb_index,OPLC-SOXRisk.Phase_Days_Communicate,OPSS-Risk.Status,OPSS-Risk.Submit,OPSS-Risk-Aud-Quant.Audit Inherent Severity_localAmount,Location,Created By,OPLC-SOXRisk.Phase_Days_Validate,OPSS-Risk-Aud-Qual.Audit Residual Likelihood,OPSS-Risk.Assessment Method_index,OPSS-Risk-Aud-Quant.AuditInherentRiskExposure,OPSS-Risk-Aud-Qual.Audit Inherent Risk Rating_index,GTS-RiskRating.OverallProb,OPSS-Risk-Qual.Inherent Likelihood_index,OPSS-Risk-Aud-Qual.Audit Residual Risk Rating,GTS-RiskRating.InProbTEOccurance_index,Resource ID,Orphan,OPSS-Risk-Aud-Quant.Audit Residual Severity,OPSS-Risk-Qual.Residual Likelihood_index,OPSS-Risk-Qual.Residual Likelihood,GTS-RiskRating.FintProbTEOccurance,GTS-Risk.NoOfDevicesImpacted,Creation Date,Last Modification Date,GTS-RiskRating.OveralImpact,OPLC-SOXRisk.Phase_Days_Closed,OPSS-Risk-Qual.Residual Impact_index,GTS-RiskRating.FinProbTEAdvImpacts,GTS-RiskRating.ORiskRating_index,OPLC-SOXRisk.Phase_Days_New,OPSS-Risk-Aud-Qual.Audit Inherent Risk Rating,OPSS-Risk-Aud-Qual.Audit Inherent Likelihood,GTS-RiskRating.FinImpactLevel,GTS-RiskRating.FinImpactLevel_index,OPSS-Risk-Aud-Qual.Audit Inherent Impact_index,OPSS-Risk-Quant.Residual Severity_localAmount,OPSS-Risk-Aud-Qual.Audit Residual Impact,GTS-RiskRating.FinOverallProb,OPSS-Risk-Quant.Inherent Risk Exposure_localAmount,OPLC-SOXRisk.Phase_Days_Implement,OPSS-Risk-Quant.Residual Risk Exposure_localAmount,GTS-RiskRating.OverallProb_index,GTS-RiskRating.InProbTEOccurance,GTS-RiskRating.OveralImpact_index,GTS-RiskRating.FintProbTEOccurance_index,GTS-RiskRating.InRiskRating_index,OPSS-Risk-Aud-Quant.AuditResidualRiskExposure_localAmount,OPSS-Risk-Qual.Residual Risk Rating_index,OPSS-Rsk.Owner,OPSS-Risk-Aud-Quant.Audit Inherent Severity,OPLC-SOXRisk.Phase_Days_Document,Description,OPSS-Risk-Qual.Inherent Likelihood,OPSS-Risk.Submit_index,Last Modified By,OPLC-SOXRisk.Phase_Days_NegativeConfirmation,OPSS-Risk.Assessment Method,OPSS-Risk-Qual.Inherent Risk Rating_index,GTS-RiskRating.InOverallProb,OPSS-Risk-Quant.Residual Severity,OPSS-Risk-Aud-Qual.Audit Inherent Impact,OPSS-Risk-Qual.Residual Impact,GTS-RiskRating.InProbTEAdvImpacts_index,OPSS-Risk-Aud-Quant.Audit Residual Severity_localAmount,OPSS-Risk-Qual.Residual Risk Rating,GTS-RiskRating.InImpactLevel,OPSS-Risk.Status_index,GTS-RiskRating.InImpactLevel_index,GTS-RiskRating.FinOverallProb_index,OPSS-Risk-Qual.Inherent Impact_index,OPLC-SOXRisk.Phase_Days_Monitor,OPSS-Risk-Aud-Quant.AuditInherentRiskExposure_localAmount,GTS-RiskRating.InRiskRating,GTS-RiskRating.InProbTEAdvImpacts,OPSS-Risk-Quant.Inherent Severity_localAmount,Name,OPSS-Risk-Quant.Residual Risk Exposure,OPSS-Risk-Aud-Qual.Audit Inherent Likelihood_index,OPLC-SOXRisk.Phase_Days_Assess,OPSS-Risk-Qual.Inherent Impact,OPSS-Risk-Aud-Qual.Audit Residual Impact_index,OPSS-Risk-Qual.Inherent Risk Rating,OPSS-Risk-Aud-Quant.AuditResidualRiskExposure,OPSS-Risk-Quant.Inherent Risk Exposure,OPSS-Risk-Quant.Inherent Severity,GTS-RiskRating.FinProbTEAdvImpacts_index,GTS-RiskRating.ORiskRating,OPSS-Risk-Aud-Qual.Audit Residual Risk Rating_index,OPSS-Risk-Aud-Qual.Audit Residual Likelihood_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.InProbTEAdvImpacts</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.InProbTEAdvImpacts_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.InProbTEOccurance</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.InProbTEOccurance_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.InRiskRating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.InRiskRating_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.ORiskRating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.ORiskRating_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.OveralImpact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.OveralImpact_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.OverallProb</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.OverallProb_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:FinImpactLevel</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:FinImpactLevel_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:FinOverallProb</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:FinOverallProb_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:FinProbTEAdvImpacts</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:FinProbTEAdvImpacts_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:FintProbTEOccurance</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:FintProbTEOccurance_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InImpactLevel</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InImpactLevel_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InOverallProb</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InOverallProb_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InProbTEAdvImpacts</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InProbTEAdvImpacts_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InProbTEOccurance</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InProbTEOccurance_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InRiskRating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InRiskRating_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:ORiskRating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:ORiskRating_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:OveralImpact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:OveralImpact_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:OverallProb</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:OverallProb_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modification Date</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modified By</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Location</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Name</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk.Phase_Days_Assess</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk.Phase_Days_Closed</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk.Phase_Days_Communicate</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk.Phase_Days_Document</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk.Phase_Days_Implement</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk.Phase_Days_Monitor</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk.Phase_Days_NegativeConfirmation</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk.Phase_Days_New</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk.Phase_Days_Validate</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Assess</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Closed</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Communicate</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Document</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Implement</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Monitor</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_NegativeConfirmation</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_New</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Validate</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual.Audit Inherent Impact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual.Audit Inherent Impact_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual.Audit Inherent Likelihood</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual.Audit Inherent Likelihood_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual.Audit Inherent Risk Rating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual.Audit Inherent Risk Rating_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual.Audit Residual Impact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual.Audit Residual Impact_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual.Audit Residual Likelihood</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual.Audit Residual Likelihood_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual.Audit Residual Risk Rating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual.Audit Residual Risk Rating_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Inherent Impact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Inherent Impact_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Inherent Likelihood</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Inherent Likelihood_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Inherent Risk Rating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Inherent Risk Rating_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Residual Impact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Residual Impact_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Residual Likelihood</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Residual Likelihood_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Residual Risk Rating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Residual Risk Rating_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant.Audit Inherent Severity</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant.Audit Inherent Severity_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant.Audit Residual Severity</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant.Audit Residual Severity_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant.AuditInherentRiskExposure</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant.AuditInherentRiskExposure_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant.AuditResidualRiskExposure</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant.AuditResidualRiskExposure_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:Audit Inherent Severity</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:Audit Inherent Severity_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:Audit Residual Severity</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:Audit Residual Severity_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:AuditInherentRiskExposure</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:AuditInherentRiskExposure_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:AuditResidualRiskExposure</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:AuditResidualRiskExposure_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual.Inherent Impact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual.Inherent Impact_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual.Inherent Likelihood</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual.Inherent Likelihood_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual.Inherent Risk Rating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual.Inherent Risk Rating_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual.Residual Impact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual.Residual Impact_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual.Residual Likelihood</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual.Residual Likelihood_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual.Residual Risk Rating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual.Residual Risk Rating_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Inherent Impact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Inherent Impact_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Inherent Likelihood</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Inherent Likelihood_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Inherent Risk Rating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Inherent Risk Rating_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Residual Impact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Residual Impact_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Residual Likelihood</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Residual Likelihood_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Residual Risk Rating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Residual Risk Rating_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant.Inherent Risk Exposure</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant.Inherent Risk Exposure_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant.Inherent Severity</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant.Inherent Severity_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant.Residual Risk Exposure</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant.Residual Risk Exposure_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant.Residual Severity</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant.Residual Severity_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Inherent Risk Exposure</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Inherent Risk Exposure_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Inherent Severity</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Inherent Severity_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Residual Risk Exposure</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Residual Risk Exposure_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Residual Severity</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Residual Severity_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk.Assessment Method</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk.Assessment Method_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk.Status</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk.Status_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk.Submit</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk.Submit_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Assessment Method</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Assessment Method_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Status</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Status_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Submit</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Submit_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Rsk.Owner</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Rsk:Owner</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Orphan</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Resource ID</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <SchemaItem>
                            <Name>$grcObject</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>$grcObjectJSON</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Created By</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Creation Date</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Description</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk.NoOfDevicesImpacted</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Risk:NoOfDevicesImpacted</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.FinImpactLevel</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.FinImpactLevel_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.FinOverallProb</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.FinOverallProb_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.FinProbTEAdvImpacts</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.FinProbTEAdvImpacts_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.FintProbTEOccurance</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.FintProbTEOccurance_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.InImpactLevel</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.InImpactLevel_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.InOverallProb</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.InOverallProb_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.InOverallProb_index,OPLC-SOXRisk.Phase_Days_Communicate,OPSS-Risk.Status,OPSS-Risk.Submit,OPSS-Risk-Aud-Quant.Audit Inherent Severity_localAmount,Location,Created By,OPLC-SOXRisk.Phase_Days_Validate,OPSS-Risk-Aud-Qual.Audit Residual Likelihood,OPSS-Risk.Assessment Method_index,OPSS-Risk-Aud-Quant.AuditInherentRiskExposure,OPSS-Risk-Aud-Qual.Audit Inherent Risk Rating_index,GTS-RiskRating.OverallProb,OPSS-Risk-Qual.Inherent Likelihood_index,OPSS-Risk-Aud-Qual.Audit Residual Risk Rating,GTS-RiskRating.InProbTEOccurance_index,Resource ID,Orphan,OPSS-Risk-Aud-Quant.Audit Residual Severity,OPSS-Risk-Qual.Residual Likelihood_index,OPSS-Risk-Qual.Residual Likelihood,GTS-RiskRating.FintProbTEOccurance,GTS-Risk.NoOfDevicesImpacted,Creation Date,Last Modification Date,GTS-RiskRating.OveralImpact,OPLC-SOXRisk.Phase_Days_Closed,OPSS-Risk-Qual.Residual Impact_index,GTS-RiskRating.FinProbTEAdvImpacts,GTS-RiskRating.ORiskRating_index,OPLC-SOXRisk.Phase_Days_New,OPSS-Risk-Aud-Qual.Audit Inherent Risk Rating,OPSS-Risk-Aud-Qual.Audit Inherent Likelihood,GTS-RiskRating.FinImpactLevel,GTS-RiskRating.FinImpactLevel_index,OPSS-Risk-Aud-Qual.Audit Inherent Impact_index,OPSS-Risk-Quant.Residual Severity_localAmount,OPSS-Risk-Aud-Qual.Audit Residual Impact,GTS-RiskRating.FinOverallProb,OPSS-Risk-Quant.Inherent Risk Exposure_localAmount,OPLC-SOXRisk.Phase_Days_Implement,OPSS-Risk-Quant.Residual Risk Exposure_localAmount,GTS-RiskRating.OverallProb_index,GTS-RiskRating.InProbTEOccurance,GTS-RiskRating.OveralImpact_index,GTS-RiskRating.FintProbTEOccurance_index,GTS-RiskRating.InRiskRating_index,OPSS-Risk-Aud-Quant.AuditResidualRiskExposure_localAmount,OPSS-Risk-Qual.Residual Risk Rating_index,OPSS-Rsk.Owner,OPSS-Risk-Aud-Quant.Audit Inherent Severity,OPLC-SOXRisk.Phase_Days_Document,Description,OPSS-Risk-Qual.Inherent Likelihood,OPSS-Risk.Submit_index,Last Modified By,OPLC-SOXRisk.Phase_Days_NegativeConfirmation,OPSS-Risk.Assessment Method,OPSS-Risk-Qual.Inherent Risk Rating_index,GTS-RiskRating.InOverallProb,OPSS-Risk-Quant.Residual Severity,OPSS-Risk-Aud-Qual.Audit Inherent Impact,OPSS-Risk-Qual.Residual Impact,GTS-RiskRating.InProbTEAdvImpacts_index,OPSS-Risk-Aud-Quant.Audit Residual Severity_localAmount,OPSS-Risk-Qual.Residual Risk Rating,GTS-RiskRating.InImpactLevel,OPSS-Risk.Status_index,GTS-RiskRating.InImpactLevel_index,GTS-RiskRating.FinOverallProb_index,OPSS-Risk-Qual.Inherent Impact_index,OPLC-SOXRisk.Phase_Days_Monitor,OPSS-Risk-Aud-Quant.AuditInherentRiskExposure_localAmount,GTS-RiskRating.InRiskRating,GTS-RiskRating.InProbTEAdvImpacts,OPSS-Risk-Quant.Inherent Severity_localAmount,Name,OPSS-Risk-Quant.Residual Risk Exposure,OPSS-Risk-Aud-Qual.Audit Inherent Likelihood_index,OPLC-SOXRisk.Phase_Days_Assess,OPSS-Risk-Qual.Inherent Impact,OPSS-Risk-Aud-Qual.Audit Residual Impact_index,OPSS-Risk-Qual.Inherent Risk Rating,OPSS-Risk-Aud-Quant.AuditResidualRiskExposure,OPSS-Risk-Quant.Inherent Risk Exposure,OPSS-Risk-Quant.Inherent Severity,GTS-RiskRating.FinProbTEAdvImpacts_index,GTS-RiskRating.ORiskRating,OPSS-Risk-Aud-Qual.Audit Residual Risk Rating_index,OPSS-Risk-Aud-Qual.Audit Residual Likelihood_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.InProbTEAdvImpacts</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.InProbTEAdvImpacts_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.InProbTEOccurance</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.InProbTEOccurance_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.InRiskRating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.InRiskRating_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.ORiskRating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.ORiskRating_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.OveralImpact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.OveralImpact_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.OverallProb</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating.OverallProb_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:FinImpactLevel</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:FinImpactLevel_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:FinOverallProb</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:FinOverallProb_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:FinProbTEAdvImpacts</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:FinProbTEAdvImpacts_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:FintProbTEOccurance</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:FintProbTEOccurance_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InImpactLevel</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InImpactLevel_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InOverallProb</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InOverallProb_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InProbTEAdvImpacts</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InProbTEAdvImpacts_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InProbTEOccurance</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InProbTEOccurance_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InRiskRating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:InRiskRating_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:ORiskRating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:ORiskRating_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:OveralImpact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:OveralImpact_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:OverallProb</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-RiskRating:OverallProb_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modification Date</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modified By</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Location</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Name</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk.Phase_Days_Assess</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk.Phase_Days_Closed</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk.Phase_Days_Communicate</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk.Phase_Days_Document</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk.Phase_Days_Implement</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk.Phase_Days_Monitor</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk.Phase_Days_NegativeConfirmation</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk.Phase_Days_New</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk.Phase_Days_Validate</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Assess</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Closed</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Communicate</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Document</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Implement</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Monitor</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_NegativeConfirmation</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_New</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPLC-SOXRisk:Phase_Days_Validate</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual.Audit Inherent Impact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual.Audit Inherent Impact_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual.Audit Inherent Likelihood</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual.Audit Inherent Likelihood_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual.Audit Inherent Risk Rating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual.Audit Inherent Risk Rating_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual.Audit Residual Impact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual.Audit Residual Impact_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual.Audit Residual Likelihood</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual.Audit Residual Likelihood_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual.Audit Residual Risk Rating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual.Audit Residual Risk Rating_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Inherent Impact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Inherent Impact_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Inherent Likelihood</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Inherent Likelihood_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Inherent Risk Rating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Inherent Risk Rating_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Residual Impact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Residual Impact_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Residual Likelihood</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Residual Likelihood_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Residual Risk Rating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Qual:Audit Residual Risk Rating_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant.Audit Inherent Severity</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant.Audit Inherent Severity_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant.Audit Residual Severity</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant.Audit Residual Severity_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant.AuditInherentRiskExposure</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant.AuditInherentRiskExposure_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant.AuditResidualRiskExposure</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant.AuditResidualRiskExposure_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:Audit Inherent Severity</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:Audit Inherent Severity_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:Audit Residual Severity</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:Audit Residual Severity_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:AuditInherentRiskExposure</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:AuditInherentRiskExposure_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:AuditResidualRiskExposure</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Aud-Quant:AuditResidualRiskExposure_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual.Inherent Impact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual.Inherent Impact_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual.Inherent Likelihood</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual.Inherent Likelihood_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual.Inherent Risk Rating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual.Inherent Risk Rating_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual.Residual Impact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual.Residual Impact_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual.Residual Likelihood</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual.Residual Likelihood_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual.Residual Risk Rating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual.Residual Risk Rating_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Inherent Impact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Inherent Impact_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Inherent Likelihood</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Inherent Likelihood_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Inherent Risk Rating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Inherent Risk Rating_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Residual Impact</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Residual Impact_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Residual Likelihood</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Residual Likelihood_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Residual Risk Rating</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Qual:Residual Risk Rating_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant.Inherent Risk Exposure</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant.Inherent Risk Exposure_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant.Inherent Severity</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant.Inherent Severity_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant.Residual Risk Exposure</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant.Residual Risk Exposure_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant.Residual Severity</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant.Residual Severity_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Inherent Risk Exposure</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Inherent Risk Exposure_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Inherent Severity</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Inherent Severity_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Residual Risk Exposure</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Residual Risk Exposure_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Residual Severity</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk-Quant:Residual Severity_localAmount</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk.Assessment Method</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk.Assessment Method_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk.Status</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk.Status_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk.Submit</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk.Submit_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Assessment Method</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Assessment Method_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Status</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Status_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Submit</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Risk:Submit_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Rsk.Owner</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Rsk:Owner</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Orphan</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Resource ID</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>java.lang.Exception: 'fieldNamesParameters' not found</Name>
                            <NativeSyntax>java.lang.String</NativeSyntax>
                        </SchemaItem>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1597752242289</ModTime>
                        <Hook name="after_close">
                            <Name>after_close</Name>
                            <Enabled>true</Enabled>
                        </Hook>
                        <Hook name="before_close">
                            <Name>before_close</Name>
                            <Enabled>true</Enabled>
                        </Hook>
                        <Hook name="default_fail">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>default_fail</Name>
                            <Script><![CDATA[log("FATAL", "Error writing Risk export file: " + error.message);
throw error.getObject("Exception");]]></Script>
                            <Enabled>true</Enabled>
                        </Hook>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
    
        
    
    
    
        
    
    
    <AssemblyLine name="verify">
            <ModTime>1597396873544</ModTime>
            <Settings>
                <parameter name="ALPoolSettingsDialog">showALPoolSettings</parameter>
                <parameter name="automapattributes">false</parameter>
                <parameter name="createTombstones">false</parameter>
                <parameter name="includeGlobalPrologs">true</parameter>
                <parameter name="includePrologs"><![CDATA[SCP
Script_Lib
]]></parameter>
                <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
            </Settings>
            <Hooks>
                <Hook name="prolog0">
                    <InheritFrom>[no inheritance]</InheritFrom>
                    <Name>prolog0</Name>
                    <Script><![CDATA[//vrs = "20200601 2028"; // Updated to check GSA connection
vrs = "20200604 1327"; // Added geo to properties list]]></Script>
                    <Enabled>true</Enabled>
                </Hook>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="Check properties" state="Enabled"/>
                    <Component name="OpenPages Connector" state="Enabled"/>
                    <Component name="Test ePolicy Server connection" state="Enabled"/>
                    <Component name="Test GSA connection" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer"/>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1597396873544</ModTime>
                <Script name="Check properties">
                    <ModTime>1597396873544</ModTime>
                    <parameter name="script"><![CDATA[function showPropValue(propName) {
	if (propName.toLowerCase().contains("password")
		|| propName.toLowerCase().contains("hostkey")) {
		return "******* "
	} else {
		return system.getTDIProperty(propName);
	}
}

propNames = [
	"op.url",
	"op.username",
	"op.password",
	"gsa.username",
	"gsa.password",
	"gsa.hostkey",
	"gsa.folder.path",
	"gsa.hostname",
//	"winscp.path",
	"schedule",
//	"epolicy.db.url",
//	"epolicy.db.driver",
//	"epolicy.db.username",
//	"epolicy.db.password",
//	"epolicy.db.schema",
//	"policy.template",
	"geo"
];

missing = [];

log("OS detected: " + _OS);

log("Checking properties...")
for (index in propNames) {
	prop = propNames[index];
	if (!(system.getTDIProperty(prop) || "")) {
		missing.push(prop);
	} else {
		log("  " + prop + ": " + showPropValue(prop));
	}
}

if (missing.length > 0) {
	log("ERROR", "Missing parameters: \n" + missing.join("\n    "));
} else {
	log("...all properties found!")
}]]></parameter>
                </Script>
                <Connector name="OpenPages Connector">
                    <InheritFrom>/Connectors/OpenPages Connector</InheritFrom>
                    <ModTime>1589201451929</ModTime>
                    <ConnectorMode>Iterator</ConnectorMode>
                    <ConnectorState>Enabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                        <parameter name="object">SOXRisk</parameter>
                        <parameter name="query"/>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <DeltaSettings>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                        <Hook name="before_execute">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>before_execute</Name>
                            <Script>log("Checking connection to OpenPages...");</Script>
                            <Enabled>true</Enabled>
                        </Hook>
                        <Hook name="before_initialize">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>before_initialize</Name>
                            <Script/>
                            <Enabled>false</Enabled>
                        </Hook>
                        <Hook name="default_ok">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>default_ok</Name>
                            <Script>log("...success!")</Script>
                            <Enabled>true</Enabled>
                        </Hook>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
                <Script name="Test ePolicy Server connection">
                    <ModTime>1597396914269</ModTime>
                    <parameter name="script"/>
                </Script>
                <Script name="Test GSA connection">
                    <ModTime>1591036496797</ModTime>
                    <parameter name="script"><![CDATA[log("Testing connectivity to GSA...");

var scp = new SCP(system.getTDIProperty("gsa.hostname"), 
						system.getTDIProperty("gsa.username"),
						system.getTDIProperty("gsa.password"),
						system.getTDIProperty("gsa.hostkey"));
// Create test file
var filepath = "POC_MVP/test.txt";
var file = system.openFileForOutput(filepath);
file.write("Test file to verify GSA transfer ability...");
file.close();
// Try to transfer it to GSA
try {
	scp.put(filepath, system.getTDIProperty("gsa.folder.path"));
	log("...success!")
} catch (ex) {
	log("Error transfer test file (" + filepath + ") to GSA");
}

// Now delete the test file
if (system.deleteFile(filepath)) {
	log("Test file (" + filepath + ") deleted.");
} else {
	log("ERROR", "Unable to delete test file (" + filepath + ")");
}]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
    
        
        
        
        
        
        
        <AssemblyLine name="Migrate_ePolicy">
            <ModTime>1597859783286</ModTime>
            <Settings>
                <parameter name="ALPoolSettingsDialog">showALPoolSettings</parameter>
                <parameter name="automapattributes">false</parameter>
                <parameter name="createTombstones">false</parameter>
                <parameter name="includeGlobalPrologs">true</parameter>
                <parameter name="includePrologs"><![CDATA[ClauseControlObj
ExcelSheet
Mapper
OpenPagesObj
RequestObj
SCP
Script_Lib
Timer
WordDoc
ePolicyObj]]></parameter>
                <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
            </Settings>
            <Hooks>
                <ModTime>1597680130470</ModTime>
                <Hook name="epilog2">
                    <InheritFrom>[no inheritance]</InheritFrom>
                    <Name>epilog2</Name>
                    <Script><![CDATA[// Log all creations
function showJson(obj, lvl) {
	lvl = lvl || 0;
	var pad = "                                  ".substring(0, lvl*4);
	if (typeof obj != "object" || obj == null) {
		log(pad + obj);
	} else {
		for (var propName in obj) {
			var subobj = obj[propName];
			if (subobj instanceof Array) {
				log(pad + "  " + propName + ": [");
				for (var i = 0; i < subobj.length; i++) {
					showJson(subobj[i], lvl+1);
				}
				log(pad + "]");
			} else
			if (typeof subobj == "object") {
				log(pad + "  " + propName + ": {");
				showJson(subobj, lvl+1);
				log(pad + "  }")
			} else {
				log(pad + "  " + propName + ": " + subobj);
			}
		}
	}
}
log("");
log("Total objects created: ");
showJson(_totalCount);
//log("Objects created: ");
//showJson(_createdByAccount);
log("");
log("Objects created per account:");
showJson(_countByAccount);

// Show timing metrics
timingEntry = com.ibm.di.entry.Entry.fromJSON(toJson(timer.timers()));
timingMap = new java.util.HashMap();
for (att in timingEntry) {
	name = att.getName();
	count = att.getValue(0);
	timingMap.put(count, name);
}
timings = timingMap.keySet().toArray();
java.util.Arrays.sort(timings);

log("");
log("--------- Timings ----------");
for (i = 0; i < timings.length; i++) {
	timing = timings[i];
	seconds = Math.round(timing/1000);
	minutes = Math.floor(seconds / 60);
	secondsAfter = seconds % 60;
	log("    " + LJ(timingMap.get(timing), 35, i) 
				+ RJ(minutes, 11, i) + " min"
				+ RJ(secondsAfter, 3) + " sec");
}]]></Script>
                    <Enabled>true</Enabled>
                </Hook>
                <Hook name="prolog0">
                    <InheritFrom>[no inheritance]</InheritFrom>
                    <Name>prolog0</Name>
                    <Script><![CDATA[//vrs = "20200617 2112"; // Reading controls BEFORE mapping/adding Policy to OP
//vrs = "20200618 1909"; // Fixed problems we found prior-to cadence
//vrs = "20200703 1250"; // Now migrating Clauses (Procedures) and Control Clauses
//vrs = "20200705 18:30"; // Everything done except Technical Specifications
//vrs = "20200712 2140"; // Creating Excel sheets with multiple validation and history log entries
//vrs = "20200731 2335"; // Renaming Policy with version.sub-version appended to the name
//vrs = "20200802 1544"; // Corrected renaming functionality
//vrs = "20200804 1623"; // Fixed vlEntry - change to hlEntry for History Log migration
//vrs = "20200805 2243"; // Added timings and fixed TecSpec doc writing to make Name unique
//vrs = "20200806 1612"; // Fixed Policy name update with version and sub-version
//vrs = "20200810 1127"; // Removed renaming of Policy with vers/sub-vers
vrs = "20200817 1801"; // Adding Evidence and logs for Technical Specifications too

// Defining some local functions for this AL
// Initialize 'created' object
_createdByAccount = {};
_countByAccount = {};
_totalCount = {};

function saveCreationDetails(account, type, entry, addToArray) {
	addToArray = addToArray || [];
	
	// Add to array of created objects and count
	var savedObj = {
		type: type,
		name: entry.getString("Name"),
		id: entry.getString("Resource ID"),
		children: []
	};
	
	addToArray.push(savedObj);
	if (!_createdByAccount[account]) {
		_createdByAccount[account] = [];
	}
	_createdByAccount[account].push(savedObj);
	if (!_countByAccount[account]) {
		_countByAccount[account] = {};
	}
	_countByAccount[account][type] = (_countByAccount[account][type] || 0) + 1;
	_totalCount[type] = (_totalCount[type] || 0) + 1;
	return savedObj.children;
}

function mapColumn(value1, value2, value3) {
	var useValue = value1 || value2 || value3 || "NA";
	switch (useValue) {
		case "N/A": return "NA";
		case "P":
		case "A": return useValue;
		default: return "NA";
	}
}

function mapFunction(value){
	switch (value){
		case "I": return "Insert";
		case "U": return "Update";	
		case "D": return "Delete";
		 default: return "NA";		
		
	}
	
}
// Display Order for Clauses (Procedures)
displayOrder = {};
displayOrder["introduction"] = 1;
displayOrder["scope"] = 2;
displayOrder["processes used in this document"] = 3;
displayOrder["document structure"] = 4;
displayOrder["information security policies (clause 5)"] = 5;
displayOrder["organization of information security (clause 6)"] = 6;
displayOrder["human Resource Security (clause 7)"] = 7;
displayOrder["asset management (clause 8)" ] = 8;
displayOrder["access control (clause 9)"] = 9;
displayOrder["cryptography (clause 10)"] = 10;
displayOrder["physical and environmental security (clause 11)"] = 11;
displayOrder["operations security (clause 12)"] = 12;
displayOrder["communications security (clause 13)"] = 13;
displayOrder["systems acquisition, development and maintenance (clause 14)"] = 14;
displayOrder["supplier relationships (clause 15)"] = 15;
displayOrder["Summary of objectives for Clause 15"] = 15;
displayOrder["management of information security incidents and improvements (clause 16)"] = 16;
displayOrder["information security aspects of business continuity management (clause 17)"] = 17;
displayOrder["compliance (clause 18)"] = 18;
displayOrder["appendices"] = 19;
displayOrder["technical specifications"] = 20;
displayOrder["csd document control"] = 21;
displayOrder["csd approved deviations"] = 22;
displayOrder["pci-dss responsibility matrix and other pci information"] = 23;
displayOrder["glossary"] = 24;

orderIndex = 100;
function getDisplayOrder(description) {
	for (var desc in displayOrder) {
		if (desc.toLowerCase().startsWith(description.toLowerCase())) {
			return displayOrder[desc];
		}
	}
	return orderIndex++;
}

timer = new Timer();
timer.start("migration process (whole)")
timer.start("initialization");
//java.lang.System.getProperties().put("_timer", timer);]]></Script>
                    <Enabled>true</Enabled>
                </Hook>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="Debug settings" state="Enabled"/>
                    <Component name="define addEvidenceAndLogs function" state="Enabled"/>
                    <Component name="Get request details" state="Enabled"/>
                    <Component name="Process" state="Enabled"/>
                    <Component name="OpenPages Connector" state="Enabled"/>
                    <Component name="End of processing" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer"/>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1597859783286</ModTime>
                <Script name="Debug settings">
                    <ModTime>1597859783286</ModTime>
                    <parameter name="script"><![CDATA[debug = true; // debug = true means write operations not performed
useId = 45392; // Set useId to the most recently created Policy for when debug == true

// The mockupEntry is for debugging this AL without having to call it from the Service
mockupEntry = system.newEntry();
mockupEntry["http.body"] = toJson({
	accounts: [
		{
			name: "Copacabana",
			migrate: true
		}
//		,
//		{
//			name: "WHU",
//			migrate: false
//		}
	]
});
mockupEntry["http.bodyAsString"] = mockupEntry["http.body"];
mockupEntry["content-type"] = "application/json)";
mockupEntry["http.Authorization"] = "arf";
mockupEntry["http.method"] = "POST";
mockupEntry["http.base"] = "/migrate";]]></parameter>
                </Script>
                <Script name="define addEvidenceAndLogs function">
                    <InheritFrom>/Scripts/evidenceAndLogs</InheritFrom>
                    <ModTime>1597672915225</ModTime>
                </Script>
                <Script name="Get request details">
                    <ModTime>1596801785181</ModTime>
                    <parameter name="script"><![CDATA[// Save the RequestObj from the Service, or if debugging locally create a new on with the mockupEntry
request = work.getObject("RequestObj") || new RequestObj(mockupEntry);

// get operation from the request
operation = request.operation();
accounts = request.accounts();

log("Performing operation: " + operation);

migrate = "migrate".equalsIgnoreCase(operation);]]></parameter>
                </Script>
                <Script name="Process">
                    <ModTime>1597823254488</ModTime>
                    <parameter name="script"><![CDATA[db = new ePolicyObj();

if (debug) {
	log("\n\n\n\n\n	****** NOTE: Debug is TRUE ******   \n\n,");
	system.sleep(2);
}

// Use the Passive OpenPages Connector if available to enable debugging
if (typeof ctr != "undefined") {
	op = new OpenPagesObj(ctr);
} else {
	op = new OpenPagesObj();
}

// Setup Clause Control object
cc = new ClauseControlObj({
	openPagesObj: op,
	debug: debug
});

// For each Account passed to this AL...
for (i in accounts) {
	account = accounts[i];
	accountName = account.name;
	doMigration = migrate && account.migrate;
	
	// Save attachements to OpenPages Policy to also associate with the TechSpec
	
	log("Handing account " + accountName + "   migrating: " + doMigration);

	// First find the account in iPolicy - fail if not found
	log("Looking for account (" + accountName + ") in ePolicy...");
	res = db.find("IW.ACCOUNT", "NAME", accountName);

	if (res.length == 0) {
		errmsg = "Unable to find Account in ePolicy db";
		log("ERROR", errmsg);
		throw errmsg;
	}

	ePolicyAccount = res[0];
	log("Found account: " + accountName + " - ID: " + ePolicyAccount.ID
		+ '\n' + ePolicyAccount.toJSON());
		
	// Prepare attributes for later mapping
	ePolicyAccount.ePolicy_Account_Name = ePolicyAccount.Name;
	ePolicyAccount.ePolicy_Account_ShortName = ePolicyAccount.ShortName;
	ePolicyAccount.Country_FullName = ePolicyAccount.LOCATION_FULL_NAME;
	ePolicyAccount.ePolicy_Template_Name = ePolicyAccount.TEMPLATE_POLICYTYPE_NAME;
	ePolicyAccount.ePolicy_Template_Version = ePolicyAccount.TEMPLATE_VERSION;
	

	// Now find the account in OpenPages - fail if not found
	log("Looking for account in OpenPages...");

	// This handy function first searches by Name and then by Alias
	res = op.findAccount(accountName, { objectType: "SOXAccount" });

	if (res.length == 0) {
		errmsg = "Unable to find Account in OpenPages";
		log("ERROR", errmsg);
		throw errmsg;
	}

	opAccount = res[0];
	opAccountID = opAccount.getString("Resource ID");
	log("Found account: " + accountName + " - ID: " + opAccount.ID
		+ '\n' + opAccount.toJSON());

	// Add attributes for later mapping
	opAccount.Account_Name = opAccount.Name;
	accountNameWithCode = accountName + " (" + opAccount.getString("Name") + ")";

	// Now read CSDs from ePolicy
	existingPolicyList = op.findChildren("SOXAccount",
		opAccount.getString("Resource ID"),
		"Policy");
	// Get count of existing epolicy for this accout
	tempcount = 0;
	for (existingPolicy in existingPolicyList) {
		count = existingPolicy.getString("name").split("-")[1];
		if (count > tempcount) {
			tempcount = count;
		}
	}

	timer.stop("initialization");

	log("Reading CSDs...");
	csdIndex = tempcount;

	CSDList = db.query("policy", ePolicyAccount);
	for (CSD in CSDList) {
		csdIndex++;
		CSD.epolicy_account_name = ePolicyAccount.ePolicy_Account_Name;
		CSD.csd_updated_ts = CSD.Updated_TS;
		log("Found CSD: " + CSD.toJSON());
		
		// Get the status, for use later when migrating Technical Specifications
		csd_status = CSD.getString("STATUS");

		// Set attributes used for later mapping
		CSD.CSD_NAME = CSD.NAME;
		CSD.ePolicy_Template_Name = CSD.TEMPLATE_POLICYTYPE_NAME;
		CSD.ePolicy_Template_Version = CSD.TEMPLATE_VERSION;

		// Find policy Version and Sub- Version

		csdDocumentList = db.query("csd_document", CSD);

		for (csdDoc in csdDocumentList) {
			bytesarr = csdDoc.getObject("FORM");


			fis = new java.io.ByteArrayInputStream(bytesarr);

			document = new org.apache.poi.xwpf.usermodel.XWPFDocument(org.apache.poi.openxml4j.opc.OPCPackage.open(fis));					// ***********************

			// Initial version numbers to unknown values
			versionSubversion = {
				template: {
					value: "?.?",
					match: "template version:"
				},
				policy: {
					value: "?.?",
					match: "document identification:"
				}
			}
			
			tables = document.getTables();
			
			for (table in tables) {
				paraStr = table.getText();

				if (paraStr.toLowerCase().contains(versionSubversion.policy.match)) {
					lines = system.splitString(paraStr, "\n");
					for (line in lines) {
						for (type in versionSubversion) {
							p = line.toLowerCase().indexOf(versionSubversion[type].match);
							if (p >= 0) {
								versionSubversion[type].value = line.substring(p + versionSubversion[type].match.length).trim();
							}	
						}	
					}
				}	
			}

			fis.close();

			for (type in versionSubversion) {
				log(" -> " + type + " version.subversion string found: " + versionSubversion[type].value);

				parts = system.splitString(versionSubversion[type].value, " ");
				verStr = parts[parts.length-1];
				
				p = verStr.indexOf(".");
				if (p > 0) {
					version = verStr.substring(0, p).trim();
					subversion = verStr.substring(p+1).trim();
				}
				
				if (!CSD[type + "_version"] || version != "?") {
					CSD[type + "_version"] = version + "." + subversion;
				}
			}
		}


		// Find controls attached to this ePolicy CSD

		log("Reading controls...");
		ctlList = db.query("controls", CSD);

		// log("WARN", "\n\n\n-------------------- NOT MIGRATING CONTROL CLAUSES ------------\n\n\n--");
		// ctlList = (new java.util.ArrayList()).toArray();

		for (ctl in ctlList) {
			log("Found control: " + ctl.toJSON());

			// Use controls found to set values later used to create the Policy
			ctlName = (ctl.getString("name") || "").toLowerCase();
			if (ctlName.contains("regulatory control")) {
				CSD._regulatoryControls = ctl.getString("VARIABLE")
			} else
				if (ctlName.contains("additional control")) {
					CSD._additionalControls = ctl.getString("VARIABLE")
				}
		}


		// Map CSD to OpenPages Policy

		policyMap = new Mapper("POC_MVP/map_csd_to_policy.map");
		csdEntry = policyMap.map([CSD, opAccount]);

		// Remove Policy name so Openpage generate it
		csdEntry.removeAttribute("Name");

		// Create the OpenPages Policy

		log("About to write OP Policy:\n" + csdEntry.toJSON());
		newPolicy = op.add(csdEntry, {
			objectType: "Policy",
			parentType: "SOXAccount",
			parentID: opAccountID,
			debug: debug || !doMigration
		});

		newPolicyId = newPolicy.getString("Resource Id");
		
		if (debug) {
			debugJSON = '{'
				+ '\n	"Description": "Migrated from ePolicy: Customer Security Document_V2.1.4",'
				+ '\n	"GTS-Policy:DPE": "anpde186@in.ibm.com",'
				+ '\n	"Name": "POL-293-Acc-44-AG",'
				+ '\n	"OPSS-Pol:Next Review Date": "",'
				+ '\n	"OPSS-Pol:Version": "v1.",'
				+ '\n	"OPSS-Pol:Common Name": "POL-293-Acc-44-AG",'
				+ '\n	"OPSS-Pol:Type": "CSD",'
				+ '\n	"GTS-Policy:Additional Ctl": "OPT_PCIDSS",'
				+ '\n	"OPSS-Pol:Status": "DPE Approval",'
				+ '\n	"GTS-Policy:Regulatory Ctl": "GDPR"'
				+ '}'
			newPolicy = com.ibm.di.entry.Entry.fromJSON(debugJSON);
			newPolicyId = useId; log("\n\n\n*********** DEBUG CODE SETTING newPolicyId to " + newPolicyId + " *********\n\n\n*");
		}
		log("****** policy id : " + newPolicyId + "	name: " + newPolicy.name);

		// var updatedObj = {};
		// updatedObj.Name = newPolicy.Name + "-v" + CSD.version,
		// updatedObj["Resource ID"] = newPolicy["Resource ID"];
		// var updatedPolicy = newPolicy.fromJSON(toJson(updatedObj));

		// Now update the Policy name and add the version & sub-version
		// linkcrit = {};
		// linkcrit.name = "Resource ID";
		// linkcrit.value = updatedPolicy.getString("Resource ID");
		// log("--- Renaming Policy to " + updatedPolicy.Name);
		// newPolicy = op.update(updatedPolicy, {
		//	 //id: newPolicyId,
		// 	objectType: "Policy",
		// 	parentType: "SOXAccount",
		// 	parentID: opAccountID,
		// 	debug: debug || !doMigration,
		// 	linkcriteria: linkcrit
		// });
		// 
		// log("=== Policy renamed to: " + newPolicy.name);
		
		// Add to the creation metric info
		policyChildren = saveCreationDetails(accountNameWithCode, "Policy", newPolicy);
		
		// Add some attribute names for later maps and templates

		newPolicy.Policy_Name = newPolicy.Name;

		// Now to find CSD Document for this CSD

		//csdDocumentList = db.query("csd_document" , CSD); // This query performed earlier

		for (csdDoc in csdDocumentList) {
			// Add the doc as child of the policy
			log("Adding CSD document as attachment to new OpenPages Policy...")

			map = new Mapper("POC_MVP/map_csddoc.map");
			csdDocEntry = map.map([csdDoc, ePolicyAccount, CSD, opAccount, newPolicy]);

			opCSDDoc = op.add(csdDocEntry,
				{
					objectType: "SOXDocument",
					parentType: "Policy",
					parentId: newPolicyId,
					debug: debug || !doMigration								// ***********************
					//							debug: false // ***********************************************************
				});												// ***********************
			log("Create CSD doc in OpenPages: " + opCSDDoc.toJSON());

			// Add to the creation metric info
			saveCreationDetails(accountNameWithCode, "SOXDocument", opCSDDoc, policyChildren);


			//			// Update new policy name with version
			//			newPolicy.name = newPolicy.name + "v" + CSD.version;
			//			op.modify(newPolicy, {
			//				debug: debug || !doMigration,
			//				objectType: "Policy",
			//				ID: newPolicy["Resource ID"][0]});
		}

		// Read Clause controls from epolicy
		// Putting RR clausectl entries in the rrMap
		ccListRR = db.query("control_clause_rr", CSD);
		rrMap = new java.util.HashMap();
		for (cl in ccListRR) {
			rrMap.put(cl.getString("REF"), cl);
		}

		// And putting RV clausectl entries in the rvMap
		ccListRV = db.query("control_clause_rv", CSD);
		rvMap = new java.util.HashMap();
		for (cl in ccListRV) {
			rvMap.put(cl.getString("REF"), cl);
		}

		// Now build the Array of all refs read
		refList = java.util.ArrayList();
		for (cl in ccListRR) {
			ref = cl.getString("REF");
			if (!refList.contains(ref)) {
				refList.add(ref);
			}
		}
		for (cl in ccListRV) {
			ref = cl.getString("REF");
			if (!refList.contains(ref)) {
				refList.add(ref);
			}
		}
		refArray = refList.toArray();

		// A little testing here:
		for (ref in refList) {
			rvEntry = rvMap.get(ref);
			rrEntry = rrMap.get(ref);
			if (rvEntry != null && rrEntry != null) {
				if (rvEntry.toJSON() != rrEntry.toJSON()) {
					log("Found a difference between:\n" + rrEntry + "\nand\n" + rvEntry);
				}
			}
		}

		// Load mapping files for Procedure and ClauseControls
		procedureMap = new Mapper("POC_MVP/map_procedure.map");
		ccMap = new Mapper("POC_MVP/map_controlclause.map");

		// Begine migrating both Clauses (Procedures) and ClauseControls
		procedureCreated = {};
		controlClauseIndex = {};
		procedureCnt = 99;
		emptyEntry = system.newEntry();

		if (debug || true) {
			log("\n\n... NOT DOING CLAUSE CONTROLS ...\n\n.");
		}
		else {
			// For each ref found in ePolicy Clause Controls...
			for (ref in refArray) {
				// Find the ClauseControl entry (with templateClause etc)
				opcc = cc.findClauseControl(ref);
				if (opcc != null) {
					// If found, then migrate this Clause Control
					templateClause = opcc.getObject("templateClause");
					description = templateClause.getString("description") || "*no_template_clause_description_found*";
	
					// Parse out the clause number from the description, or use the procedureCnt
					// and then remove it from the description, which is lowercased
					procedureIndex = -1;
					p = description.indexOf(" ");
					if (p > 0 && p < 4) {
						indexStr = description.substring(0, p).trim();
						if (system.isValidInt(indexStr)) {
							procedureIndex = system.toInt(indexStr);
							description = description.substring(p + 1).trim().toLowerCase();
						}
					}
					if (procedureIndex == -1) {
						if (description.substring(1, 2) == ".") {
							procedureIndex = description.substring(0, 1);
							description = description.substring(2).trim().toLowerCase();
						} else {
							procedureIndex = ++procedureCnt;
							description = description.trim().toLowerCase();
						}
					}
	
	
					if (!procedureCreated[description]) {
						// Map to create new Procedure
						procEntry = procedureMap.map([templateClause, ePolicyAccount, newPolicy, opAccount]);
	
						// Add Procedure to OpenPages
						procEntry["GTS-Clause:Display Order"] = getDisplayOrder(description);
						log("Adding procedure: " + procEntry.name + " - " + procEntry.description);
						procedureCreated[description] = op.add(procEntry, {
							objectType: "Procedure",
							parentType: "Policy",
							parentId: newPolicyId,
							debug: debug || !doMigration // ******************************************************
						});
	
						// Add to the creation metric info
						procedureChildren = saveCreationDetails(accountNameWithCode, "Procedure", procedureCreated[description], policyChildren);
						procedureCreated[description]._children = procedureChildren;
			
						controlClauseIndex[description] = 0;
					}
	
					newProcedure = procedureCreated[description];
					procedureChildren = newProcedure.getObject("_children");
					
					procName = newProcedure.getString("name");
					if (procName.endsWith(".txt")) {
						procName = procName.substring(0, procName.length - 4);
					}
					newProcedure.procedure_name = procName;
	
					// Get the RR and RV entries if they exist for this ref
					rrEntry = rrMap.get(ref) || emptyEntry;
					rvEntry = rvMap.get(ref) || emptyEntry;
	
					var column3 = mapColumn(rrEntry.getString("IBM"), templateClause.getString("GTS-ClauseCtl:Col3"));
					var column4 = mapColumn(rrEntry.getString("CUST_XYZ"), rvEntry.getString("CUST_XYZ"), templateClause.getString("GTS-ClauseCtl:Col4"));
					var tableType = rrEntry == null ? "RV" : "RR";
	
					// Map to create clause control
					var ccIndex = ++controlClauseIndex[description];
					var cclause = rrEntry.getString("REF") != null ? rrEntry : rvEntry;
					ccEntry = ccMap.map([cclause, newProcedure, ePolicyAccount, templateClause, CSD, newPolicy, opAccount]);
	
					//log("Migrating Clause Control: " + cclause.getString("Ref") + " - " + description);
					log("Migrating Clause Control: " + cclause.toJSON());
	
					// Add clause control to OpenPages
	
					log("Writing Clause Control: " + ccEntry.toJSON() + "\nUnder procedure: " + newProcedure.getString("Resource ID"));
					newCC = op.add(ccEntry, {
						objectType: "GTSClauseCtl",
						parentType: "Procedure",
						parentId: newProcedure.getString("Resource ID"),
						debug: debug || !doMigration  // ****************************************
					});
	
					// Add to the creation metric info
					saveCreationDetails(accountNameWithCode, "GTSClauseCtl", newCC, procedureChildren);
				}
			}
	
			// Now add any Procedures for mandatory Clauses not already written
			for (clauseIndex in cc.mandatoryClauses) {
				mandatoryClause = cc.mandatoryClauses[clauseIndex];
	
				if (!procedureCreated[mandatoryClause.toLowerCase()]) {
					templateClause = cc.getTemplateClause(mandatoryClause);
					description = templateClause.getString("description") || "*no_template_clause_description_found*";
	
					// Parse out the clause number from the description, or use the procedureCnt
					// and then remove it from the description, which is lowercased
					procedureIndex = -1;
					p = description.indexOf(" ");
					if (p > 0 && p < 4) {
						indexStr = description.substring(0, p).trim();
						if (system.isValidInt(indexStr)) {
							procedureIndex = system.toInt(indexStr);
							description = description.substring(p + 1).trim().toLowerCase();
						}
					}
					if (procedureIndex == -1) {
						if (description.substring(1, 2) == ".") {
							procedureIndex = description.substring(0, 1);
							description = description.substring(2).trim().toLowerCase();
						} else {
							procedureIndex = ++procedureCnt;
							description = description.trim().toLowerCase();
						}
					}
	
					// Map to create new Procedure
					procEntry = procedureMap.map([templateClause, ePolicyAccount, newPolicy, opAccount]);
	
					// Add Procedure to OpenPages
					procEntry["GTS-Clause:Display Order"] = getDisplayOrder(description);
					log("Adding Procedure/Clause: " + procEntry.name + " - " + procEntry.description);
					procedureCreated[description] = op.add(procEntry, {
						objectType: "Procedure",
						parentType: "Policy",
						parentId: newPolicyId,
						debug: debug || !doMigration  // *********************************************
					});
	
					// Add to the creation metric info
					saveCreationDetails(accountNameWithCode, "Procedure", procedureCreated[description], policyChildren);
				}
			}
		}
		
		// Here we add Evidence and logs for the Policy
		templatePolicy = (cc && cc.templatePolicy) ? cc.templatePolicy : system.newEntry();

		addEvidenceAndLogs({
			parentEntry: newPolicy,
			parentType: "Policy",
			parentId: newPolicyId,
			entryForQuery: CSD,
			templatePolicy: templatePolicy,
			document_version: CSD.policy_version,
			debug: debug,
			doMigration: doMigration,
			namePrefix: "CSD"
		});

		// Now get Technical Specifications

		tsLista = new java.util.ArrayList();
		tsListb = new java.util.ArrayList();
		tsListc = new java.util.ArrayList();

		tsList = new java.util.ArrayList();
		tsFound = db.query("technicalspecifications", CSD);

		for (ts in tsFound) {
			status = ts.getString("STATUS");
			if (!("Customer_Approved".equalsIgnoreCase(status)
				|| "Production".equalsIgnoreCase(status)
				|| "Obsolete".equalsIgnoreCase(status))) {
				tsLista.add(ts);
			} else
				if ("Customer_Approved".equalsIgnoreCase(status)
					|| "Production".equalsIgnoreCase(status)) {
					tsListb.add(ts);
				} else
					if ("Obsolete".equalsIgnoreCase(status)) {
						tsListc.add(ts);
					}
		}

		// For TechSpecs based on filter a , use latest
		version = -1;
		found = -1;

		for (i = 0; i < tsLista.size(); i++) {
			ts = tsLista.get(i);
			if (ts.getObject("REVISION") > version) {
				found = i;
				version = ts.getObject("REVISION");
			}
		}
		if (found >= 0) {
			tsList.add(tsLista.get(found));
		}

		// For Techspecs based on filter b , return all which Customer_Approved or Production

		for (ts in tsListb) {
			status = ts.getString("STATUS");
			if ("Customer_Approved".equalsIgnoreCase(status)
				|| "Production".equalsIgnoreCase(status)) {
				tsList.add(ts);
			}
		}

		// For Techspecs based on filter c , return the most recent Technical Specification revision that does not exceed the update timestamp of the ePolicy policy record
		found = -1;
		version = -1;
		policyts = CSD.getString("UPDATED_TS");

		for (i = 0; i < tsListc.size(); i++) {
			ts = tsListc.get(i);
			if (ts.getObject("REVISION")
				&& ts.getString("UPDATED_TS") <= policyts) {
				version = ts.getObject("REVISION");
				found = i;
			}
		}
		if (found > 0) {
			tsList.add(tsListc.get(found));
		}

		// Now we see if we have found any techspec that meet our filter

		techSpecMap = new Mapper("POC_MVP/map_csd_to_techspec.map");
		techSpecDocMap = new Mapper("POC_MVP/map_techspec_doc.map");

		tsIndex = 0;
		for (techspec in tsList) {
			tsIndex++;
			techSpecEntry = techSpecMap.map([techspec, ePolicyAccount, opAccount, newPolicy]);
			
			log("About to write Techspec :\n" + techSpecEntry.toJSON());
			newTechSpec = op.add(techSpecEntry, {
				objectType: "GTSTechSpec",
				parentType: "Policy",
				parentID: newPolicyId,
				debug: debug || !doMigration
			});

			log("Created GTSTechSpec in OpenPages: " + newTechSpec.toJSON());
			
			// Add to the creation metric info
			tsChildren = saveCreationDetails(accountNameWithCode, "GTSTechSpec", newTechSpec, policyChildren);

			newTechSpecId = newTechSpec.getString("Resource Id");
			newTechSpec.ts_Name = newTechSpec.name;
			log("----> new GTSTechSpec ID: " + newTechSpecId);
			
			techSpecDocList = db.query("techspec_document", techspec);
			var tsdIndex = 0;
			for (techSpecDoc in techSpecDocList) {
				log("Adding TechSpec as attachment to new OpenPages Policy...");
				
				log("techSpecDoc in OpenPages: " + techSpecDoc.toJSON());
				tsdIndex++;
				techSpecDocEntry = techSpecDocMap.map([techSpecDoc, ePolicyAccount, opAccount, newTechSpec, techspec, newPolicy]);
				techSpecDocEntry.extension = "xls";
				
				var showTSD = system.newEntry();
				showTSD.merge(techSpecDocEntry);
				showTSD.content = "*content in base 64 encoding*";
				log("About to write Techspec doc: " + showTSD.toJSON());
				optechSpecDoc = op.add(techSpecDocEntry,
					{
						objectType: "SOXDocument",
						//parentType: "Policy",
						//parentId: newPolicyId,
						parentType: "GTSTechSpec",
						parentId: newTechSpecId,
						debug: debug || !doMigration							  // ***********************
						//							debug: false // ***********************************************************
					});												// ***********************
				log("Created  techspec doc in OpenPages: " + optechSpecDoc.toJSON());
				log("--------> new TechSpecDoc (SOXDocument) ID: " + optechSpecDoc["Resource ID"]);

				// Add to the creation metric info
				tsChildren = saveCreationDetails(accountNameWithCode, "SOXDocument", optechSpecDoc, tsChildren);
			}
			
			// Now add evidence and logs for this TechSpec
			addEvidenceAndLogs({
				parentEntry: newTechSpec,
				parentType: "GTSTechSpec",
				parentId: newTechSpecId,
				entryForQuery: techspec,
				templatePolicy: templatePolicy,
				document_version: String(techspec.getString("TEMPLATE_VERSION")).trim(),
				debug: debug,
				doMigration: doMigration,
				namePrefix: "Tech Spec"
			});
			
		}

	} // for each CSD
}]]></parameter>
                </Script>
                <Connector name="OpenPages Connector">
                    <InheritFrom>/Connectors/OpenPages Connector</InheritFrom>
                    <ModTime>1597747593149</ModTime>
                    <ConnectorMode>Iterator</ConnectorMode>
                    <ConnectorState>Enabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <DeltaSettings>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                        <Hook name="after_initialize">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>after_initialize</Name>
                            <Script>ctr = thisConnector.connector;</Script>
                            <Enabled>true</Enabled>
                        </Hook>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
                <Script name="End of processing">
                    <ModTime>1596724869508</ModTime>
                    <parameter name="script"><![CDATA[log("\n\n-----");
log("Migration complete!")

timer.stop("migration process (whole)")]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
        
        
        
        
        
        
        
        
        
    
        
        
        
        <AssemblyLine name="inventory_feed">
            <ModTime>1593009945001</ModTime>
            <Settings>
                <parameter name="ALPoolSettingsDialog">showALPoolSettings</parameter>
                <parameter name="automapattributes">false</parameter>
                <parameter name="createTombstones">false</parameter>
                <parameter name="includeGlobalPrologs">true</parameter>
                <parameter name="includePrologs">ScriptLib</parameter>
                <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
            </Settings>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="OpenPages Connector" state="Simulated"/>
                    <Component name="Read CSV" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer">
                <ModTime>1592684734995</ModTime>
                <Connector name="Read CSV">
                    <InheritFrom>system:/Connectors/ibmdi.FileSystem</InheritFrom>
                    <ModTime>1592684734995</ModTime>
                    <ConnectorMode>Iterator</ConnectorMode>
                    <ConnectorState>Enabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1592683296327</ModTime>
                        <parameter name="filePath">POC_MVP/inventory_test.csv</parameter>
                    </Configuration>
                    <Parser>
                        <InheritFrom>system:/Parsers/ibmdi.CSV</InheritFrom>
                        <ModTime>1592683310766</ModTime>
                        <parameter name="csvColumnSeparator">,</parameter>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1592684734995</ModTime>
                        <AttributeMapItem>
                            <Name>$grcObjecType</Name>
                            <Type>simple</Type>
                            <Simple>$grcObjecType</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>Description</Name>
                            <Type>simple</Type>
                            <Simple>Description</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory-ActionPlan:Invisibility Root Cause</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory-ActionPlan:Invisibility Root Cause</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:CAR Checklist Created</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:CAR Checklist Created</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:CAR Checklist Created_index</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:CAR Checklist Created_index</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:Detection Date</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:Detection Date</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:Hostname</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:Hostname</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:IP Address</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:IP Address</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:Invisibility Reason</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:Invisibility Reason</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:Invisibility Reason_index</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:Invisibility Reason_index</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:Operating System</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:Operating System</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:Platform</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:Platform</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:Release</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:Release</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:Remediation Action</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:Remediation Action</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:Remediation Action_index</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:Remediation Action_index</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:Serial Number</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:Serial Number</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:System Model</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:System Model</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:Vendor</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:Vendor</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:Version</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:Version</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1592683238299</ModTime>
                    </AttributeMap>
                    <DeltaSettings>
                        <ModTime>1592683247505</ModTime>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1592683318739</ModTime>
                        <SchemaItem>
                            <Name>$grcObject</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>$grcObjectJSON</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Created By</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Creation Date</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Description</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory-ActionPlan:Invisibility Root Cause</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:CAR Checklist Created</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:CAR Checklist Created_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Detection Date</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Hostname</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:IP Address</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Invisibility Reason</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Invisibility Reason_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Operating System</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Platform</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Release</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Remediation Action</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Remediation Action_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Serial Number</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:System Model</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Vendor</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Version</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modification Date</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modified By</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Location</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Orphan</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Resource ID</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1592683318750</ModTime>
                        <SchemaItem>
                            <Name>$grcObject</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>$grcObjectJSON</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Created By</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Creation Date</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Description</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory-ActionPlan:Invisibility Root Cause</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:CAR Checklist Created</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:CAR Checklist Created_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Detection Date</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Hostname</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:IP Address</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Invisibility Reason</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Invisibility Reason_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Operating System</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Platform</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Release</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Remediation Action</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Remediation Action_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Serial Number</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Serial Number,Location,GTS-Inventory:System Model,GTS-Inventory:Invisibility Reason_index,GTS-Inventory:CAR Checklist Created,GTS-Inventory:Platform,GTS-Inventory-ActionPlan:Invisibility Root Cause,$grcObjectJSON,GTS-Inventory:Vendor,GTS-Inventory:Operating System,GTS-Inventory:Remediation Action_index,GTS-Inventory:Release,Last Modified By,Creation Date,GTS-Inventory:Detection Date,Last Modification Date,GTS-Inventory:CAR Checklist Created_index,GTS-Inventory:Hostname,Resource ID,$grcObject,Orphan,GTS-Inventory:IP Address,GTS-Inventory:Version,GTS-Inventory:Invisibility Reason,Description,Created By,GTS-Inventory:Remediation Action</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:System Model</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Vendor</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Version</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modification Date</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modified By</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Location</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Orphan</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Resource ID</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1592683238299</ModTime>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1592683238299</ModTime>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                    <LookupLimit>1</LookupLimit>
                </Connector>
            </ContainerEF>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1593009906904</ModTime>
                <Connector name="OpenPages Connector">
                    <InheritFrom>/Connectors/OpenPages Connector</InheritFrom>
                    <ModTime>1593009906904</ModTime>
                    <ConnectorMode>Update</ConnectorMode>
                    <ConnectorState>Enabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1592684038620</ModTime>
                        <parameter name="object">Assertion</parameter>
                        <parameter encrypted="true" name="password"/>
                        <parameter name="url">http://gts11.fyre.ibm.com:10108</parameter>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1593009906904</ModTime>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>primaryParentId</Name>
                            <Type>advanced</Type>
                            <Enabled>true</Enabled>
                            <Add>true</Add>
                            <Modify>true</Modify>
                            <Script>7465</Script>
                            <Simple>primaryParentId</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>primaryParentType</Name>
                            <Type>advanced</Type>
                            <Script>"SOXAccount"</Script>
                            <Simple>primaryParentType</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <DeltaSettings>
                        <ModTime>1592683374799</ModTime>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1592684392665</ModTime>
                        <SchemaItem>
                            <Name>$grcObject</Name>
                            <NativeSyntax>JavaScript Object</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>$grcObjectJSON</Name>
                            <NativeSyntax>JSON</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>$grcObjectType</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Comment</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Created By</Name>
                            <NativeSyntax>Integer (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Creation Date</Name>
                            <NativeSyntax>Date (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Description</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory-ActionPlan:Action Plan</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory-ActionPlan:Invisibility Root Cause</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory-ActionPlan:NCI</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory-ActionPlan:Owner</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory-ActionPlan:Start Date</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory-ActionPlan:Target Date</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Add to GACDW</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Assignee</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:CAR Checklist Created</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:CPU Detail</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:CPU Type</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Detection Date</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Hostname</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:IP Address</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Invisibility Reason</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Kernel Type</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Last Communication Date</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Memory</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:NCI</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Operating System</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Other Invisibility Reason</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Other Remediation Action</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Platform</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Release</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Remediation Action</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Serial Number</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:System Model</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Vendor</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Version</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modification Date</Name>
                            <NativeSyntax>Date (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modified By</Name>
                            <NativeSyntax>Integer (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Location</Name>
                            <NativeSyntax>String (limited to 4000 characters) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Name</Name>
                            <NativeSyntax>String (limited to 4000 characters) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Assert:Assertions</Name>
                            <NativeSyntax>String (multi-valued)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Orphan</Name>
                            <NativeSyntax>String (limited to 4000 characters) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Resource ID</Name>
                            <NativeSyntax>Integer (Id) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>parentFolderId</Name>
                            <NativeSyntax>Integer (Id)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>primaryParentId</Name>
                            <NativeSyntax>Integer (Id)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>typeDefinitionId</Name>
                            <NativeSyntax>Integer (Id)</NativeSyntax>
                        </SchemaItem>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1592684490735</ModTime>
                        <LinkCriteriaItem>
                            <Key>172d3638ca6</Key>
                            <Attribute>GTS-Inventory:Hostname</Attribute>
                            <Operator>equals</Operator>
                            <Value>$GTS-Inventory:Hostname</Value>
                        </LinkCriteriaItem>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
        <AssemblyLine name="inventory_readAccounts">
            <ModTime>1592684990133</ModTime>
            <Settings/>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="Display" state="Enabled"/>
                    <Component name="OpenPages Connector" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer">
                <ModTime>1592684653143</ModTime>
                <Connector name="OpenPages Connector">
                    <InheritFrom>/Connectors/OpenPages Connector</InheritFrom>
                    <ModTime>1592684653143</ModTime>
                    <ConnectorMode>Iterator</ConnectorMode>
                    <ConnectorState>Enabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1592684597855</ModTime>
                        <parameter name="object">SOXAccount</parameter>
                        <parameter encrypted="true" name="password"/>
                        <parameter name="url">http://gts11.fyre.ibm.com:10108</parameter>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1592684653143</ModTime>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <DeltaSettings>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <SchemaItem>
                            <Name>$grcObject</Name>
                            <NativeSyntax>JavaScript Object</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>$grcObjectJSON</Name>
                            <NativeSyntax>JSON</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>$grcObjectType</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Comment</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Created By</Name>
                            <NativeSyntax>Integer (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Creation Date</Name>
                            <NativeSyntax>Date (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Description</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory-ActionPlan:Action Plan</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory-ActionPlan:Invisibility Root Cause</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory-ActionPlan:NCI</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory-ActionPlan:Owner</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory-ActionPlan:Start Date</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory-ActionPlan:Target Date</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Add to GACDW</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Assignee</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:CAR Checklist Created</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:CPU Detail</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:CPU Type</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Detection Date</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Hostname</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:IP Address</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Invisibility Reason</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Kernel Type</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Last Communication Date</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Memory</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:NCI</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Operating System</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Other Invisibility Reason</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Other Remediation Action</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Platform</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Release</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Remediation Action</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Serial Number</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:System Model</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Vendor</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Version</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modification Date</Name>
                            <NativeSyntax>Date (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modified By</Name>
                            <NativeSyntax>Integer (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Location</Name>
                            <NativeSyntax>String (limited to 4000 characters) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Name</Name>
                            <NativeSyntax>String (limited to 4000 characters) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Assert:Assertions</Name>
                            <NativeSyntax>String (multi-valued)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Orphan</Name>
                            <NativeSyntax>String (limited to 4000 characters) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Resource ID</Name>
                            <NativeSyntax>Integer (Id) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>parentFolderId</Name>
                            <NativeSyntax>Integer (Id)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>primaryParentId</Name>
                            <NativeSyntax>Integer (Id)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>typeDefinitionId</Name>
                            <NativeSyntax>Integer (Id)</NativeSyntax>
                        </SchemaItem>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                        <LinkCriteriaItem>
                            <Key>172d3638ca6</Key>
                            <Attribute>GTS-Inventory:Hostname</Attribute>
                            <Operator>equals</Operator>
                            <Value>$GTS-Inventory:Hostname</Value>
                        </LinkCriteriaItem>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
            </ContainerEF>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1592684990133</ModTime>
                <Script name="Display">
                    <ModTime>1592684990133</ModTime>
                    <parameter name="script"><![CDATA[foundit = false;
for (att in work) {
	value = (att.getValue() || "").toLowerCase();
	if (value.contains("white hat")) {
		foundit = true;
		break;
	}
}

if (foundit) task.logmsg(work);]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
    
        
        
        
        <AssemblyLine name="inventory_writeFile">
            <ModTime>1593083949277</ModTime>
            <Settings/>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates/>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer"/>
            <ContainerDF name="DataFlowContainer"/>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
        <AssemblyLine name="inventory_writeCSV">
            <ModTime>1593084497250</ModTime>
            <Settings>
                <parameter name="ALPoolSettingsDialog">showALPoolSettings</parameter>
                <parameter name="automapattributes">false</parameter>
                <parameter name="createTombstones">false</parameter>
                <parameter name="includeGlobalPrologs">true</parameter>
                <parameter name="includePrologs"><![CDATA[Script_Lib
]]></parameter>
                <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
            </Settings>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="Read CSV" state="Enabled"/>
                    <Component name="OpenPages Connector" state="Simulated"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer">
                <ModTime>1593084469598</ModTime>
                <Connector name="OpenPages Connector">
                    <InheritFrom>/Connectors/OpenPages Connector</InheritFrom>
                    <ModTime>1593084469598</ModTime>
                    <ConnectorMode>Iterator</ConnectorMode>
                    <ConnectorState>Enabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1593084041666</ModTime>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1593084469598</ModTime>
                        <AttributeMapItem>
                            <Name>$grcObject</Name>
                            <Type>advanced</Type>
                            <Script>null</Script>
                            <Simple>$grcObject</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>$grcObjectJSON</Name>
                            <Type>advanced</Type>
                            <Script>null</Script>
                            <Simple>$grcObjectJSON</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>$grcObjectType</Name>
                            <Type>advanced</Type>
                            <Script>null</Script>
                            <Simple>$grcObjectType</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1593009906904</ModTime>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>primaryParentId</Name>
                            <Type>advanced</Type>
                            <Enabled>true</Enabled>
                            <Add>true</Add>
                            <Modify>true</Modify>
                            <Script>7465</Script>
                            <Simple>primaryParentId</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>primaryParentType</Name>
                            <Type>advanced</Type>
                            <Script>"SOXAccount"</Script>
                            <Simple>primaryParentType</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <DeltaSettings>
                        <ModTime>1592683374799</ModTime>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1593084445170</ModTime>
                        <SchemaItem>
                            <Name>$grcObject</Name>
                            <NativeSyntax>JavaScript Object</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>$grcObjectJSON</Name>
                            <NativeSyntax>JSON</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>$grcObjectType</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Comment</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Created By</Name>
                            <NativeSyntax>Integer (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Creation Date</Name>
                            <NativeSyntax>Date (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Description</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modification Date</Name>
                            <NativeSyntax>Date (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modified By</Name>
                            <NativeSyntax>Integer (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Location</Name>
                            <NativeSyntax>String (limited to 4000 characters) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Name</Name>
                            <NativeSyntax>String (limited to 4000 characters) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Assert:Assertions</Name>
                            <NativeSyntax>String (multi-valued)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Orphan</Name>
                            <NativeSyntax>String (limited to 4000 characters) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Resource ID</Name>
                            <NativeSyntax>Integer (Id) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>parentFolderId</Name>
                            <NativeSyntax>Integer (Id)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>primaryParentId</Name>
                            <NativeSyntax>Integer (Id)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>typeDefinitionId</Name>
                            <NativeSyntax>Integer (Id)</NativeSyntax>
                        </SchemaItem>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1592684392665</ModTime>
                        <SchemaItem>
                            <Name>$grcObject</Name>
                            <NativeSyntax>JavaScript Object</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>$grcObjectJSON</Name>
                            <NativeSyntax>JSON</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>$grcObjectType</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Comment</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Created By</Name>
                            <NativeSyntax>Integer (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Creation Date</Name>
                            <NativeSyntax>Date (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Description</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory-ActionPlan:Action Plan</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory-ActionPlan:Invisibility Root Cause</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory-ActionPlan:NCI</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory-ActionPlan:Owner</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory-ActionPlan:Start Date</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory-ActionPlan:Target Date</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Add to GACDW</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Assignee</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:CAR Checklist Created</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:CPU Detail</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:CPU Type</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Detection Date</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Hostname</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:IP Address</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Invisibility Reason</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Kernel Type</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Last Communication Date</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Memory</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:NCI</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Operating System</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Other Invisibility Reason</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Other Remediation Action</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Platform</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Release</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Remediation Action</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Serial Number</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:System Model</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Vendor</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Version</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modification Date</Name>
                            <NativeSyntax>Date (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modified By</Name>
                            <NativeSyntax>Integer (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Location</Name>
                            <NativeSyntax>String (limited to 4000 characters) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Name</Name>
                            <NativeSyntax>String (limited to 4000 characters) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Assert:Assertions</Name>
                            <NativeSyntax>String (multi-valued)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Orphan</Name>
                            <NativeSyntax>String (limited to 4000 characters) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Resource ID</Name>
                            <NativeSyntax>Integer (Id) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>parentFolderId</Name>
                            <NativeSyntax>Integer (Id)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>primaryParentId</Name>
                            <NativeSyntax>Integer (Id)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>typeDefinitionId</Name>
                            <NativeSyntax>Integer (Id)</NativeSyntax>
                        </SchemaItem>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1592684490735</ModTime>
                        <LinkCriteriaItem>
                            <Key>172d3638ca6</Key>
                            <Attribute>GTS-Inventory:Hostname</Attribute>
                            <Operator>equals</Operator>
                            <Value>$GTS-Inventory:Hostname</Value>
                        </LinkCriteriaItem>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
            </ContainerEF>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1593084020965</ModTime>
                <Connector name="Read CSV">
                    <InheritFrom>system:/Connectors/ibmdi.FileSystem</InheritFrom>
                    <ModTime>1593084020965</ModTime>
                    <ConnectorMode>AddOnly</ConnectorMode>
                    <ConnectorState>Enabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1592683296327</ModTime>
                        <parameter name="filePath">POC_MVP/inventory_test.csv</parameter>
                    </Configuration>
                    <Parser>
                        <InheritFrom>system:/Parsers/ibmdi.CSV</InheritFrom>
                        <ModTime>1592683310766</ModTime>
                        <parameter name="csvColumnSeparator">,</parameter>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1592684734995</ModTime>
                        <AttributeMapItem>
                            <Name>$grcObjecType</Name>
                            <Type>simple</Type>
                            <Simple>$grcObjecType</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>Description</Name>
                            <Type>simple</Type>
                            <Simple>Description</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory-ActionPlan:Invisibility Root Cause</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory-ActionPlan:Invisibility Root Cause</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:CAR Checklist Created</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:CAR Checklist Created</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:CAR Checklist Created_index</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:CAR Checklist Created_index</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:Detection Date</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:Detection Date</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:Hostname</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:Hostname</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:IP Address</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:IP Address</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:Invisibility Reason</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:Invisibility Reason</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:Invisibility Reason_index</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:Invisibility Reason_index</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:Operating System</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:Operating System</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:Platform</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:Platform</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:Release</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:Release</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:Remediation Action</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:Remediation Action</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:Remediation Action_index</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:Remediation Action_index</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:Serial Number</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:Serial Number</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:System Model</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:System Model</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:Vendor</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:Vendor</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>GTS-Inventory:Version</Name>
                            <Type>simple</Type>
                            <Simple>GTS-Inventory:Version</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1593084020965</ModTime>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <DeltaSettings>
                        <ModTime>1592683247505</ModTime>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1592683318739</ModTime>
                        <SchemaItem>
                            <Name>$grcObject</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>$grcObjectJSON</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Created By</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Creation Date</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Description</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory-ActionPlan:Invisibility Root Cause</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:CAR Checklist Created</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:CAR Checklist Created_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Detection Date</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Hostname</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:IP Address</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Invisibility Reason</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Invisibility Reason_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Operating System</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Platform</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Release</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Remediation Action</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Remediation Action_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Serial Number</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:System Model</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Vendor</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Version</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modification Date</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modified By</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Location</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Orphan</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Resource ID</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1592683318750</ModTime>
                        <SchemaItem>
                            <Name>$grcObject</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>$grcObjectJSON</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Created By</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Creation Date</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Description</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory-ActionPlan:Invisibility Root Cause</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:CAR Checklist Created</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:CAR Checklist Created_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Detection Date</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Hostname</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:IP Address</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Invisibility Reason</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Invisibility Reason_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Operating System</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Platform</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Release</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Remediation Action</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Remediation Action_index</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Serial Number</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Serial Number,Location,GTS-Inventory:System Model,GTS-Inventory:Invisibility Reason_index,GTS-Inventory:CAR Checklist Created,GTS-Inventory:Platform,GTS-Inventory-ActionPlan:Invisibility Root Cause,$grcObjectJSON,GTS-Inventory:Vendor,GTS-Inventory:Operating System,GTS-Inventory:Remediation Action_index,GTS-Inventory:Release,Last Modified By,Creation Date,GTS-Inventory:Detection Date,Last Modification Date,GTS-Inventory:CAR Checklist Created_index,GTS-Inventory:Hostname,Resource ID,$grcObject,Orphan,GTS-Inventory:IP Address,GTS-Inventory:Version,GTS-Inventory:Invisibility Reason,Description,Created By,GTS-Inventory:Remediation Action</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:System Model</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Vendor</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Inventory:Version</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modification Date</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modified By</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Location</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Orphan</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Resource ID</Name>
                            <Syntax>java.lang.String</Syntax>
                        </SchemaItem>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1592683238299</ModTime>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1592683238299</ModTime>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                    <LookupLimit>1</LookupLimit>
                </Connector>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
        
        
    
    
        
        
    
    
    
    <AssemblyLine name="Migrate_ePolicy_Service">
            <ModTime>1596794263484</ModTime>
            <Settings>
                <parameter name="ALPoolSettingsDialog">showALPoolSettings</parameter>
                <parameter name="automapattributes">false</parameter>
                <parameter name="createTombstones">false</parameter>
                <parameter name="includeGlobalPrologs">true</parameter>
                <parameter name="includePrologs"><![CDATA[RequestObj
Script_Lib
Timer]]></parameter>
                <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
            </Settings>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="_DEBUG_mock_http_request" state="Enabled"/>
                    <Component name="Process Request" state="Enabled"/>
                    <Component name="Show Return" state="Enabled"/>
                    <Component name="HTTP Listener" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer">
                <Connector name="HTTP Listener">
                    <InheritFrom>system:/Connectors/ibmdi.HTTPServer</InheritFrom>
                    <ModTime>1596794222821</ModTime>
                    <ConnectorMode>Server</ConnectorMode>
                    <ConnectorState>Enabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                        <parameter name="tcpPort">8042</parameter>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <DeltaSettings/>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
            </ContainerEF>
            <ContainerDF name="DataFlowContainer">
                <ALMap name="_DEBUG_mock_http_request">
                    <InheritFrom>[no inheritance]</InheritFrom>
                    <ModTime>1596794263484</ModTime>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <AttributeMapItem>
                            <Name>http.Auth</Name>
                            <Type>advanced</Type>
                            <Script>return system.base64Encode("eddie.hartman@no.ibm.com:abcdefg42!".getBytes())</Script>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>http.base</Name>
                            <Type>advanced</Type>
                            <Script>"/validate"</Script>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>http.body</Name>
                            <Type>advanced</Type>
                            <Script><![CDATA[return toJson({
	accounts: [{
		name: "WHU",
		migrate: false
	},{
		name: "Copacabana",
		migrate: true
	}]
})]]></Script>
                        </AttributeMapItem>
                    </AttributeMap>
                    <State>Disabled</State>
                </ALMap>
                <Script name="Process Request">
                    <ModTime>1596793812240</ModTime>
                    <parameter name="script"><![CDATA[req = new RequestObj(work);

req.processRequest();]]></parameter>
                </Script>
                <Script name="Show Return">
                    <ModTime>1596793593771</ModTime>
                    <parameter name="script"><![CDATA[log("Returning code: "
	+ work.getString("http.resultCode")
	+ " " + work.getString("http.resultMsg"));
log("    body:\n" + work.getString("http.body"));]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
    <AssemblyLine name="z_ReadUser">
            <ModTime>1597064212599</ModTime>
            <Settings>
                <parameter name="ALPoolSettingsDialog">showALPoolSettings</parameter>
                <parameter name="automapattributes">false</parameter>
                <parameter name="createTombstones">false</parameter>
                <parameter name="includeGlobalPrologs">true</parameter>
                <parameter name="includePrologs"><![CDATA[ClauseControlObj
ExcelSheet
Mapper
OpenPagesObj
RequestObj
SCP
Script_Lib
Timer
WordDoc
ePolicyObj]]></parameter>
                <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
            </Settings>
            <Hooks>
                <ModTime>1597051693201</ModTime>
                <Hook name="epilog2">
                    <InheritFrom>[no inheritance]</InheritFrom>
                    <Name>epilog2</Name>
                    <Script><![CDATA[// Log all creations
log("Object created: " + toJson(_created));
log("Opjects created:");
for (objName in _createdCount) {
	log("   " + objName + ": " + _createdCount[objName]);
}

// Show timing metrics
timingEntry = com.ibm.di.entry.Entry.fromJSON(toJson(timer.timers()));
timingMap = new java.util.HashMap();
for (att in timingEntry) {
	name = att.getName();
	count = att.getValue(0);
	timingMap.put(count, name);
}
timings = timingMap.keySet().toArray();
java.util.Arrays.sort(timings);

log("\n--------- Timings ----------");
for (i = 0; i < timings.length; i++) {
	timing = timings[i];
	seconds = Math.round(timing/1000);
	minutes = Math.floor(seconds / 60);
	secondsAfter = seconds % 60;
	log("    " + LJ(timingMap.get(timing), 35, i) 
				+ RJ(minutes, 11, i) + " min"
				+ RJ(secondsAfter, 3) + " sec");
}]]></Script>
                    <Enabled>true</Enabled>
                </Hook>
                <Hook name="prolog0">
                    <InheritFrom>[no inheritance]</InheritFrom>
                    <Name>prolog0</Name>
                    <Script><![CDATA[//vrs = "20200617 2112"; // Reading controls BEFORE mapping/adding Policy to OP
//vrs = "20200618 1909"; // Fixed problems we found prior-to cadence
//vrs = "20200703 1250"; // Now migrating Clauses (Procedures) and Control Clauses
//vrs = "20200705 18:30"; // Everything done except Technical Specifications
//vrs = "20200712 2140"; // Creating Excel sheets with multiple validation and history log entries
//vrs = "20200731 2335"; // Renaming Policy with version.sub-version appended to the name
//vrs = "20200802 1544"; // Corrected renaming functionality
//vrs = "20200804 1623"; // Fixed vlEntry - change to hlEntry for History Log migration
//vrs = "20200805 2243"; // Added timings and fixed TecSpec doc writing to make Name unique
//vrs = "20200806 1612"; // Fixed Policy name update with version and sub-version
vrs = "20200810 1127"; // Removed renaming of Policy with vers/sub-vers

// Defining some local functions for this AL
// Initialize 'created' object
_created = [];
_createdCount = {};

function saveCreationDetails(type, entry, addToArray) {
	addToArray = addToArray || [];
	
	// Add to array of created objects and count
	var savedObj = {
		type: type,
		name: entry.getString("Name"),
		id: entry.getString("Resource ID"),
		children: []
	};
	
	addToArray.push(savedObj);
	_created.push(savedObj);
	_createdCount[type] = (_createdCount[type] || 0) + 1;
	return savedObj.children;
}

function mapColumn(value1, value2, value3) {
	var useValue = value1 || value2 || value3 || "NA";
	switch (useValue) {
		case "N/A": return "NA";
		case "P":
		case "A": return useValue;
		default: return "NA";
	}
}

function mapFunction(value){
	switch (value){
		case "I": return "Insert";
		case "U": return "Update";	
		case "D": return "Delete";
		 default: return "NA";		
		
	}
	
}
// Display Order for Clauses (Procedures)
displayOrder = {};
displayOrder["introduction"] = 1;
displayOrder["scope"] = 2;
displayOrder["processes used in this document"] = 3;
displayOrder["document structure"] = 4;
displayOrder["information security policies (clause 5)"] = 5;
displayOrder["organization of information security (clause 6)"] = 6;
displayOrder["human Resource Security (clause 7)"] = 7;
displayOrder["asset management (clause 8)" ] = 8;
displayOrder["access control (clause 9)"] = 9;
displayOrder["cryptography (clause 10)"] = 10;
displayOrder["physical and environmental security (clause 11)"] = 11;
displayOrder["operations security (clause 12)"] = 12;
displayOrder["communications security (clause 13)"] = 13;
displayOrder["systems acquisition, development and maintenance (clause 14)"] = 14;
displayOrder["supplier relationships (clause 15)"] = 15;
displayOrder["Summary of objectives for Clause 15"] = 15;
displayOrder["management of information security incidents and improvements (clause 16)"] = 16;
displayOrder["information security aspects of business continuity management (clause 17)"] = 17;
displayOrder["compliance (clause 18)"] = 18;
displayOrder["appendices"] = 19;
displayOrder["technical specifications"] = 20;
displayOrder["csd document control"] = 21;
displayOrder["csd approved deviations"] = 22;
displayOrder["pci-dss responsibility matrix and other pci information"] = 23;
displayOrder["glossary"] = 24;

orderIndex = 100;
function getDisplayOrder(description) {
	for (var desc in displayOrder) {
		if (desc.toLowerCase().startsWith(description.toLowerCase())) {
			return displayOrder[desc];
		}
	}
	return orderIndex++;
}]]></Script>
                    <Enabled>true</Enabled>
                </Hook>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="Debug settings" state="Enabled"/>
                    <Component name="Get request details" state="Enabled"/>
                    <Component name="Process" state="Enabled"/>
                    <Component name="OpenPages Connector" state="Enabled"/>
                    <Component name="End of processing" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer"/>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1597064212599</ModTime>
                <Script name="Debug settings">
                    <ModTime>1597051325505</ModTime>
                    <parameter name="script"><![CDATA[debug = false; // debug = true means write operations not performed
useId = 45392; // Set useId to the most recently created Policy for when debug == true

// The mockupEntry is for debugging this AL without having to call it from the Service
mockupEntry = system.newEntry();
mockupEntry["http.body"] = toJson({
	accounts: [
		{
			name: "Copacabana",
			migrate: true
		},{
			name: "WHU",
			migrate: false
		}
	]
});
mockupEntry["http.bodyAsString"] = mockupEntry["http.body"];
mockupEntry["content-type"] = "application/json)";
mockupEntry["http.Authorization"] = "arf";
mockupEntry["http.method"] = "POST";
mockupEntry["http.base"] = "/migrate";]]></parameter>
                </Script>
                <Script name="Get request details">
                    <ModTime>1596801785181</ModTime>
                    <parameter name="script"><![CDATA[// Save the RequestObj from the Service, or if debugging locally create a new on with the mockupEntry
request = work.getObject("RequestObj") || new RequestObj(mockupEntry);

// get operation from the request
operation = request.operation();
accounts = request.accounts();

log("Performing operation: " + operation);

migrate = "migrate".equalsIgnoreCase(operation);]]></parameter>
                </Script>
                <Script name="Process">
                    <ModTime>1597064212599</ModTime>
                    <parameter name="script"><![CDATA[timer = new Timer();
timer.start("migration process (whole)")
timer.start("initialization");

db = new ePolicyObj();
users=db.select("select * from epolicy.User");
for(user in users){
	
	log(user);
}]]></parameter>
                </Script>
                <Connector name="OpenPages Connector">
                    <InheritFrom>/Connectors/OpenPages Connector</InheritFrom>
                    <ModTime>1597063934324</ModTime>
                    <ConnectorMode>Iterator</ConnectorMode>
                    <ConnectorState>Disabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <DeltaSettings>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                        <Hook name="after_initialize">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>after_initialize</Name>
                            <Script>ctr = thisConnector.connector;</Script>
                            <Enabled>true</Enabled>
                        </Hook>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
                <Script name="End of processing">
                    <ModTime>1596724869508</ModTime>
                    <parameter name="script"><![CDATA[log("\n\n-----");
log("Migration complete!")

timer.stop("migration process (whole)")]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
    <AssemblyLine name="Migrate_ePolicy_REST">
            <ModTime>1597866682171</ModTime>
            <Settings>
                <parameter name="ALPoolSettingsDialog">showALPoolSettings</parameter>
                <parameter name="automapattributes">false</parameter>
                <parameter name="createTombstones">false</parameter>
                <parameter name="includeGlobalPrologs">true</parameter>
                <parameter name="includePrologs"><![CDATA[ClauseControlObj
ExcelSheet
Mapper
OpenPagesObj
RequestObj
SCP
Script_Lib
Timer
WordDoc
ePolicyObj]]></parameter>
                <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
            </Settings>
            <Hooks>
                <ModTime>1597866682171</ModTime>
                <Hook name="epilog2">
                    <InheritFrom>[no inheritance]</InheritFrom>
                    <Name>epilog2</Name>
                    <Script><![CDATA[// Log all creations
function showJson(obj, lvl) {
	lvl = lvl || 0;
	var pad = "                                  ".substring(0, lvl*4);
	if (typeof obj != "object" || obj == null) {
		log(pad + obj);
	} else {
		for (var propName in obj) {
			var subobj = obj[propName];
			if (subobj instanceof Array) {
				log(pad + "  " + propName + ": [");
				for (var i = 0; i < subobj.length; i++) {
					showJson(subobj[i], lvl+1);
				}
				log(pad + "]");
			} else
			if (typeof subobj == "object") {
				log(pad + "  " + propName + ": {");
				showJson(subobj, lvl+1);
				log(pad + "  }")
			} else {
				log(pad + "  " + propName + ": " + subobj);
			}
		}
	}
}

log("Object created:");
showJson(counters);

log("Errors and Warnings:");
showJson(errors);
showJson(warnings);

// Show timing metrics
timingEntry = com.ibm.di.entry.Entry.fromJSON(toJson(timer.timers()));
timingMap = new java.util.HashMap();
for (att in timingEntry) {
	name = att.getName();
	count = att.getValue(0);
	timingMap.put(count, name);
}
timings = timingMap.keySet().toArray();
java.util.Arrays.sort(timings);

log("");
log("--------- Timings ----------");
for (i = 0; i < timings.length; i++) {
	timing = timings[i];
	seconds = Math.round(timing/1000);
	minutes = Math.floor(seconds / 60);
	secondsAfter = seconds % 60;
	log("    " + LJ(timingMap.get(timing), 65, i) 
				+ RJ(minutes, 11, i) + " min"
				+ RJ(secondsAfter, 3) + " sec");
}]]></Script>
                    <Enabled>true</Enabled>
                </Hook>
                <Hook name="prolog0">
                    <InheritFrom>[no inheritance]</InheritFrom>
                    <Name>prolog0</Name>
                    <Script><![CDATA[//vrs = "20200617 2112"; // Reading controls BEFORE mapping/adding Policy to OP
//vrs = "20200618 1909"; // Fixed problems we found prior-to cadence
//vrs = "20200703 1250"; // Now migrating Clauses (Procedures) and Control Clauses
//vrs = "20200705 18:30"; // Everything done except Technical Specifications
//vrs = "20200712 2140"; // Creating Excel sheets with multiple validation and history log entries
//vrs = "20200731 2335"; // Renaming Policy with version.sub-version appended to the name
//vrs = "20200802 1544"; // Corrected renaming functionality
//vrs = "20200804 1623"; // Fixed vlEntry - change to hlEntry for History Log migration
//vrs = "20200805 2243"; // Added timings and fixed TecSpec doc writing to make Name unique
//vrs = "20200806 1612"; // Fixed Policy name update with version and sub-version
//vrs = "20200810 1127"; // Removed renaming of Policy with vers/sub-vers
vrs = "20200819 1352"; // Turned this into a Listener AL (HTTP Service)

timer = new Timer();
timer.start("migration process")
timer.start("initialization");
java.lang.System.getProperties().put("_timer", timer);

errors = {};
warnings = {};
counters = {};
timers = timer.timers();]]></Script>
                    <Enabled>true</Enabled>
                </Hook>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="Debug settings" state="Enabled"/>
                    <Component name="Get request details" state="Enabled"/>
                    <Component name="Launch threads" state="Enabled"/>
                    <Component name="Wait for threads to complete" state="Enabled"/>
                    <Component name="Gather metrics" state="Enabled"/>
                    <Component name="End of processing" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer"/>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1597866673832</ModTime>
                <Script name="Debug settings">
                    <ModTime>1597865320757</ModTime>
                    <parameter name="script"><![CDATA[debug = false; // debug = true means write operations not performed
useId = 45392; // Set useId to the most recently created Policy for when debug == true

// The mockupEntry is for debugging this AL without having to call it from the Service
mockupEntry = system.newEntry();
mockupEntry["http.body"] = toJson({
	accounts: [
		{
			name: "Copacabana",
			migrate: true
		},{
			name: "WHU",
			migrate: true
		}
	]
});
mockupEntry["http.bodyAsString"] = mockupEntry["http.body"];
mockupEntry["content-type"] = "application/json)";
mockupEntry["http.Authorization"] = "arf";
mockupEntry["http.method"] = "POST";
mockupEntry["http.base"] = "/validate";
mockupEntry["http.base"] = "/migrate";]]></parameter>
                </Script>
                <Script name="Get request details">
                    <ModTime>1597838878827</ModTime>
                    <parameter name="script"><![CDATA[// Save the RequestObj from the Service, or if debugging locally create a new on with the mockupEntry
request = work.getObject("RequestObj") || new RequestObj(mockupEntry);

// get operation from the request
operation = request.operation();
accounts = request.accounts();

log("Performing operation: " + operation);

// Set the migrate variable
migrate = "migrate".equalsIgnoreCase(operation);

// Initialize the iwe Entry
iwe = system.newEntry();

// Initialize list of ALs launched
als = {};]]></parameter>
                </Script>
                <Script name="Launch threads">
                    <ModTime>1597861531117</ModTime>
                    <parameter name="script"><![CDATA[db = new ePolicyObj();

if (debug) {
	log("\n\n\n\n\n	****** NOTE: Debug is TRUE ******   \n\n,");
	system.sleep(2);
}

// Use the Passive OpenPages Connector if available to enable debugging
if (typeof ctr != "undefined") {
	op = new OpenPagesObj(ctr);
} else {
	op = new OpenPagesObj();
}

// Setup Clause Control object
cc = new ClauseControlObj({
	openPagesObj: op,
	debug: debug
});

// For each Account passed to this AL...
for (i in accounts) {
	account = accounts[i];
	accountName = account.name;
	doMigration = migrate && account.migrate;
	
	// Save attachements to OpenPages Policy to also associate with the TechSpec
	
	log("Handing account " + accountName + "   migrating: " + doMigration);

	// First find the account in iPolicy - fail if not found
	log("Looking for account (" + accountName + ") in ePolicy...");
	res = db.find("IW.ACCOUNT", "NAME", accountName);

	if (res.length == 0) {
		errmsg = "Unable to find Account in ePolicy db";
		log("ERROR", errmsg);
		throw errmsg;
	}

	ePolicyAccount = res[0];
	log("Found account: " + accountName + " - ID: " + ePolicyAccount.ID
		+ '\n' + ePolicyAccount.toJSON());
		
	// Prepare attributes for later mapping
	ePolicyAccount.ePolicy_Account_Name = ePolicyAccount.Name;
	ePolicyAccount.ePolicy_Account_ShortName = ePolicyAccount.ShortName;
	ePolicyAccount.Country_FullName = ePolicyAccount.LOCATION_FULL_NAME;
	ePolicyAccount.ePolicy_Template_Name = ePolicyAccount.TEMPLATE_POLICYTYPE_NAME;
	ePolicyAccount.ePolicy_Template_Version = ePolicyAccount.TEMPLATE_VERSION;
	

	// Now find the account in OpenPages - fail if not found
	log("Looking for account in OpenPages...");

	// This handy function first searches by Name and then by Alias
	res = op.findAccount(accountName, { objectType: "SOXAccount" });

	if (res.length == 0) {
		errmsg = "Unable to find Account in OpenPages";
		log("ERROR", errmsg);
		throw errmsg;
	}

	opAccount = res[0];
	opAccountID = opAccount.getString("Resource ID");
	log("Found account: " + accountName + " - ID: " + opAccount.ID
		+ '\n' + opAccount.toJSON());

	// Add attributes for later mapping
	opAccount.Account_Name = opAccount.Name;
	accountNameWithCode = accountName + " (" + opAccount.getString("Name") + ")";

	// Now read CSDs from ePolicy
	existingPolicyList = op.findChildren("SOXAccount",
		opAccount.getString("Resource ID"),
		"Policy");
	// Get count of existing epolicy for this accout
	tempcount = 0;
	for (existingPolicy in existingPolicyList) {
		count = existingPolicy.getString("name").split("-")[1];
		if (count > tempcount) {
			tempcount = count;
		}
	}

	timer.stop("initialization");

	log("Reading CSDs...");
	csdIndex = tempcount;

	CSDList = db.query("policy", ePolicyAccount);
	for (CSD in CSDList) {
		// Launch Migrate_ePolicy AL with the accounts and CSD details (entries)
		// Also pass in the ControlClauseObj, already initialized, along
		// with other required variables.
		//
		// Note that each thread must set up its own OpenPages and ePolicy connections
		
		iwe._account = account;
		iwe._cc = cc;
		iwe._csd = CSD;
		iwe._opAccount = opAccount;
		iwe._accountName = accountName;
		iwe._accountNameWithCode = accountNameWithCode;
		iwe._ePolicyAccount = ePolicyAccount;
		iwe._operation = (migrate) ? "migrate" : "validate";
		iwe._debug = debug;
		iwe._useId = useId;
		
		alName = accountName + " / " + CSD.name + " (" + CSD.id + ")";
		
		tcb = system.newTCB();
		tcb = system.newTCB()
		tcb.setInitialWorkEntry(iwe);
		tcb.setTaskName(alName);
	
		vect = new java.util.Vector();
		vect.add(tcb);
		vect.add(task.getLog());
		
		log("Launching Migrate_ePolicy for " + alName);
		als[alName] = main.startAL("Migrate_ePolicy_Thread", vect);
	} // for each CSD
} // for each Account]]></parameter>
                </Script>
                <Script name="Wait for threads to complete">
                    <ModTime>1597847734823</ModTime>
                    <parameter name="script"><![CDATA[// Now wait for ALs to complete
cnt = -1;
do {
	cnt++;
	runningCount = 0;
	log("Checking state of threads:")
	for (alName in als) {
		al = als[alName];
		state = al.getCurrentState();
		step = al.getCurrentStep();
		log("  " + alName + "  state: " + state + "   step: " + step);
		
		if (step != 16) { // If not completed, add to count
			runningCount++;
		}
	}


	if (runningCount > 0) {
		task.sleep(10000); // Sleep for 10 sec
	}
	
} while (runningCount > 0);]]></parameter>
                </Script>
                <Script name="Gather metrics">
                    <ModTime>1597863623697</ModTime>
                    <parameter name="script"><![CDATA[for (alName in als) {
	al = als[alName];
	entry = al.getResult();
	
	if (entry != null) {
		metrics = entry.getObject("_metrics");
		
		if (metrics == null) {
			log("ERROR", "No metrics returned for " + al.getShortName());
			continue;
		}
		
		account = metrics.account;
		accountName = account.name;
		
		if (typeof errors[accountName] == "undefined") {
			errors[accountName] = [];
		}
		alErrors = metrics.errors;
		for (i in alErrors) {
			errors[accountName].push(alErrors[i]);
		}

		if (typeof warnings[accountName] == "undefined") {
			warnings[accountName] = [];
		}
		alWarnings = metrics.warnings;
		for (i in alWarnings) {
			warnings[accountName].push(alWarnings[i]);
		}


		alCount = metrics.counters;		
		for (item in alCount) {
			counters[item] = (counters[item] || 0) + alCount[item];
		}

		alTimers = metrics.timer.timers();
		
		for (item in alTimers) {
			timers[item] = (timers[item] || 0) + alTimers[item];
		}
	}
}]]></parameter>
                </Script>
                <Script name="End of processing">
                    <ModTime>1597866673832</ModTime>
                    <parameter name="script"><![CDATA[log("\n\n-----");
log("Migration complete!")

timer.stop("migration process")]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
    
        <AssemblyLine name="z_scanEPolicyTables">
            <ModTime>1597248832124</ModTime>
            <Settings>
                <parameter name="ALPoolSettingsDialog">showALPoolSettings</parameter>
                <parameter name="automapattributes">false</parameter>
                <parameter name="createTombstones">false</parameter>
                <parameter name="includeGlobalPrologs">true</parameter>
                <parameter name="includePrologs">Script_Lib</parameter>
                <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
            </Settings>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="ePolicy_db" state="Enabled"/>
                    <Component name="Scan" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer"/>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1597248832124</ModTime>
                <Connector name="ePolicy_db">
                    <InheritFrom>/Connectors/ePolicy_db</InheritFrom>
                    <ModTime>1597239616384</ModTime>
                    <ConnectorMode>Iterator</ConnectorMode>
                    <ConnectorState>Passive</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <DeltaSettings>
                        <ModTime>1597239604236</ModTime>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1597239616384</ModTime>
                        <Hook name="after_initialize">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>after_initialize</Name>
                            <Script>db = thisConnector.connector;</Script>
                            <Enabled>true</Enabled>
                        </Hook>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
                <Script name="Scan">
                    <ModTime>1597248832124</ModTime>
                    <parameter name="script"><![CDATA[lookfor = {
	Delayed: true,
	Exception: true,
	Comment: true
}
lookfor["Status_Type"] = true;

tables = db.queryTables();
cnt = 0;

for (table in tables) {
	//log(table);
	db.setParam("jdbcTable", table);
	db.initialize(null);
	db.selectEntries();
	e = db.getNextEntry();
	if (e == null) continue;
	names = e.getAttributeNames();
	for (name in names) {
		for (checkfor in lookfor) {
			checkfor = checkfor.toUpperCase();
			if (name.toUpperCase().contains(checkfor)) {
				log(LJ(table, 35, cnt++) + name);
			}
		}
	}
}]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
        
    <AssemblyLine name="z_FindPublishedPolicy">
            <ModTime>1597416029340</ModTime>
            <Settings>
                <parameter name="ALPoolSettingsDialog">showALPoolSettings</parameter>
                <parameter name="automapattributes">false</parameter>
                <parameter name="createTombstones">false</parameter>
                <parameter name="includeGlobalPrologs">true</parameter>
                <parameter name="includePrologs"><![CDATA[ExcelSheet
Mapper
OpenPagesObj
Script_Lib
WordDoc
ePolicyObj
]]></parameter>
                <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
            </Settings>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="Find it" state="Enabled"/>
                    <Component name="OpenPages Connector" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer">
                <ModTime>1597415457393</ModTime>
                <Connector name="OpenPages Connector">
                    <InheritFrom>/Connectors/OpenPages Connector</InheritFrom>
                    <ModTime>1597415457393</ModTime>
                    <ConnectorMode>Iterator</ConnectorMode>
                    <ConnectorState>Enabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1597415294375</ModTime>
                        <parameter name="object">Policy</parameter>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1597415457393</ModTime>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>Name</Name>
                            <Type>simple</Type>
                            <Simple>Name</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>OPSS-Pol:Published Date</Name>
                            <Type>simple</Type>
                            <Simple>OPSS-Pol:Published Date</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <DeltaSettings>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[no inheritance]</InheritFrom>
                        <ModTime>1597415305152</ModTime>
                        <SchemaItem>
                            <Name>$grcObject</Name>
                            <NativeSyntax>JavaScript Object</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>$grcObjectJSON</Name>
                            <NativeSyntax>JSON</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>$grcObjectType</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Comment</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Created By</Name>
                            <NativeSyntax>Integer (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Creation Date</Name>
                            <NativeSyntax>Date (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Description</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Pol-Shared:TCompareHelper</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Pol-Shared:TDocGenHelper</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Policy:Additional Ctl</Name>
                            <NativeSyntax>String (multi-valued)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Policy:Change Comment</Name>
                            <NativeSyntax>Large size String (limited to configured maximum)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Policy:Customer Rep</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Policy:DPE</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Policy:Quality Review Comment</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Policy:Regulatory Ctl</Name>
                            <NativeSyntax>String (multi-valued)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Policy:TPolRef</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-Policy:TRenewalHelper</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-WF-Shared:TAssignee</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>GTS-WF-Shared:TComment</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modification Date</Name>
                            <NativeSyntax>Date (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Last Modified By</Name>
                            <NativeSyntax>Integer (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Location</Name>
                            <NativeSyntax>String (limited to 4000 characters) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Name</Name>
                            <NativeSyntax>String (limited to 4000 characters) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Approval Date</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Approval Status</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Approved By</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:AttestReq</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Author</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Change Significance</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Common Name</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:CreatePolicy</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Definitions LT</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Effective Date</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Expiration Date</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Footer</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Header</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Hold Until</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:IssueDept</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Legal Hold</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Next Review Date</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:OpenPolicyRevision</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Owner</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Policy In Revision</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Published Date</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Publishing Details</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Publishing Status</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Purpose LT</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:References LT</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:ReopenPolicy</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Retention Schedule</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Retired Date</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:RevDesc</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Revision Type</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Roles LT</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:RunTrigger</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Scope LT</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Statement LT</Name>
                            <NativeSyntax>Medium size String (limited to 32000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Status</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Type</Name>
                            <NativeSyntax>String</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Version</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:Version Date</Name>
                            <NativeSyntax>Date</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>OPSS-Pol:ViewPolicy</Name>
                            <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Orphan</Name>
                            <NativeSyntax>String (limited to 4000 characters) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>Resource ID</Name>
                            <NativeSyntax>Integer (Id) (read only)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>parentFolderId</Name>
                            <NativeSyntax>Integer (Id)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>primaryParentId</Name>
                            <NativeSyntax>Integer (Id)</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>typeDefinitionId</Name>
                            <NativeSyntax>Integer (Id)</NativeSyntax>
                        </SchemaItem>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                        <Hook name="after_getnext">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>after_getnext</Name>
                            <Script>sys = "op";</Script>
                            <Enabled>true</Enabled>
                        </Hook>
                        <Hook name="after_selectEntries">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>after_selectEntries</Name>
                            <Script>log("\n ----- OpenPages -----");</Script>
                            <Enabled>true</Enabled>
                        </Hook>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
            </ContainerEF>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1597416029340</ModTime>
                <Script name="Find it">
                    <ModTime>1597416029340</ModTime>
                    <parameter name="script"><![CDATA[dt = work.getObject("OPSS-Pol:Published Date");
name = work.getString("Name");

if (dt != null) {
	log(name + " - " + dt + "   status: " + work.getObject("OPSS-Pol:Publishing Status"));
	//log(work);
}]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
    <AssemblyLine name="z_test">
            <ModTime>1597833172783</ModTime>
            <Settings>
                <parameter name="ALPoolSettingsDialog">showALPoolSettings</parameter>
                <parameter name="automapattributes">false</parameter>
                <parameter name="createTombstones">false</parameter>
                <parameter name="includeGlobalPrologs">true</parameter>
                <parameter name="includePrologs">Script_Lib</parameter>
                <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
            </Settings>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="define function" state="Enabled"/>
                    <Component name="test" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer"/>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1597833172783</ModTime>
                <Script name="define function">
                    <ModTime>1597833172783</ModTime>
                    <parameter name="script"><![CDATA[function getFilenameParts(name) {
	var parts = {
		filename: name,
		extension: "txt"
	}

	var p = name.lastIndexOf(".");

	if (p > 0 && p >= (name.length-5)) {
		parts.extension = name.substring(p+1);
		parts.filename = name.substring(0, p);
	} 

	return parts;
}]]></parameter>
                </Script>
                <Script name="test">
                    <ModTime>1597833072269</ModTime>
                    <parameter name="script"><![CDATA[function test(filename) {
	var obj = getFilenameParts(filename);
	log(" " + filename + "   " + toJson(obj));
}


test("Year Print View For Current User.pdf")
test("arf.xlsx");
test("no extension");
test("some doc.docx");
test("other doc.doc");]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
        <AssemblyLine name="Migrate_ePolicy_Thread_OLD">
            <ModTime>1597251694236</ModTime>
            <Settings>
                <parameter name="ALPoolSettingsDialog">showALPoolSettings</parameter>
                <parameter name="automapattributes">false</parameter>
                <parameter name="createTombstones">false</parameter>
                <parameter name="includeGlobalPrologs">true</parameter>
                <parameter name="includePrologs"><![CDATA[ClauseControlObj
ExcelSheet
Mapper
OpenPagesObj
RequestObj
SCP
Script_Lib
Timer
WordDoc
ePolicyObj]]></parameter>
                <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
            </Settings>
            <Hooks>
                <ModTime>1597251667238</ModTime>
                <Hook name="epilog2">
                    <InheritFrom>[no inheritance]</InheritFrom>
                    <Name>epilog2</Name>
                    <Script><![CDATA[// Log all creations
function showJson(obj, lvl) {
	lvl = lvl || 0;
	var pad = "                                  ".substring(0, lvl*4);
	if (typeof obj != "object" || obj == null) {
		log(pad + obj);
	} else {
		for (var propName in obj) {
			var subobj = obj[propName];
			if (subobj instanceof Array) {
				log(pad + "  " + propName + ": [");
				for (var i = 0; i < subobj.length; i++) {
					showJson(subobj[i], lvl+1);
				}
				log(pad + "]");
			} else
			if (typeof subobj == "object") {
				log(pad + "  " + propName + ": {");
				showJson(subobj, lvl+1);
				log(pad + "  }")
			} else {
				log(pad + "  " + propName + ": " + subobj);
			}
		}
	}
}
log("");
log("Total objects created: ");
showJson(_totalCount);
//log("Objects created: ");
//showJson(_createdByAccount);
log("");
log("Objects created per account:");
showJson(_countByAccount);

// Show timing metrics
timingEntry = com.ibm.di.entry.Entry.fromJSON(toJson(timer.timers()));
timingMap = new java.util.HashMap();
for (att in timingEntry) {
	name = att.getName();
	count = att.getValue(0);
	timingMap.put(count, name);
}
timings = timingMap.keySet().toArray();
java.util.Arrays.sort(timings);

log("");
log("--------- Timings ----------");
for (i = 0; i < timings.length; i++) {
	timing = timings[i];
	seconds = Math.round(timing/1000);
	minutes = Math.floor(seconds / 60);
	secondsAfter = seconds % 60;
	log("    " + LJ(timingMap.get(timing), 35, i) 
				+ RJ(minutes, 11, i) + " min"
				+ RJ(secondsAfter, 3) + " sec");
}]]></Script>
                    <Enabled>true</Enabled>
                </Hook>
                <Hook name="prolog0">
                    <InheritFrom>[no inheritance]</InheritFrom>
                    <Name>prolog0</Name>
                    <Script><![CDATA[//vrs = "20200617 2112"; // Reading controls BEFORE mapping/adding Policy to OP
//vrs = "20200618 1909"; // Fixed problems we found prior-to cadence
//vrs = "20200703 1250"; // Now migrating Clauses (Procedures) and Control Clauses
//vrs = "20200705 18:30"; // Everything done except Technical Specifications
//vrs = "20200712 2140"; // Creating Excel sheets with multiple validation and history log entries
//vrs = "20200731 2335"; // Renaming Policy with version.sub-version appended to the name
//vrs = "20200802 1544"; // Corrected renaming functionality
//vrs = "20200804 1623"; // Fixed vlEntry - change to hlEntry for History Log migration
//vrs = "20200805 2243"; // Added timings and fixed TecSpec doc writing to make Name unique
//vrs = "20200806 1612"; // Fixed Policy name update with version and sub-version
vrs = "20200810 1127"; // Removed renaming of Policy with vers/sub-vers

// Defining some local functions for this AL
// Initialize 'created' object
_createdByAccount = {};
_countByAccount = {};
_totalCount = {};

function saveCreationDetails(type, entry, addToArray) {
	addToArray = addToArray || [];
	
	// Add to array of created objects and count
	var savedObj = {
		type: type,
		name: entry.getString("Name"),
		id: entry.getString("Resource ID"),
		children: []
	};
	
	addToArray.push(savedObj);
	_totalCount[type] = (_totalCount[type] || 0) + 1;
	return savedObj.children;
}

function mapColumn(value1, value2, value3) {
	var useValue = value1 || value2 || value3 || "NA";
	switch (useValue) {
		case "N/A": return "NA";
		case "P":
		case "A": return useValue;
		default: return "NA";
	}
}

function mapFunction(value){
	switch (value){
		case "I": return "Insert";
		case "U": return "Update";	
		case "D": return "Delete";
		 default: return "NA";		
		
	}
	
}

// Display Order for Clauses (Procedures)
displayOrder = {};
displayOrder["introduction"] = 1;
displayOrder["scope"] = 2;
displayOrder["processes used in this document"] = 3;
displayOrder["document structure"] = 4;
displayOrder["information security policies (clause 5)"] = 5;
displayOrder["organization of information security (clause 6)"] = 6;
displayOrder["human Resource Security (clause 7)"] = 7;
displayOrder["asset management (clause 8)" ] = 8;
displayOrder["access control (clause 9)"] = 9;
displayOrder["cryptography (clause 10)"] = 10;
displayOrder["physical and environmental security (clause 11)"] = 11;
displayOrder["operations security (clause 12)"] = 12;
displayOrder["communications security (clause 13)"] = 13;
displayOrder["systems acquisition, development and maintenance (clause 14)"] = 14;
displayOrder["supplier relationships (clause 15)"] = 15;
displayOrder["Summary of objectives for Clause 15"] = 15;
displayOrder["management of information security incidents and improvements (clause 16)"] = 16;
displayOrder["information security aspects of business continuity management (clause 17)"] = 17;
displayOrder["compliance (clause 18)"] = 18;
displayOrder["appendices"] = 19;
displayOrder["technical specifications"] = 20;
displayOrder["csd document control"] = 21;
displayOrder["csd approved deviations"] = 22;
displayOrder["pci-dss responsibility matrix and other pci information"] = 23;
displayOrder["glossary"] = 24;

orderIndex = 100;
function getDisplayOrder(description) {
	for (var desc in displayOrder) {
		if (desc.toLowerCase().startsWith(description.toLowerCase())) {
			return displayOrder[desc];
		}
	}
	return orderIndex++;
}

timer = new Timer();
timer.start("migration process (whole)")
timer.start("initialization");
java.lang.System.getProperties().put("_timer", timer);]]></Script>
                    <Enabled>true</Enabled>
                </Hook>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="Get details from iwe" state="Enabled"/>
                    <Component name="Process" state="Enabled"/>
                    <Component name="OpenPages Connector" state="Enabled"/>
                    <Component name="End of processing" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer"/>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1597251694236</ModTime>
                <Script name="Get details from iwe">
                    <ModTime>1597251530109</ModTime>
                    <parameter name="script"><![CDATA[// Get passed setting from the Initial Work Entry
if (typeof work != "undefined" 
	&& work != null
	&& work._account != null) {
	account = work._account.getValue(0);
	cc = work._cc.getValue(0);
	CSD = work._CSD.getValue(0);
	opAccount = work._opAccount.getValue(0);
	ePolicyAccount = work._ePolicyAccount.getValue(0);
	operation = work._operation.getValue(0);
	debug = work._debug.getValue(0);
	useId = work._useId.getValue(0);
	opAccountID = opAccount.getString("Resource ID");	
} else {
	accountName = "WHU"; // debug data
	CSD = {name: "CSD_1"};
	operation = "validate";
}

migrate = operation.toLowerCase() == "migrate";
accountName = account.name;
doMigration = migrate && account.migrate;

// Set up AL info for use in global log() function to help distinguish AL
// output in the log files
alName = accountName + " / " + CSD.name;
task.setParam("alName", alName);
task.setName(alName);

log("Performing operation: " + operation + " on "
	+ CSD.name + " from account: " + accountName);

migrate = "migrate".equalsIgnoreCase(operation);]]></parameter>
                </Script>
                <Script name="Process">
                    <ModTime>1597251694236</ModTime>
                    <parameter name="script"><![CDATA[// Set up connection to ePolicy db
db = new ePolicyObj();

if (debug) {
    log("\n\n\n\n\n	****** NOTE: Debug is TRUE ******   \n\n\n\n\n\n*");
    system.sleep(2);
}

// Use the Passive OpenPages Connector if available to enable debugging
if (typeof ctr != "undefined") {
    op = new OpenPagesObj(ctr);
} else {
    op = new OpenPagesObj();
}

CSD.epolicy_account_name = accountName;
log("Found CSD: " + CSD.toJSON());

// Get the status, for use later when migrating Technical Specifications
csd_status = CSD.getString("STATUS");

// Set attributes used for later mapping
CSD.CSD_NAME = CSD.NAME;

// Find policy Version and Sub- Version

csdDocumentList = db.query("csd_document", CSD);

for (csdDoc in csdDocumentList) {
    bytesarr = csdDoc.getObject("FORM");


    fis = new java.io.ByteArrayInputStream(bytesarr);
    document = new org.apache.poi.xwpf.usermodel.XWPFDocument(org.apache.poi.openxml4j.opc.OPCPackage.open(fis)); // ***********************
    paragraphs = document.getParagraphs();
    versionSubversion = "";
    for (para in paragraphs) {
        if (para.getText().contains("Version")) {
            log(" find version test " + para.getText());
            versionSubversion = para.getText();
            break;
        }
    }
    fis.close();
    log(" version and subversion  " + versionSubversion);
    parts = system.splitString(versionSubversion, " ");
    versionSubversion = parts[parts.length - 1];
    CSD.docVersion = versionSubversion.trim().split(".")[0];
    if (versionSubversion.indexOf(".") > 0) {
        CSD.docSubVersion = versionSubversion.trim().split(".")[1];
    } else {
        CSD.docSubVersion = "0";
    }
    CSD.version = CSD.docVersion + "." + CSD.docSubVersion;
}


// Find controls attached to this ePolicy CSD

log("Reading controls...");
ctlList = db.query("controls", CSD);

// log("WARN", "\n\n\n-------------------- NOT MIGRATING CONTROL CLAUSES ------------\n\n\n--");
// ctlList = (new java.util.ArrayList()).toArray();

for (ctl in ctlList) {
    log("Found control: " + ctl.toJSON());

    // Use controls found to set values later used to create the Policy
    ctlName = (ctl.getString("name") || "").toLowerCase();
    if (ctlName.contains("regulatory control")) {
        CSD._regulatoryControls = ctl.getString("VARIABLE")
    } else
    if (ctlName.contains("additional control")) {
        CSD._additionalControls = ctl.getString("VARIABLE")
    }
}


// Map CSD to OpenPages Policy

policyMap = new Mapper("POC_MVP/map_csd_to_policy.map");
csdEntry = policyMap.map([CSD, opAccount]);

// Remove Policy name so Openpage generate it
csdEntry.removeAttribute("Name");

// Create the OpenPages Policy

log("About to write OP Policy:\n" + csdEntry.toJSON());
newPolicy = op.add(csdEntry, {
    objectType: "Policy",
    parentType: "SOXAccount",
    parentID: opAccountID,
    debug: debug || !doMigration
});

newPolicyId = newPolicy.getString("Resource Id");

if (debug) {
    debugJSON = '{' +
        '\n	"Description": "Migrated from ePolicy: Customer Security Document_V2.1.4",' +
        '\n	"GTS-Policy:DPE": "anpde186@in.ibm.com",' +
        '\n	"Name": "POL-293-Acc-44-AG",' +
        '\n	"OPSS-Pol:Next Review Date": "",' +
        '\n	"OPSS-Pol:Version": "v1.",' +
        '\n	"OPSS-Pol:Common Name": "POL-293-Acc-44-AG",' +
        '\n	"OPSS-Pol:Type": "CSD",' +
        '\n	"GTS-Policy:Additional Ctl": "OPT_PCIDSS",' +
        '\n	"OPSS-Pol:Status": "DPE Approval",' +
        '\n	"GTS-Policy:Regulatory Ctl": "GDPR"' +
        '}'
    newPolicy = com.ibm.di.entry.Entry.fromJSON(debugJSON);
    newPolicyId = useId;
    log("\n\n\n*********** DEBUG CODE SETTING newPolicyId to " + newPolicyId + " *********\n\n\n*");
}
log("****** policy id : " + newPolicyId + "	name: " + newPolicy.name);

// var updatedObj = {};
// updatedObj.Name = newPolicy.Name + "-v" + CSD.version,
// updatedObj["Resource ID"] = newPolicy["Resource ID"];
// var updatedPolicy = newPolicy.fromJSON(toJson(updatedObj));

// Now update the Policy name and add the version & sub-version
// linkcrit = {};
// linkcrit.name = "Resource ID";
// linkcrit.value = updatedPolicy.getString("Resource ID");
// log("--- Renaming Policy to " + updatedPolicy.Name);
// newPolicy = op.update(updatedPolicy, {
//	 //id: newPolicyId,
// 	objectType: "Policy",
// 	parentType: "SOXAccount",
// 	parentID: opAccountID,
// 	debug: debug || !doMigration,
// 	linkcriteria: linkcrit
// });
// 
// log("=== Policy renamed to: " + newPolicy.name);

// Add to the creation metric info
policyChildren = saveCreationDetails("Policy", newPolicy);

// Add some attribute names for later maps and templates

newPolicy.Policy_Name = newPolicy.Name;

// Now to find CSD Document for this CSD

//csdDocumentList = db.query("csd_document" , CSD); // This query performed earlier

for (csdDoc in csdDocumentList) {
    // Add the doc as child of the policy
    log("Adding CSD document as attachment to new OpenPages Policy...")

    map = new Mapper("POC_MVP/map_csddoc.map");
    csdDocEntry = map.map([csdDoc, opAccount, newPolicy, CSD]);

    opCSDDoc = op.add(csdDocEntry, {
        objectType: "SOXDocument",
        parentType: "Policy",
        parentId: newPolicyId,
        debug: debug || !doMigration // ***********************
        //							debug: false // ***********************************************************
    }); // ***********************
    log("Create CSD doc in OpenPages: " + opCSDDoc.toJSON());

    // Add to the creation metric info
    saveCreationDetails("SOXDocument", opCSDDoc, policyChildren);


    //			// Update new policy name with version
    //			newPolicy.name = newPolicy.name + "v" + CSD.version;
    //			op.modify(newPolicy, {
    //				debug: debug || !doMigration,
    //				objectType: "Policy",
    //				ID: newPolicy["Resource ID"][0]});
}

// Read Clause controls from epolicy
// Putting RR clausectl entries in the rrMap
ccListRR = db.query("control_clause_rr", CSD);
rrMap = new java.util.HashMap();
for (cl in ccListRR) {
    rrMap.put(cl.getString("REF"), cl);
}

// And putting RV clausectl entries in the rvMap
ccListRV = db.query("control_clause_rv", CSD);
rvMap = new java.util.HashMap();
for (cl in ccListRV) {
    rvMap.put(cl.getString("REF"), cl);
}

// Now build the Array of all refs read
refList = java.util.ArrayList();
for (cl in ccListRR) {
    ref = cl.getString("REF");
    if (!refList.contains(ref)) {
        refList.add(ref);
    }
}
for (cl in ccListRV) {
    ref = cl.getString("REF");
    if (!refList.contains(ref)) {
        refList.add(ref);
    }
}
refArray = refList.toArray();

// A little testing here:
for (ref in refList) {
    rvEntry = rvMap.get(ref);
    rrEntry = rrMap.get(ref);
    if (rvEntry != null && rrEntry != null) {
        if (rvEntry.toJSON() != rrEntry.toJSON()) {
            log("Found a difference between:\n" + rrEntry + "\nand\n" + rvEntry);
        }
    }
}

// Load mapping files for Procedure and ClauseControls
procedureMap = new Mapper("POC_MVP/map_procedure.map");
ccMap = new Mapper("POC_MVP/map_controlclause.map");

// Begine migrating both Clauses (Procedures) and ClauseControls
procedureCreated = {};
controlClauseIndex = {};
procedureCnt = 99;
emptyEntry = system.newEntry();

// For each ref found in ePolicy Clause Controls...
for (ref in refArray) {
    // Find the ClauseControl entry (with templateClause etc)
    opcc = cc.findClauseControl(ref);
    if (opcc != null) {
        // If found, then migrate this Clause Control
        templateClause = opcc.getObject("templateClause");
        description = templateClause.getString("description") || "*no_template_clause_description_found*";

        // Parse out the clause number from the description, or use the procedureCnt
        // and then remove it from the description, which is lowercased
        procedureIndex = -1;
        p = description.indexOf(" ");
        if (p > 0 && p < 4) {
            indexStr = description.substring(0, p).trim();
            if (system.isValidInt(indexStr)) {
                procedureIndex = system.toInt(indexStr);
                description = description.substring(p + 1).trim().toLowerCase();
            }
        }
        if (procedureIndex == -1) {
            if (description.substring(1, 2) == ".") {
                procedureIndex = description.substring(0, 1);
                description = description.substring(2).trim().toLowerCase();
            } else {
                procedureIndex = ++procedureCnt;
                description = description.trim().toLowerCase();
            }
        }


        if (!procedureCreated[description]) {
            // Map to create new Procedure
            procEntry = procedureMap.map([templateClause, newPolicy, opAccount]);

            // Add Procedure to OpenPages
            procEntry["GTS-Clause:Display Order"] = getDisplayOrder(description);
            log("Adding procedure: " + procEntry.name + " - " + procEntry.description);
            procedureCreated[description] = op.add(procEntry, {
                objectType: "Procedure",
                parentType: "Policy",
                parentId: newPolicyId,
                debug: debug || !doMigration // ******************************************************
            });

            // Add to the creation metric info
            procedureChildren = saveCreationDetails("Procedure", procedureCreated[description], policyChildren);
            procedureCreated[description]._children = procedureChildren;

            controlClauseIndex[description] = 0;
        }

        newProcedure = procedureCreated[description];
        procedureChildren = newProcedure.getObject("_children");

        procName = newProcedure.getString("name");
        if (procName.endsWith(".txt")) {
            procName = procName.substring(0, procName.length - 4);
        }
        newProcedure.procedure_name = procName;

        // Get the RR and RV entries if they exist for this ref
        rrEntry = rrMap.get(ref) || emptyEntry;
        rvEntry = rvMap.get(ref) || emptyEntry;

        var column3 = mapColumn(rrEntry.getString("IBM"), templateClause.getString("GTS-ClauseCtl:Col3"));
        var column4 = mapColumn(rrEntry.getString("CUST_XYZ"), rvEntry.getString("CUST_XYZ"), templateClause.getString("GTS-ClauseCtl:Col4"));
        var tableType = rrEntry == null ? "RV" : "RR";

        // Map to create clause control
        var ccIndex = ++controlClauseIndex[description];
        var cclause = rrEntry.getString("REF") != null ? rrEntry : rvEntry;
        ccEntry = ccMap.map([cclause, newProcedure, templateClause, CSD, newPolicy, opAccount]);

        //log("Migrating Clause Control: " + cclause.getString("Ref") + " - " + description);
        log("Migrating Clause Control: " + cclause.toJSON());

        // Add clause control to OpenPages

        log("Writing Clause Control: " + ccEntry.toJSON() + "\nUnder procedure: " + newProcedure.getString("Resource ID"));
        newCC = op.add(ccEntry, {
            objectType: "GTSClauseCtl",
            parentType: "Procedure",
            parentId: newProcedure.getString("Resource ID"),
            debug: debug || !doMigration // ****************************************
        });

        // Add to the creation metric info
        saveCreationDetails("GTSClauseCtl", newCC, procedureChildren);
    }
}

// Now add any Procedures for mandatory Clauses not already written
for (clauseIndex in cc.mandatoryClauses) {
    mandatoryClause = cc.mandatoryClauses[clauseIndex];

    if (!procedureCreated[mandatoryClause.toLowerCase()]) {
        templateClause = cc.getTemplateClause(mandatoryClause);
        description = templateClause.getString("description") || "*no_template_clause_description_found*";

        // Parse out the clause number from the description, or use the procedureCnt
        // and then remove it from the description, which is lowercased
        procedureIndex = -1;
        p = description.indexOf(" ");
        if (p > 0 && p < 4) {
            indexStr = description.substring(0, p).trim();
            if (system.isValidInt(indexStr)) {
                procedureIndex = system.toInt(indexStr);
                description = description.substring(p + 1).trim().toLowerCase();
            }
        }
        if (procedureIndex == -1) {
            if (description.substring(1, 2) == ".") {
                procedureIndex = description.substring(0, 1);
                description = description.substring(2).trim().toLowerCase();
            } else {
                procedureIndex = ++procedureCnt;
                description = description.trim().toLowerCase();
            }
        }

        // Map to create new Procedure
        procEntry = procedureMap.map([templateClause, newPolicy, opAccount]);

        // Add Procedure to OpenPages
        procEntry["GTS-Clause:Display Order"] = getDisplayOrder(description);
        log("Adding Procedure/Clause: " + procEntry.name + " - " + procEntry.description);
        procedureCreated[description] = op.add(procEntry, {
            objectType: "Procedure",
            parentType: "Policy",
            parentId: newPolicyId,
            debug: debug || !doMigration // *********************************************
        });

        // Add to the creation metric info
        saveCreationDetails("Procedure", procedureCreated[description], policyChildren);
    }
}

// Now to find Evidences for this CSD

EVList = db.query("evidence", CSD);

for (evidence in EVList) {
    log("Found evidence: " + evidence.toJSON());

    // Set up attributes for later mapping

    evidence.Evidence_filename = evidence.NAME;

    // Prepare to add evidence documents by mapping the details

    map = new Mapper("POC_MVP/map_evidence.map");
    evidenceDetails = map.map([evidence, newPolicy, opAccount, CSD]);

    log("Preparing to log evidence attachments for: " + evidenceDetails.toJSON());

    // Find attachment for evidence

    EVAttachList = db.query("evidence_attachment", evidence);

    //break; log("\n\n\n****** debug short-circuit at line 140 ****\n\n\n");

    for (EVAttachDoc in EVAttachList) {
        // Add the doc as child of the policy
        log("Attaching evidence doc to OpenPages Policy");

        map = new Mapper("POC_MVP/map_evidencedoc.map");
        evDoc = map.map([EVAttachDoc, evidenceDetails, newPolicy, opAccount, CSD]);

        opEVDoc = op.add(evDoc, {
            objectType: "SOXDocument",
            parentType: "Policy",
            primaryParentId: newPolicyId,
            debug: debug || !doMigration
        });
        log("Created evidence attachment: " + opEVDoc.toJSON());

        // Add to the creation metric info
        saveCreationDetails("SOXDocument", opEVDoc, policyChildren);
    }
}


// Now to find validation logs for this CSD
vLogmap = new Mapper("POC_MVP/map_validationlog.map");
vLogDocmap = new Mapper("POC_MVP/map_validationlogdoc.map");

VLList = db.query("validation_log", CSD);

// Set up the Template Policy name for mapping below
cc.templatePolicy.template_name = cc.templatePolicy.name;

excel = null;
vLog = null;
for (vLog in VLList) {
    log("Migrating Validation Log: " + vLog.toJSON());

    // Map VLog Entry for Excel spread sheet
    vlEntry = vLogmap.map([vLog, cc.templatePolicy, CSD, opAccount, newPolicy]);

    // generate Excel sheet
    if (excel == null) {
        excel = new ExcelSheet({
            sheetFileName: vlEntry.getString("File name"),
            sheetname: "Validation Log",
            columnsFileName: "POC_MVP/fields_validationlog.txt"
        });
    }
    excel.addRow(vlEntry);
}

if (vLog != null) {
    // Map VLog attachement
    vlDoc = vLogDocmap.map([vLog, newPolicy, opAccount, CSD, newPolicy]);

    // Now set the content and name of the attachment
    vlDoc.content = excel.getBytes();
    vlDoc.name = vlEntry["File name"];
    vlDoc.extension = "xlsx";

    // Create Policy attachment
    opVLDoc = op.add(vlDoc, {
        objectType: "SOXDocument",
        parentType: "Policy",
        primaryParentId: newPolicyId,
        debug: debug || !doMigration
    });
    log("Created validation log file : " + opVLDoc.toJSON());

    // Add to the creation metric info
    saveCreationDetails("SOXDocument", opVLDoc, policyChildren);
}

// Now to find evidence logs for this CSD
eLogmap = new Mapper("POC_MVP/map_evidencelog.map");
eLogDocmap = new Mapper("POC_MVP/map_evidencelogdoc.map");

ELList = db.query("evidence_log", CSD);
ELListXDOC = db.query("evidence_log_xdoc", CSD);

// Set up the Template Policy name for mapping below
cc.templatePolicy.template_name = cc.templatePolicy.name;

excel = null;
eLog = null;
for (eLog in ELList) {
    log("Migrating Evidence Log: " + eLog.toJSON());

	// Match up with the evidence xdocument query results
    matchingEntry = null;
    for (elogXDOC in ELListXDOC) {
    	if (elogXDOC.getString("id") == ELog.getString("id")
    		&& elogXDOC.getString("revision") == ELog.getString("revision")
    		&& elogXDOC.getString("revision_count") == ELog.getString("revision_count")) {
    			matchingEntry = elogXDOC;
    			break;
    		}
    }
    if (matchingEntry != null) {
    	for (attName in matchingEntry) {
    		if (elog[attName] == null) {
    			elog[attName] = matchingEntry[attName];
    		}
    	}
    }

    // Map ELog Entry for Excel spread sheet
    elEntry = eLogmap.map([eLog, cc.templatePolicy, CSD, opAccount, newPolicy]);

    // generate Excel sheet
    if (excel == null) {
        excel = new ExcelSheet({
            sheetFileName: elEntry.getString("File name"),
            sheetname: "Evidence Log",
            columnsFileName: "POC_MVP/fields_evidencelog.txt"
        });
    }
    excel.addRow(elEntry);
}

if (eLog != null) {
    // Map ELog attachement
    elDoc = eLogDocmap.map([eLog, newPolicy, opAccount, CSD, newPolicy]);

    // Now set the content and name of the attachment
    elDoc.content = excel.getBytes();
    elDoc.name = elEntry["File name"];
    elDoc.extension = "xlsx";

    // Create Policy attachment
    opELDoc = op.add(elDoc, {
        objectType: "SOXDocument",
        parentType: "Policy",
        primaryParentId: newPolicyId,
        debug: debug || !doMigration
    });
    log("Created evidence log file : " + opELDoc.toJSON());

    // Add to the creation metric info
    saveCreationDetails("SOXDocument", opELDoc, policyChildren);
}


// Now to find History logs for this CSD
hLogmap = new Mapper("POC_MVP/map_historylog.map");
hLogDocmap = new Mapper("POC_MVP/map_historylogdoc.map");

HLList = db.query("history_log", CSD);

excel = null;
hLog = null;
for (hLog in HLList) {
    log("Migrating History Log: " + hLog.toJSON());

    // Map hLog Entry for Excel spread sheet
    hlEntry = hLogmap.map([hLog, cc.templatePolicy, CSD, opAccount, newPolicy]);

    // generate Excel sheet
    if (excel == null) {
        excel = new ExcelSheet({
            sheetFileName: hlEntry.getString("File name"),
            sheetname: "History Log",
            columnsFileName: "POC_MVP/fields_historylog.txt"
        });
    }
    excel.addRow(hlEntry);
}

if (hLog != null) {
    // Map VLog attachement
    hlDoc = hLogDocmap.map([hLog, newPolicy, opAccount, CSD, newPolicy]);

    // Now set the content and name of the attachment
    hlDoc.content = excel.getBytes();
    hlDoc.name = hlEntry["File name"];
    hlDoc.extension = "xlsx";

    // write to openpages
    opHLDoc = op.add(hlDoc, {
        objectType: "SOXDocument",
        parentType: "Policy",
        primaryParentId: newPolicyId,
        debug: debug || !doMigration
    });
    log("Created History log file : " + opHLDoc.toJSON());

    // Add to the creation metric info
    saveCreationDetails("SOXDocument", opHLDoc, policyChildren);
}

// Now get Technical Specifications

tsLista = new java.util.ArrayList();
tsListb = new java.util.ArrayList();
tsListc = new java.util.ArrayList();

tsList = new java.util.ArrayList();
tsFound = db.query("technicalspecifications", CSD);

for (ts in tsFound) {
    status = ts.getString("STATUS");
    if (!("Customer_Approved".equalsIgnoreCase(status) ||
            "Production".equalsIgnoreCase(status) ||
            "Obsolete".equalsIgnoreCase(status))) {
        tsLista.add(ts);
    } else
    if ("Customer_Approved".equalsIgnoreCase(status) ||
        "Production".equalsIgnoreCase(status)) {
        tsListb.add(ts);
    } else
    if ("Obsolete".equalsIgnoreCase(status)) {
        tsListc.add(ts);
    }
}

// For TechSpecs based on filter a , use latest
version = -1;
found = -1;

for (i = 0; i < tsLista.size(); i++) {
    ts = tsLista.get(i);
    if (ts.getObject("REVISION") > version) {
        found = i;
        version = ts.getObject("REVISION");
    }
}
if (found >= 0) {
    tsList.add(tsLista.get(found));
}

// For Techspecs based on filter b , return all which Customer_Approved or Production

for (ts in tsListb) {
    status = ts.getString("STATUS");
    if ("Customer_Approved".equalsIgnoreCase(status) ||
        "Production".equalsIgnoreCase(status)) {
        tsList.add(ts);
    }
}

// For Techspecs based on filter c , return the most recent Technical Specification revision that does not exceed the update timestamp of the ePolicy policy record
found = -1;
version = -1;
policyts = CSD.getString("UPDATED_TS");

for (i = 0; i < tsListc.size(); i++) {
    ts = tsListc.get(i);
    if (ts.getObject("REVISION") &&
        ts.getString("UPDATED_TS") <= policyts) {
        version = ts.getObject("REVISION");
        found = i;
    }
}
if (found > 0) {
    tsList.add(tsListc.get(found));
}

// Now we see if we have found any techspec that meet our filter

techSpecMap = new Mapper("POC_MVP/map_csd_to_techspec.map");
techSpecDocMap = new Mapper("POC_MVP/map_techspec_doc.map");

tsIndex = 0;
for (techspec in tsList) {
    tsIndex++;
    techSpecEntry = techSpecMap.map([techspec, opAccount, newPolicy]);

    log("About to write Techspec :\n" + techSpecEntry.toJSON());
    newTechSpec = op.add(techSpecEntry, {
        objectType: "GTSTechSpec",
        parentType: "Policy",
        parentID: newPolicyId,
        debug: debug || !doMigration
    });

    log("Created GTSTechSpec in OpenPages: " + newTechSpec.toJSON());

    // Add to the creation metric info
    tsChildren = saveCreationDetails("GTSTechSpec", newTechSpec, policyChildren);

    newTechSpecId = newTechSpec.getString("Resource Id");
    newTechSpec.ts_Name = newTechSpec.name;
    log("----> new GTSTechSpec ID: " + newTechSpecId);

    techSpecDocList = db.query("techspec_document", techspec);
    var tsdIndex = 0;
    for (techSpecDoc in techSpecDocList) {
        log("Adding TechSpec as attachment to new OpenPages Policy...");

        log("techSpecDoc in OpenPages: " + techSpecDoc.toJSON());
        tsdIndex++;
        techSpecDocEntry = techSpecDocMap.map([techSpecDoc, opAccount, newTechSpec, techspec, newPolicy]);
        techSpecDocEntry.extension = "xls";

        var showTSD = system.newEntry();
        showTSD.merge(techSpecDocEntry);
        showTSD.content = "*content in base 64 encoding*";
        log("About to write Techspec doc: " + showTSD.toJSON());
        optechSpecDoc = op.add(techSpecDocEntry, {
            objectType: "SOXDocument",
            //parentType: "Policy",
            //parentId: newPolicyId,
            parentType: "GTSTechSpec",
            parentId: newTechSpecId,
            debug: debug || !doMigration // ***********************
            //							debug: false // ***********************************************************
        }); // ***********************
        log("Created  techspec doc in OpenPages: " + optechSpecDoc.toJSON());
        log("--------> new TechSpecDoc (SOXDocument) ID: " + optechSpecDoc["Resource ID"]);

        // Add to the creation metric info
        tsChildren = saveCreationDetails("SOXDocument", optechSpecDoc, tsChildren);
    }
}]]></parameter>
                </Script>
                <Connector name="OpenPages Connector">
                    <InheritFrom>/Connectors/OpenPages Connector</InheritFrom>
                    <ModTime>1597058187695</ModTime>
                    <ConnectorMode>Iterator</ConnectorMode>
                    <ConnectorState>Enabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <DeltaSettings>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                        <Hook name="after_initialize">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>after_initialize</Name>
                            <Script>ctr = thisConnector.connector;</Script>
                            <Enabled>true</Enabled>
                        </Hook>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
                <Script name="End of processing">
                    <ModTime>1596724869508</ModTime>
                    <parameter name="script"><![CDATA[log("\n\n-----");
log("Migration complete!")

timer.stop("migration process (whole)")]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
        <AssemblyLine name="Migrate_ePolicy_Thread">
            <ModTime>1597865308682</ModTime>
            <Settings>
                <parameter name="ALPoolSettingsDialog">showALPoolSettings</parameter>
                <parameter name="automapattributes">false</parameter>
                <parameter name="createTombstones">false</parameter>
                <parameter name="includeGlobalPrologs">true</parameter>
                <parameter name="includePrologs"><![CDATA[ClauseControlObj
ExcelSheet
Mapper
OpenPagesObj
RequestObj
SCP
Script_Lib
Timer
WordDoc
ePolicyObj]]></parameter>
                <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
            </Settings>
            <Hooks>
                <ModTime>1597863914792</ModTime>
                <Hook name="epilog2">
                    <InheritFrom>[no inheritance]</InheritFrom>
                    <Name>epilog2</Name>
                    <Script><![CDATA[// Log all creations
function showJson(obj, lvl) {
	lvl = lvl || 0;
	var pad = "                                  ".substring(0, lvl*4);
	if (typeof obj != "object" || obj == null) {
		log(pad + obj);
	} else {
		for (var propName in obj) {
			var subobj = obj[propName];
			if (subobj instanceof Array) {
				log(pad + "  " + propName + ": [");
				for (var i = 0; i < subobj.length; i++) {
					showJson(subobj[i], lvl+1);
				}
				log(pad + "]");
			} else
			if (typeof subobj == "object") {
				log(pad + "  " + propName + ": {");
				showJson(subobj, lvl+1);
				log(pad + "  }")
			} else {
				log(pad + "  " + propName + ": " + subobj);
			}
		}
	}
}

// Log objects created
log("");
log("Total objects created: ");
showJson(_counters);

// Show timing metrics
timingEntry = com.ibm.di.entry.Entry.fromJSON(toJson(timer.timers()));
timingMap = new java.util.HashMap();
for (att in timingEntry) {
	name = att.getName();
	count = att.getValue(0);
	timingMap.put(count, name);
}
timings = timingMap.keySet().toArray();
java.util.Arrays.sort(timings);

log("");
log("--------- Timings ----------");
for (i = 0; i < timings.length; i++) {
	timing = timings[i];
	seconds = Math.round(timing/1000);
	minutes = Math.floor(seconds / 60);
	secondsAfter = seconds % 60;
	log("    " + LJ(timingMap.get(timing), 35, i) 
				+ RJ(minutes, 11, i) + " min"
				+ RJ(secondsAfter, 3) + " sec");
}

work._metrics = {
	account: account,
	timer: timer,
	counters: _counters,
	errors: _errors,
	warnings: _warnings
}]]></Script>
                    <Enabled>true</Enabled>
                </Hook>
                <Hook name="prolog0">
                    <InheritFrom>[no inheritance]</InheritFrom>
                    <Name>prolog0</Name>
                    <Script><![CDATA[//vrs = "20200617 2112"; // Reading controls BEFORE mapping/adding Policy to OP
//vrs = "20200618 1909"; // Fixed problems we found prior-to cadence
//vrs = "20200703 1250"; // Now migrating Clauses (Procedures) and Control Clauses
//vrs = "20200705 18:30"; // Everything done except Technical Specifications
//vrs = "20200712 2140"; // Creating Excel sheets with multiple validation and history log entries
//vrs = "20200731 2335"; // Renaming Policy with version.sub-version appended to the name
//vrs = "20200802 1544"; // Corrected renaming functionality
//vrs = "20200804 1623"; // Fixed vlEntry - change to hlEntry for History Log migration
//vrs = "20200805 2243"; // Added timings and fixed TecSpec doc writing to make Name unique
//vrs = "20200806 1612"; // Fixed Policy name update with version and sub-version
//vrs = "20200810 1127"; // Removed renaming of Policy with vers/sub-vers
vrs = "20200819 1350"; // Making this a threaded AL

// Defining some local functions for this AL
// Initialize 'created' object
_counters = {};
_errors = [];
_warnings = [];

alName = task.getShortName();
task.setParam("alName", alName);

log("Migrate_ePolicy_Thread v" + vrs);

function saveCreationDetails(account, type, entry, addToArray) {
	addToArray = addToArray || [];
	
	// Add to array of created objects and count
	var savedObj = {
		type: type,
		name: entry.getString("Name"),
		id: entry.getString("Resource ID"),
		children: []
	};
	
	addToArray.push(savedObj);
	_counters[type] = (_counters[type] || 0) + 1;
	return savedObj.children;
}

function mapColumn(value1, value2, value3) {
	var useValue = value1 || value2 || value3 || "NA";
	switch (useValue) {
		case "N/A": return "NA";
		case "P":
		case "A": return useValue;
		default: return "NA";
	}
}

function mapFunction(value){
	switch (value){
		case "I": return "Insert";
		case "U": return "Update";	
		case "D": return "Delete";
		 default: return "NA";		
		
	}
	
}
// Display Order for Clauses (Procedures)
displayOrder = {};
displayOrder["introduction"] = 1;
displayOrder["scope"] = 2;
displayOrder["processes used in this document"] = 3;
displayOrder["document structure"] = 4;
displayOrder["information security policies (clause 5)"] = 5;
displayOrder["organization of information security (clause 6)"] = 6;
displayOrder["human Resource Security (clause 7)"] = 7;
displayOrder["asset management (clause 8)" ] = 8;
displayOrder["access control (clause 9)"] = 9;
displayOrder["cryptography (clause 10)"] = 10;
displayOrder["physical and environmental security (clause 11)"] = 11;
displayOrder["operations security (clause 12)"] = 12;
displayOrder["communications security (clause 13)"] = 13;
displayOrder["systems acquisition, development and maintenance (clause 14)"] = 14;
displayOrder["supplier relationships (clause 15)"] = 15;
displayOrder["Summary of objectives for Clause 15"] = 15;
displayOrder["management of information security incidents and improvements (clause 16)"] = 16;
displayOrder["information security aspects of business continuity management (clause 17)"] = 17;
displayOrder["compliance (clause 18)"] = 18;
displayOrder["appendices"] = 19;
displayOrder["technical specifications"] = 20;
displayOrder["csd document control"] = 21;
displayOrder["csd approved deviations"] = 22;
displayOrder["pci-dss responsibility matrix and other pci information"] = 23;
displayOrder["glossary"] = 24;

orderIndex = 100;
function getDisplayOrder(description) {
	for (var desc in displayOrder) {
		if (desc.toLowerCase().startsWith(description.toLowerCase())) {
			return displayOrder[desc];
		}
	}
	return orderIndex++;
}

timer = new Timer();
timer.start("initialization");
//java.lang.System.getProperties().put("_timer", timer);]]></Script>
                    <Enabled>true</Enabled>
                </Hook>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="Get details from iwe" state="Enabled"/>
                    <Component name="define addEvidenceAndLogs function" state="Enabled"/>
                    <Component name="Process" state="Enabled"/>
                    <Component name="OpenPages Connector" state="Enabled"/>
                    <Component name="End of processing" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer"/>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1597865308682</ModTime>
                <Script name="Get details from iwe">
                    <ModTime>1597865074507</ModTime>
                    <parameter name="script"><![CDATA[// Get passed setting from the Initial Work Entry
if (typeof work != "undefined" 
	&& work != null
	&& work._account != null) {
	account = work._account.getValue(0);
	cc = work._cc.getValue(0);
	CSD = work._CSD.getValue(0);
	opAccount = work._opAccount.getValue(0);
	ePolicyAccount = work._ePolicyAccount.getValue(0);
	accountNameWithCode = work._accountNameWithCode.getValue(0);
	operation = work._operation.getValue(0);
	debug = work._debug.getValue(0);
	useId = work._useId.getValue(0);
	opAccountID = opAccount.getString("Resource ID");	
} else {
	account = {
		name: "Copacabana",
		migrate: true
	}
	cc = {};
	opAccount = system.newEntry();
	opAccountID = 4242;
	ePolicyAccount = system.newEntry();
	accountName = account.name; // debug data
	CSD = com.ibm.di.entry.Entry.fromJSON('{"name": "CSD_1"}');
	operation = "validate";
	useId = "42";
	debug = true;
}

alName = task.getParam("alName");
timer.start(alName);

migrate = operation.toLowerCase() == "migrate";
accountName = account.name;
doMigration = migrate && account.migrate;

// Skip any Accounts not set for migration if this is the /migrate operation
if (migrate && !account.migrate) {
	system.exitFlow();
}

log("Performing operation: " + operation + " on "
	+ CSD.name + " from account: " + accountName);

migrate = "migrate".equalsIgnoreCase(operation);]]></parameter>
                </Script>
                <Script name="define addEvidenceAndLogs function">
                    <InheritFrom>/Scripts/evidenceAndLogs</InheritFrom>
                    <ModTime>1597672915225</ModTime>
                </Script>
                <Script name="Process">
                    <ModTime>1597865308682</ModTime>
                    <parameter name="script"><![CDATA[db = new ePolicyObj();

if (debug) {
	log("\n\n\n\n\n	****** NOTE: Debug is TRUE ******   \n\n,");
	system.sleep(2);
}

// Use the Passive OpenPages Connector if available to enable debugging
if (typeof ctr != "undefined") {
	op = new OpenPagesObj(ctr);
} else {
	op = new OpenPagesObj();
}

log("Handing account " + accountName + "   migrating: " + doMigration);

CSD.epolicy_account_name = ePolicyAccount.ePolicy_Account_Name;
CSD.csd_updated_ts = CSD.Updated_TS;
log("Found CSD: " + CSD.toJSON());

// Get the status, for use later when migrating Technical Specifications
csd_status = CSD.getString("STATUS");

// Set attributes used for later mapping
CSD.CSD_NAME = CSD.NAME;
CSD.ePolicy_Template_Name = CSD.TEMPLATE_POLICYTYPE_NAME;
CSD.ePolicy_Template_Version = CSD.TEMPLATE_VERSION;

// Find policy Version and Sub- Version

csdDocumentList = db.query("csd_document", CSD);

for (csdDoc in csdDocumentList) {
	bytesarr = csdDoc.getObject("FORM");


	fis = new java.io.ByteArrayInputStream(bytesarr);

	document = new org.apache.poi.xwpf.usermodel.XWPFDocument(org.apache.poi.openxml4j.opc.OPCPackage.open(fis));					// ***********************

	// Initial version numbers to unknown values
	versionSubversion = {
		template: {
			value: "?.?",
			match: "template version:"
		},
		policy: {
			value: "?.?",
			match: "document identification:"
		}
	}
	
	tables = document.getTables();
	
	for (table in tables) {
		paraStr = table.getText();

		if (paraStr.toLowerCase().contains(versionSubversion.policy.match)) {
			lines = system.splitString(paraStr, "\n");
			for (line in lines) {
				for (type in versionSubversion) {
					p = line.toLowerCase().indexOf(versionSubversion[type].match);
					if (p >= 0) {
						versionSubversion[type].value = line.substring(p + versionSubversion[type].match.length).trim();
					}	
				}	
			}
		}	
	}

	fis.close();

	for (type in versionSubversion) {
		log(" -> " + type + " version.subversion string found: " + versionSubversion[type].value);

		parts = system.splitString(versionSubversion[type].value, " ");
		verStr = parts[parts.length-1];
		
		p = verStr.indexOf(".");
		if (p > 0) {
			version = verStr.substring(0, p).trim();
			subversion = verStr.substring(p+1).trim();
		}
		
		if (!CSD[type + "_version"] || version != "?") {
			CSD[type + "_version"] = version + "." + subversion;
		}
	}
}


// Find controls attached to this ePolicy CSD

log("Reading controls...");
ctlList = db.query("controls", CSD);

// log("WARN", "\n\n\n-------------------- NOT MIGRATING CONTROL CLAUSES ------------\n\n\n--");
// ctlList = (new java.util.ArrayList()).toArray();

for (ctl in ctlList) {
	log("Found control: " + ctl.toJSON());

	// Use controls found to set values later used to create the Policy
	ctlName = (ctl.getString("name") || "").toLowerCase();
	if (ctlName.contains("regulatory control")) {
		CSD._regulatoryControls = ctl.getString("VARIABLE")
	} else
		if (ctlName.contains("additional control")) {
			CSD._additionalControls = ctl.getString("VARIABLE")
		}
}


// Map CSD to OpenPages Policy

policyMap = new Mapper("POC_MVP/map_csd_to_policy.map");
csdEntry = policyMap.map([CSD, opAccount]);

// Remove Policy name so Openpage generate it
csdEntry.removeAttribute("Name");

// Create the OpenPages Policy

log("About to write OP Policy:\n" + csdEntry.toJSON());
newPolicy = op.add(csdEntry, {
	objectType: "Policy",
	parentType: "SOXAccount",
	parentID: opAccountID,
	debug: debug || !doMigration
});

newPolicyId = newPolicy.getString("Resource Id");

if (debug) {
	debugJSON = '{'
		+ '\n	"Description": "Migrated from ePolicy: Customer Security Document_V2.1.4",'
		+ '\n	"GTS-Policy:DPE": "anpde186@in.ibm.com",'
		+ '\n	"Name": "POL-293-Acc-44-AG",'
		+ '\n	"OPSS-Pol:Next Review Date": "",'
		+ '\n	"OPSS-Pol:Version": "v1.",'
		+ '\n	"OPSS-Pol:Common Name": "POL-293-Acc-44-AG",'
		+ '\n	"OPSS-Pol:Type": "CSD",'
		+ '\n	"GTS-Policy:Additional Ctl": "OPT_PCIDSS",'
		+ '\n	"OPSS-Pol:Status": "DPE Approval",'
		+ '\n	"GTS-Policy:Regulatory Ctl": "GDPR"'
		+ '}'
	newPolicy = com.ibm.di.entry.Entry.fromJSON(debugJSON);
	newPolicyId = useId; log("\n\n\n*********** DEBUG CODE SETTING newPolicyId to " + newPolicyId + " *********\n\n\n*");
}

// var updatedObj = {};
// updatedObj.Name = newPolicy.Name + "-v" + CSD.version,
// updatedObj["Resource ID"] = newPolicy["Resource ID"];
// var updatedPolicy = newPolicy.fromJSON(toJson(updatedObj));

// Now update the Policy name and add the version & sub-version
// linkcrit = {};
// linkcrit.name = "Resource ID";
// linkcrit.value = updatedPolicy.getString("Resource ID");
// log("--- Renaming Policy to " + updatedPolicy.Name);
// newPolicy = op.update(updatedPolicy, {
//	 //id: newPolicyId,
// 	objectType: "Policy",
// 	parentType: "SOXAccount",
// 	parentID: opAccountID,
// 	debug: debug || !doMigration,
// 	linkcriteria: linkcrit
// });
// 
// log("=== Policy renamed to: " + newPolicy.name);

// Add to the creation metric info
if (doMigration) {
	log("***** Created Policy with id: " + newPolicyId + "	name: " + newPolicy.name);
	policyChildren = saveCreationDetails(accountNameWithCode, "Policy", newPolicy);
}

// Add some attribute names for later maps and templates

newPolicy.Policy_Name = newPolicy.Name;

// Now to find CSD Document for this CSD

//csdDocumentList = db.query("csd_document" , CSD); // This query performed earlier

for (csdDoc in csdDocumentList) {
	// Add the doc as child of the policy
	log("Adding CSD document as attachment to new OpenPages Policy...")

	map = new Mapper("POC_MVP/map_csddoc.map");
	csdDocEntry = map.map([csdDoc, ePolicyAccount, CSD, opAccount, newPolicy]);

	opCSDDoc = op.add(csdDocEntry,
		{
			objectType: "SOXDocument",
			parentType: "Policy",
			parentId: newPolicyId,
			debug: debug || !doMigration								// ***********************
			//							debug: false // ***********************************************************
		});												// ***********************

	// Add to the creation metric info
	if (doMigration) {
		log("Create CSD doc in OpenPages: " + opCSDDoc.toJSON());
		saveCreationDetails(accountNameWithCode, "SOXDocument", opCSDDoc, policyChildren);
	}	


	//			// Update new policy name with version
	//			newPolicy.name = newPolicy.name + "v" + CSD.version;
	//			op.modify(newPolicy, {
	//				debug: debug || !doMigration,
	//				objectType: "Policy",
	//				ID: newPolicy["Resource ID"][0]});
}

// Read Clause controls from epolicy
// Putting RR clausectl entries in the rrMap
ccListRR = db.query("control_clause_rr", CSD);
rrMap = new java.util.HashMap();
for (cl in ccListRR) {
	rrMap.put(cl.getString("REF"), cl);
}

// And putting RV clausectl entries in the rvMap
ccListRV = db.query("control_clause_rv", CSD);
rvMap = new java.util.HashMap();
for (cl in ccListRV) {
	rvMap.put(cl.getString("REF"), cl);
}

// Now build the Array of all refs read
refList = java.util.ArrayList();
for (cl in ccListRR) {
	ref = cl.getString("REF");
	if (!refList.contains(ref)) {
		refList.add(ref);
	}
}
for (cl in ccListRV) {
	ref = cl.getString("REF");
	if (!refList.contains(ref)) {
		refList.add(ref);
	}
}
refArray = refList.toArray();

// A little testing here:
for (ref in refList) {
	rvEntry = rvMap.get(ref);
	rrEntry = rrMap.get(ref);
	if (rvEntry != null && rrEntry != null) {
		if (rvEntry.toJSON() != rrEntry.toJSON()) {
			log("Found a difference between:\n" + rrEntry + "\nand\n" + rvEntry);
		}
	}
}

// Load mapping files for Procedure and ClauseControls
procedureMap = new Mapper("POC_MVP/map_procedure.map");
ccMap = new Mapper("POC_MVP/map_controlclause.map");

// Begine migrating both Clauses (Procedures) and ClauseControls
procedureCreated = {};
controlClauseIndex = {};
procedureCnt = 99;
emptyEntry = system.newEntry();

if (debug) {
	log("\n\n... NOT DOING CLAUSE CONTROLS ...\n\n.");
}
else {
	// For each ref found in ePolicy Clause Controls...
	for (ref in refArray) {
		// Find the ClauseControl entry (with templateClause etc)
		opcc = cc.findClauseControl(ref);
		if (opcc != null) {
			// If found, then migrate this Clause Control
			templateClause = opcc.getObject("templateClause");
			description = templateClause.getString("description") || "*no_template_clause_description_found*";

			// Parse out the clause number from the description, or use the procedureCnt
			// and then remove it from the description, which is lowercased
			procedureIndex = -1;
			p = description.indexOf(" ");
			if (p > 0 && p < 4) {
				indexStr = description.substring(0, p).trim();
				if (system.isValidInt(indexStr)) {
					procedureIndex = system.toInt(indexStr);
					description = description.substring(p + 1).trim().toLowerCase();
				}
			}
			if (procedureIndex == -1) {
				if (description.substring(1, 2) == ".") {
					procedureIndex = description.substring(0, 1);
					description = description.substring(2).trim().toLowerCase();
				} else {
					procedureIndex = ++procedureCnt;
					description = description.trim().toLowerCase();
				}
			}


			if (!procedureCreated[description]) {
				// Map to create new Procedure
				procEntry = procedureMap.map([templateClause, ePolicyAccount, newPolicy, opAccount]);

				// Add Procedure to OpenPages
				procEntry["GTS-Clause:Display Order"] = getDisplayOrder(description);
				//log("Adding procedure: " + procEntry.name + " - " + procEntry.description);
				newProc = procedureCreated[description] = op.add(procEntry, {
					objectType: "Procedure",
					parentType: "Policy",
					parentId: newPolicyId,
					debug: debug || !doMigration // ******************************************************
				});

				// Add to the creation metric info
				if (doMigration) {
					log("Created Procedure: " + procEntry.name + " - " + procEntry.description);
					procedureChildren = saveCreationDetails(accountNameWithCode, "Procedure", procedureCreated[description], policyChildren);
					procedureCreated[description]._children = procedureChildren;
				}
	
				controlClauseIndex[description] = 0;
			}

			newProcedure = procedureCreated[description];
			procedureChildren = newProcedure.getObject("_children");
			
			procName = newProcedure.getString("name");
			if (procName.endsWith(".txt")) {
				procName = procName.substring(0, procName.length - 4);
			}
			newProcedure.procedure_name = procName;

			// Get the RR and RV entries if they exist for this ref
			rrEntry = rrMap.get(ref) || emptyEntry;
			rvEntry = rvMap.get(ref) || emptyEntry;

			var column3 = mapColumn(rrEntry.getString("IBM"), templateClause.getString("GTS-ClauseCtl:Col3"));
			var column4 = mapColumn(rrEntry.getString("CUST_XYZ"), rvEntry.getString("CUST_XYZ"), templateClause.getString("GTS-ClauseCtl:Col4"));
			var tableType = rrEntry == null ? "RV" : "RR";

			// Map to create clause control
			var ccIndex = ++controlClauseIndex[description];
			var cclause = rrEntry.getString("REF") != null ? rrEntry : rvEntry;
			ccEntry = ccMap.map([cclause, newProcedure, ePolicyAccount, templateClause, CSD, newPolicy, opAccount]);

			//log("Migrating Clause Control: " + cclause.getString("Ref") + " - " + description);
			log("Migrating Clause Control: " + cclause.toJSON());

			// Add clause control to OpenPages

			//log("Writing Clause Control: " + ccEntry.toJSON() + "\nUnder procedure: " + newProcedure.getString("Resource ID"));
			newCC = op.add(ccEntry, {
				objectType: "GTSClauseCtl",
				parentType: "Procedure",
				parentId: newProcedure.getString("Resource ID"),
				debug: debug || !doMigration  // ****************************************
			});

			// Add to the creation metric info
			if (doMigration) {
				log("Created Clause Control: " + ccEntry.toJSON() + "\nUnder procedure: " + newProcedure.getString("Resource ID"));
				saveCreationDetails(accountNameWithCode, "GTSClauseCtl", newCC, procedureChildren);
			}
		}
	}

	// Now add any Procedures for mandatory Clauses not already written
	for (clauseIndex in cc.mandatoryClauses) {
		mandatoryClause = cc.mandatoryClauses[clauseIndex];

		if (!procedureCreated[mandatoryClause.toLowerCase()]) {
			templateClause = cc.getTemplateClause(mandatoryClause);
			description = templateClause.getString("description") || "*no_template_clause_description_found*";

			// Parse out the clause number from the description, or use the procedureCnt
			// and then remove it from the description, which is lowercased
			procedureIndex = -1;
			p = description.indexOf(" ");
			if (p > 0 && p < 4) {
				indexStr = description.substring(0, p).trim();
				if (system.isValidInt(indexStr)) {
					procedureIndex = system.toInt(indexStr);
					description = description.substring(p + 1).trim().toLowerCase();
				}
			}
			if (procedureIndex == -1) {
				if (description.substring(1, 2) == ".") {
					procedureIndex = description.substring(0, 1);
					description = description.substring(2).trim().toLowerCase();
				} else {
					procedureIndex = ++procedureCnt;
					description = description.trim().toLowerCase();
				}
			}

			// Map to create new Procedure
			procEntry = procedureMap.map([templateClause, ePolicyAccount, newPolicy, opAccount]);

			// Add Procedure to OpenPages
			procEntry["GTS-Clause:Display Order"] = getDisplayOrder(description);
			log("Adding Procedure/Clause: " + procEntry.name + " - " + procEntry.description);
			procedureCreated[description] = op.add(procEntry, {
				objectType: "Procedure",
				parentType: "Policy",
				parentId: newPolicyId,
				debug: debug || !doMigration  // *********************************************
			});

			// Add to the creation metric info
			if (doMigration) {
				saveCreationDetails(accountNameWithCode, "Procedure", procedureCreated[description], policyChildren);
			}
		}
	}
}

// Here we add Evidence and logs for the Policy
templatePolicy = (cc && cc.templatePolicy) ? cc.templatePolicy : system.newEntry();

addEvidenceAndLogs({
	parentEntry: newPolicy,
	parentType: "Policy",
	parentId: newPolicyId,
	entryForQuery: CSD,
	templatePolicy: templatePolicy,
	document_version: CSD.policy_version,
	debug: debug,
	doMigration: doMigration,
	namePrefix: "CSD"
});

// Now get Technical Specifications

tsLista = new java.util.ArrayList();
tsListb = new java.util.ArrayList();
tsListc = new java.util.ArrayList();

tsList = new java.util.ArrayList();
tsFound = db.query("technicalspecifications", CSD);

for (ts in tsFound) {
	status = ts.getString("STATUS");
	if (!("Customer_Approved".equalsIgnoreCase(status)
		|| "Production".equalsIgnoreCase(status)
		|| "Obsolete".equalsIgnoreCase(status))) {
		tsLista.add(ts);
	} else
		if ("Customer_Approved".equalsIgnoreCase(status)
			|| "Production".equalsIgnoreCase(status)) {
			tsListb.add(ts);
		} else
			if ("Obsolete".equalsIgnoreCase(status)) {
				tsListc.add(ts);
			}
}

// For TechSpecs based on filter a , use latest
version = -1;
found = -1;

for (i = 0; i < tsLista.size(); i++) {
	ts = tsLista.get(i);
	if (ts.getObject("REVISION") > version) {
		found = i;
		version = ts.getObject("REVISION");
	}
}
if (found >= 0) {
	tsList.add(tsLista.get(found));
}

// For Techspecs based on filter b , return all which Customer_Approved or Production

for (ts in tsListb) {
	status = ts.getString("STATUS");
	if ("Customer_Approved".equalsIgnoreCase(status)
		|| "Production".equalsIgnoreCase(status)) {
		tsList.add(ts);
	}
}

// For Techspecs based on filter c , return the most recent Technical Specification revision that does not exceed the update timestamp of the ePolicy policy record
found = -1;
version = -1;
policyts = CSD.getString("UPDATED_TS");

for (i = 0; i < tsListc.size(); i++) {
	ts = tsListc.get(i);
	if (ts.getObject("REVISION")
		&& ts.getString("UPDATED_TS") <= policyts) {
		version = ts.getObject("REVISION");
		found = i;
	}
}
if (found > 0) {
	tsList.add(tsListc.get(found));
}

// Now we see if we have found any techspec that meet our filter

techSpecMap = new Mapper("POC_MVP/map_csd_to_techspec.map");
techSpecDocMap = new Mapper("POC_MVP/map_techspec_doc.map");

tsIndex = 0;
for (techspec in tsList) {
	tsIndex++;
	techSpecEntry = techSpecMap.map([techspec, ePolicyAccount, opAccount, newPolicy]);
	
	//log("About to write Techspec :\n" + techSpecEntry.toJSON());
	newTechSpec = op.add(techSpecEntry, {
		objectType: "GTSTechSpec",
		parentType: "Policy",
		parentID: newPolicyId,
		debug: debug || !doMigration
	});
	
	// Add to the creation metric info
	if (doMigration) {
		log("Created GTSTechSpec in OpenPages: " + newTechSpec.toJSON());
		tsChildren = saveCreationDetails(accountNameWithCode, "GTSTechSpec", newTechSpec, policyChildren);
	}

	newTechSpecId = newTechSpec.getString("Resource Id");
	newTechSpec.ts_Name = newTechSpec.name;
	log("----> new GTSTechSpec ID: " + newTechSpecId);
	
	techSpecDocList = db.query("techspec_document", techspec);
	var tsdIndex = 0;
	for (techSpecDoc in techSpecDocList) {
		log("Adding TechSpec as attachment to new OpenPages Policy...");
		
		log("techSpecDoc in OpenPages: " + techSpecDoc.toJSON());
		tsdIndex++;
		techSpecDocEntry = techSpecDocMap.map([techSpecDoc, ePolicyAccount, opAccount, newTechSpec, techspec, newPolicy]);
		techSpecDocEntry.extension = "xls";
		
		var showTSD = system.newEntry();
		showTSD.merge(techSpecDocEntry);
		showTSD.content = "*content in base 64 encoding*";
		//log("About to write Techspec doc: " + showTSD.toJSON());
		optechSpecDoc = op.add(techSpecDocEntry,
			{
				objectType: "SOXDocument",
				//parentType: "Policy",
				//parentId: newPolicyId,
				parentType: "GTSTechSpec",
				parentId: newTechSpecId,
				debug: debug || !doMigration							  // ***********************
				//							debug: false // ***********************************************************
			});												// ***********************
		// Add to the creation metric info
		if (doMigration) {
			log("Created  techspec doc in OpenPages: " + optechSpecDoc.toJSON());
			tsChildren = saveCreationDetails(accountNameWithCode, "SOXDocument", optechSpecDoc, tsChildren);
		}
	}
	
	// Now add evidence and logs for this TechSpec
	addEvidenceAndLogs({
		parentEntry: newTechSpec,
		parentType: "GTSTechSpec",
		parentId: newTechSpecId,
		entryForQuery: techspec,
		templatePolicy: templatePolicy,
		document_version: String(techspec.getString("TEMPLATE_VERSION")).trim(),
		debug: debug,
		doMigration: doMigration,
		namePrefix: "Tech Spec"
	});
	
}]]></parameter>
                </Script>
                <Connector name="OpenPages Connector">
                    <InheritFrom>/Connectors/OpenPages Connector</InheritFrom>
                    <ModTime>1597747593149</ModTime>
                    <ConnectorMode>Iterator</ConnectorMode>
                    <ConnectorState>Enabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <DeltaSettings>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                        <Hook name="after_initialize">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>after_initialize</Name>
                            <Script>ctr = thisConnector.connector;</Script>
                            <Enabled>true</Enabled>
                        </Hook>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
                <Script name="End of processing">
                    <ModTime>1597863933406</ModTime>
                    <parameter name="script"><![CDATA[log("\n\n-----");
log("Migration complete!")

timer.stop(alName);]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
        <AssemblyLine name="Migrate_ePolicy_REST_OLD">
            <ModTime>1597245044104</ModTime>
            <Settings>
                <parameter name="ALPoolSettingsDialog">showALPoolSettings</parameter>
                <parameter name="automapattributes">false</parameter>
                <parameter name="createTombstones">false</parameter>
                <parameter name="includeGlobalPrologs">true</parameter>
                <parameter name="includePrologs"><![CDATA[ClauseControlObj
ExcelSheet
Mapper
OpenPagesObj
RequestObj
SCP
Script_Lib
Timer
WordDoc
ePolicyObj]]></parameter>
                <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
            </Settings>
            <Hooks>
                <ModTime>1597242058494</ModTime>
                <Hook name="epilog2">
                    <InheritFrom>[no inheritance]</InheritFrom>
                    <Name>epilog2</Name>
                    <Script><![CDATA[// Log all creations
function showJson(obj, lvl) {
	lvl = lvl || 0;
	var pad = "                                  ".substring(0, lvl*4);
	if (typeof obj != "object" || obj == null) {
		log(pad + obj);
	} else {
		for (var propName in obj) {
			var subobj = obj[propName];
			if (subobj instanceof Array) {
				log(pad + "  " + propName + ": [");
				for (var i = 0; i < subobj.length; i++) {
					showJson(subobj[i], lvl+1);
				}
				log(pad + "]");
			} else
			if (typeof subobj == "object") {
				log(pad + "  " + propName + ": {");
				showJson(subobj, lvl+1);
				log(pad + "  }")
			} else {
				log(pad + "  " + propName + ": " + subobj);
			}
		}
	}
}
log("");
log("Total objects created: ");
showJson(_totalCount);
//log("Objects created: ");
//showJson(_createdByAccount);
log("");
log("Objects created per account:");
showJson(_countByAccount);

// Show timing metrics
timingEntry = com.ibm.di.entry.Entry.fromJSON(toJson(timer.timers()));
timingMap = new java.util.HashMap();
for (att in timingEntry) {
	name = att.getName();
	count = att.getValue(0);
	timingMap.put(count, name);
}
timings = timingMap.keySet().toArray();
java.util.Arrays.sort(timings);

log("");
log("--------- Timings ----------");
for (i = 0; i < timings.length; i++) {
	timing = timings[i];
	seconds = Math.round(timing/1000);
	minutes = Math.floor(seconds / 60);
	secondsAfter = seconds % 60;
	log("    " + LJ(timingMap.get(timing), 35, i) 
				+ RJ(minutes, 11, i) + " min"
				+ RJ(secondsAfter, 3) + " sec");
}]]></Script>
                    <Enabled>true</Enabled>
                </Hook>
                <Hook name="prolog0">
                    <InheritFrom>[no inheritance]</InheritFrom>
                    <Name>prolog0</Name>
                    <Script><![CDATA[//vrs = "20200617 2112"; // Reading controls BEFORE mapping/adding Policy to OP
//vrs = "20200618 1909"; // Fixed problems we found prior-to cadence
//vrs = "20200703 1250"; // Now migrating Clauses (Procedures) and Control Clauses
//vrs = "20200705 18:30"; // Everything done except Technical Specifications
//vrs = "20200712 2140"; // Creating Excel sheets with multiple validation and history log entries
//vrs = "20200731 2335"; // Renaming Policy with version.sub-version appended to the name
//vrs = "20200802 1544"; // Corrected renaming functionality
//vrs = "20200804 1623"; // Fixed vlEntry - change to hlEntry for History Log migration
//vrs = "20200805 2243"; // Added timings and fixed TecSpec doc writing to make Name unique
//vrs = "20200806 1612"; // Fixed Policy name update with version and sub-version
vrs = "20200810 1127"; // Removed renaming of Policy with vers/sub-vers

timer = new Timer();
timer.start("migration process (whole)")
timer.start("initialization");
java.lang.System.getProperties().put("_timer", timer);]]></Script>
                    <Enabled>true</Enabled>
                </Hook>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="Debug settings" state="Enabled"/>
                    <Component name="Get request details" state="Enabled"/>
                    <Component name="Launch threads" state="Enabled"/>
                    <Component name="Wait for threads to complete" state="Enabled"/>
                    <Component name="End of processing" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer"/>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1597245044104</ModTime>
                <Script name="Debug settings">
                    <ModTime>1597244799152</ModTime>
                    <parameter name="script"><![CDATA[debug = true; // debug = true means write operations not performed
useId = 45392; // Set useId to the most recently created Policy for when debug == true

// The mockupEntry is for debugging this AL without having to call it from the Service
mockupEntry = system.newEntry();
mockupEntry["http.body"] = toJson({
	accounts: [
		{
			name: "Copacabana",
			migrate: true
		},{
			name: "WHU",
			migrate: true
		}
	]
});
mockupEntry["http.bodyAsString"] = mockupEntry["http.body"];
mockupEntry["content-type"] = "application/json)";
mockupEntry["http.Authorization"] = "arf";
mockupEntry["http.method"] = "POST";
mockupEntry["http.base"] = "/validate";]]></parameter>
                </Script>
                <Script name="Get request details">
                    <ModTime>1596801785181</ModTime>
                    <parameter name="script"><![CDATA[// Save the RequestObj from the Service, or if debugging locally create a new on with the mockupEntry
request = work.getObject("RequestObj") || new RequestObj(mockupEntry);

// get operation from the request
operation = request.operation();
accounts = request.accounts();

log("Performing operation: " + operation);

migrate = "migrate".equalsIgnoreCase(operation);]]></parameter>
                </Script>
                <Script name="Launch threads">
                    <ModTime>1597244971769</ModTime>
                    <parameter name="script"><![CDATA[db = new ePolicyObj();

if (debug) {
	log("\n\n\n\n\n	****** NOTE: Debug is TRUE ******   \n\n\n\n\n\n*");
	system.sleep(2);
}

// Use the Passive OpenPages Connector if available to enable debugging
if (typeof ctr != "undefined") {
	op = new OpenPagesObj(ctr);
} else {
	op = new OpenPagesObj();
}

// Setup Clause Control object
cc = new ClauseControlObj(op);

// For each Account passed to this AL...
for (i in accounts) {
	account = accounts[i];
	accountName = account.name;
	doMigration = migrate && account.migrate;
	
	log("Handing account " + accountName + "   Migrate? " + account.migrate);

	// First find the account in iPolicy - fail if not found
	log("Looking for account (" + accountName + ") in ePolicy...");
	res = db.find("IW.ACCOUNT", "NAME", accountName);

	if (res.length == 0) {
		errmsg = "Unable to find Account in ePolicy db";
		log("ERROR", errmsg);
		throw errmsg;
	}

	ePolicyAccount = res[0];
	log("Found account: " + accountName + " - ID: " + ePolicyAccount.ID
		+ '\n' + ePolicyAccount.toJSON());

	// Now find the account in OpenPages - fail if not found
	log("Looking for account in OpenPages...");

	// This handy function first searches by Name and then by Alias
	res = op.findAccount(accountName, { objectType: "SOXAccount" });

	if (res.length == 0) {
		errmsg = "Unable to find Account in OpenPages";
		log("ERROR", errmsg);
		throw errmsg;
	}

	opAccount = res[0];
	opAccountID = opAccount.getString("Resource ID");
	log("Found account: " + accountName + " - ID: " + opAccount.ID
		+ '\n' + opAccount.toJSON());

	// Add attributes for later mapping
	opAccount.Account_Name = opAccount.Name;
	opAccount.Account_ID = opAccountID;
	//accountName = accountName + " (" + opAccount.getString("Name") + ")";

	// Now read CSDs from ePolicy
	existingPolicyList = op.findChildren("SOXAccount",
		opAccount.getString("Resource ID"),
		"Policy");

	timer.stop("initialization");

	log("Reading CSDs...");

	// Variable to help keep track of spawned ALs
	als = {};
	
	// Initial Work Entry used to pass info to spawned ALs
	iwe = system.newEntry();
	
	// Now query CSDs for this Account
	CSDList = db.query("policy", ePolicyAccount);
	for (CSD in CSDList) {

		// Launch Migrate_ePolicy AL with the accounts and CSD details (entries)
		// Also pass in the ControlClauseObj, already initialized, along
		// with other required variables.
		//
		// Note that each thread must set up its own OpenPages and ePolicy connections
		
		iwe._account = account;
		iwe._cc = cc;
		iwe._csd = CSD;
		iwe._opAccount = opAccount;
		iwe._accountName = accountName;
		iwe._ePolicyAccount = ePolicyAccount;
		iwe._operation = (migrate) ? "migrate" : "validate";
		iwe._debug = debug;
		iwe._useId = useId;
		
		alName = accountName + " / " + CSD.name;
		
		log("Launching Migrate_ePolicy for " + alName);
		als[alName] = main.startAL("Migrate_ePolicy_Thread", iwe);
	} // for each CSD
} // for each Account]]></parameter>
                </Script>
                <Script name="Wait for threads to complete">
                    <ModTime>1597245044104</ModTime>
                    <parameter name="script"><![CDATA[// Now wait for ALs to complete
cnt = -1;
do {
	cnt++;
	task.sleep(500); // Sleep for half a second
	runningCount = 0;
	for (alName in als) {
		al = als[alName];
		state = al.getCurrentState();
		step = al.getCurrentStep();
		if (cnt % 100 == 0) {
			log(alName + "  state: " + state + "   step: " + step);
		}
	}
} while (runningCount == 0 || true);]]></parameter>
                </Script>
                <Script name="End of processing">
                    <ModTime>1596724869508</ModTime>
                    <parameter name="script"><![CDATA[log("\n\n-----");
log("Migration complete!")

timer.stop("migration process (whole)")]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
    </Folder>
    <Folder name="Connectors">
        
        
        
        
        
        <Connector name="OpenPagesGRCObjectQuery">
            <InheritFrom>system:/Connectors/ibmdi.ScriptConnector</InheritFrom>
            <ModTime>1592419103193</ModTime>
            <ConnectorMode>Lookup</ConnectorMode>
            <ConnectorState>Enabled</ConnectorState>
            <Configuration>
                <InheritFrom>[parent]</InheritFrom>
                <parameter name="$form$"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="7" UUID="79eadaf0-d654-45d6-8826-37565d38666c" created="Fri Feb 10 07:17:27 PST 2017" createdBy="Administrator" main="Form" modified="Thu Feb 16 07:00:03 PST 2017" modifiedBy="Administrator" version="7.1.1">
    <Form name="Form">
        <ModTime>1487257172219</ModTime>
        <FormItemNames>
            <ListItem>$GLOBAL.script</ListItem>
            <ListItem>keepGlobalState</ListItem>
            <ListItem>$GLOBAL.includeFiles</ListItem>
            <ListItem>includePrologs</ListItem>
            <ListItem>$GLOBAL.debug</ListItem>
            <ListItem>$GLOBAL.help</ListItem>
            <ListItem>root</ListItem>
            <ListItem>url</ListItem>
            <ListItem>password</ListItem>
            <ListItem>username</ListItem>
            <ListItem>query</ListItem>
        </FormItemNames>
        <FormSectionNames>
            <ListItem>General</ListItem>
            <ListItem>Advanced</ListItem>
        </FormSectionNames>
        <FormItem name="URL">
            <ModTime>1486739989542</ModTime>
            <parameter name="label">url</parameter>
        </FormItem>
        <FormItem name="apimethod">
            <ModTime>1486740964372</ModTime>
            <Values>
                <ListItem>getMandateByUcfId</ListItem>
            </Values>
            <parameter name="Required">true</parameter>
            <parameter name="label">OpenPages API Method</parameter>
            <parameter name="syntax">droplist</parameter>
        </FormItem>
        <FormItem name="field"/>
        <FormItem name="fieldname">
            <ModTime>1486743652414</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="label">Field Name</parameter>
        </FormItem>
        <FormItem name="fields">
            <ModTime>1486744335462</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="label">Fields</parameter>
        </FormItem>
        <FormItem name="fieldvalue">
            <ModTime>1486743640820</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="label">Field Value</parameter>
        </FormItem>
        <FormItem name="grcobjecttype">
            <ModTime>1486743680758</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="label">GRC Object Type</parameter>
        </FormItem>
        <FormItem name="includePrologs">
            <parameter name="description">pro_desc</parameter>
            <parameter name="label">pro_label</parameter>
            <parameter name="script">selectGlobalProlog</parameter>
            <parameter name="scriptLabel">pro_script_label</parameter>
            <parameter name="scripthelp">pro_script_help</parameter>
            <parameter name="syntax">textarea</parameter>
        </FormItem>
        <FormItem name="keepGlobalState">
            <parameter name="description">SCRIPT_CONN_KEEP_GLOBAL_STATE_DESC</parameter>
            <parameter name="label">SCRIPT_CONN_KEEP_GLOBAL_STATE_LABEL</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="keyvalue">
            <ModTime>1486740938653</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="label">Key Value</parameter>
        </FormItem>
        <FormItem name="password">
            <ModTime>1486740946403</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="label">Password</parameter>
            <parameter name="syntax">password</parameter>
        </FormItem>
        <FormItem name="query">
            <ModTime>1487257172219</ModTime>
            <parameter name="description">OpenPages API Query that will substitute work attributes in the query where the query part is enclosed within ${ and }.  For example, work attribute "parentObject" in query select * from [${parentObject}] would return all values from the parent object type specified in work attribute parentObject.  If parentObject is Mandate, then all Mandates would be retrieved from OpenPages</parameter>
            <parameter name="label">Query</parameter>
        </FormItem>
        <FormItem name="root">
            <ModTime>1486740954685</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="label">Root</parameter>
        </FormItem>
        <FormItem name="url">
            <ModTime>1486740949356</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="label">URL</parameter>
        </FormItem>
        <FormItem name="username">
            <ModTime>1486740944106</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="label">User Name</parameter>
        </FormItem>
        <FormSection name="Advanced">
            <FormSectionNames>
                <ListItem>keepGlobalState</ListItem>
                <ListItem>$GLOBAL.includeFiles</ListItem>
                <ListItem>includePrologs</ListItem>
                <ListItem>$GLOBAL.debug</ListItem>
                <ListItem>$GLOBAL.userComment</ListItem>
            </FormSectionNames>
            <parameter name="initiallyExpanded">false</parameter>
            <parameter name="title">Advanced</parameter>
        </FormSection>
        <FormSection name="General">
            <FormSectionNames>
                <ListItem>$GLOBAL.script</ListItem>
                <ListItem>root</ListItem>
                <ListItem>url</ListItem>
                <ListItem>username</ListItem>
                <ListItem>password</ListItem>
                <ListItem>query</ListItem>
            </FormSectionNames>
        </FormSection>
        <parameter name="title">CONN_TITLE</parameter>
        <TranslationFile>NLS/idi_conn_scriptconn</TranslationFile>
    </Form>
</MetamergeConfig>]]></parameter>
                <parameter name="includeFiles"/>
                <parameter name="includePrologs"><![CDATA[JsonUtil
OPClientFeedProps
OPClientState
OPConnectionProperties
OPMailProvider
OPQueryParser
OPResultSet
OpenPagesApiClient
PolyFills
TDIEnvironmentAccessor]]></parameter>
                <parameter name="password">@SUBSTITUTE{property.POC_MVP:op.password}</parameter>
                <parameter name="query"/>
                <parameter name="root">@SUBSTITUTE{property.POC_MVP:op.uri.root}</parameter>
                <parameter name="script"><![CDATA[//////////////////////////////////////////////////////////////////////////////
//
//  Licensed Materials - Property of IBM
//
//  5725-D51
//
//  (C) Copyright IBM Corporation 2017.  All Rights Reserved.
//
//  US Government Users Restricted Rights - Use, duplication or
//  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//
//////////////////////////////////////////////////////////////////////////////

var queryParser = null;
var queryMeta = null;
var api = null;
var envAccessor = null;
var iterated = false;

function ensureInitialized() {
    if (! envAccessor) {
        envAccessor = new TDIEnvironmentAccessor();
    }

    if (! queryParser) {
        queryParser = new OPQueryParser();
        queryParser.init({
            env : envAccessor
        })
    }

    queryMeta = queryParser.parseQuery(connector.getParam("query"));

    if (! api) {
        api = new OpenPagesApiClient();
        api.initializeConnector({
            opConnectSettings : {
                root : connector.getParam("root"),
                url : connector.getParam("url"),
                password : connector.getParam("password"),
                username : connector.getParam("username"),
                object : queryMeta.targetObject
            }
        });
    } else {
        // todo: set api object if it has changed
    }
}

function callApiMethod() {
    ensureInitialized();
   // var grcObject = api.executeGrcObjectQuery(queryMeta.getQueryPath());
   var grcObject = api.executeGrcObjectQuery(connector.getParam("query"));
    return api.grcObjectToEntry(grcObject);
}

function selectEntries() {
	iterated = false;
}

function getNextEntry () {
    if (! iterated) {
        var grcObjEntry = callApiMethod();
        if (grcObjEntry.size() == 0) {
        	result.setStatus(0);
        	return null;
        	// not returning status & query below
            entry["status"] = "No results found";
            entry["query"] = queryMeta.getQueryPath();
        } else {
            entry.merge(grcObjEntry);
        }

        iterated = true;
        result.setStatus(1);
        return entry;
    }
    result.setStatus (0);
}

function putEntry () {
    api.logInfo("Adding a new " + queryMeta.targetObject);
    entry.merge(callApiMethod());
}

function modEntry () {
    api.logInfo("Updating " + queryMeta.targetObject);
    entry.merge(callApiMethod());
}

function deleteEntry () {
}

function findEntry () {
    ensureInitialized();

    var grcObjectEntry = callApiMethod();
    if (grcObjectEntry.size() == 0) {
        throw new java.lang.IllegalArgumentException("Error executing query " + queryMeta.getQueryPath());
    } else {
        entry["entityFound"] = true;
        entry.merge(grcObjectEntry);
    }
}

function querySchema () {
}
]]></parameter>
                <parameter name="url">@SUBSTITUTE{property.POC_MVP:op.url}</parameter>
                <parameter name="username">@SUBSTITUTE{property.POC_MVP:op.username}</parameter>
            </Configuration>
            <Parser>
                <InheritFrom>[parent]</InheritFrom>
            </Parser>
            <AttributeMap name="Input">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <AttributeMap name="Output">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <DeltaSettings>
                <WhenToCommit>After every database operation</WhenToCommit>
                <RowLocking>SERIALIZABLE</RowLocking>
                <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
            </DeltaSettings>
            <Schema name="Input">
                <InheritFrom>[parent]</InheritFrom>
            </Schema>
            <Schema name="Output">
                <InheritFrom>[parent]</InheritFrom>
            </Schema>
            <LinkCriteria>
                <InheritFrom>[parent]</InheritFrom>
            </LinkCriteria>
            <Hooks>
                <InheritFrom>[parent]</InheritFrom>
                <Hook name="default_fail">
                    <InheritFrom>/Scripts/Hook_Default_On_Error</InheritFrom>
                    <Name>default_fail</Name>
                    <Enabled>true</Enabled>
                </Hook>
                <Hook name="initialize_fail">
                    <InheritFrom>/Scripts/Hook_On_Error</InheritFrom>
                    <Name>initialize_fail</Name>
                    <Enabled>true</Enabled>
                </Hook>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <Reconnect>
                <InheritFrom>[parent]</InheritFrom>
                <ReconnectRules/>
            </Reconnect>
            <Operations/>
            <PoolDefinition>
                <InheritFrom>[parent]</InheritFrom>
                <Enabled>false</Enabled>
                <MinPoolSize>0</MinPoolSize>
                <MaxPoolSize>0</MaxPoolSize>
                <PurgeInterval>0</PurgeInterval>
                <InitializeAttempts>1</InitializeAttempts>
                <InitializeSleepInterval>0</InitializeSleepInterval>
            </PoolDefinition>
            <PoolInstance/>
        </Connector>
        <Connector name="OpenPages Connector">
            <InheritFrom>system:/Connectors/ibmdi.ScriptConnector</InheritFrom>
            <ModTime>1597763555487</ModTime>
            <ConnectorMode>Lookup</ConnectorMode>
            <ConnectorState>Enabled</ConnectorState>
            <Configuration>
                <UserComment>fixing</UserComment>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1597763555487</ModTime>
                <parameter name="$form$"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="260" UUID="a8ad3eb7-a05b-4a69-b5c2-397f536ac120" created="Sun Jun 01 21:17:26 CEST 2014" createdBy="Administrator" main="Form" modified="Thu Jun 25 12:21:31 CEST 2020" modifiedBy="eddie" version="7.1.1">
    <Form name="Form">
        <ModTime>1591039019456</ModTime>
        <FormItemNames>
            <ListItem>$GLOBAL.script</ListItem>
            <ListItem>password</ListItem>
            <ListItem>deBug</ListItem>
            <ListItem>url</ListItem>
            <ListItem>username</ListItem>
            <ListItem>object</ListItem>
            <ListItem>query</ListItem>
            <ListItem>root</ListItem>
            <ListItem>parentType</ListItem>
            <ListItem>parentLoc</ListItem>
            <ListItem>smtpHost</ListItem>
            <ListItem>smtpPort</ListItem>
            <ListItem>mailTo</ListItem>
        </FormItemNames>
        <FormSectionNames>
            <ListItem>General</ListItem>
            <ListItem>Advanced</ListItem>
            <ListItem>Shared</ListItem>
        </FormSectionNames>
        <FormItem name="Parent Object Type"/>
        <FormItem name="allowOrphans">
            <ModTime>1433528573989</ModTime>
            <parameter name="description">When set, allow orphaned objects to be created.</parameter>
            <parameter name="label">Allow Orphans</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="deBug">
            <ModTime>1431552570823</ModTime>
            <parameter name="description">Enable this to provide debugging messages in the log output and console.</parameter>
            <parameter name="label">Debug log</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="mailTo">
            <ModTime>1436821990224</ModTime>
            <parameter name="description">The email address to use for sending email notifications for errors that can occur in the assembly line connectors.</parameter>
            <parameter name="label">Mail To</parameter>
        </FormItem>
        <FormItem name="object">
            <ModTime>1432753097249</ModTime>
            <Values>
                <ListItem>Incident</ListItem>
                <ListItem>Asset</ListItem>
            </Values>
            <parameter name="Required">true</parameter>
            <parameter name="description">The type of object to work with. May be overridden for add operation by mapping out an attribute named '$grcObjectType'.</parameter>
            <parameter name="label">GRC Object</parameter>
            <parameter name="script">getTypes</parameter>
            <parameter name="scriptLabel">Query</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="parentLoc">
            <ModTime>1433445455394</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="description">The relative location of the GRC parent object to use as the parent for all newly created incidents.  Example: /EMEA/Audits</parameter>
            <parameter name="label">Parent Location</parameter>
        </FormItem>
        <FormItem name="parentType">
            <ModTime>1433771469910</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="description">The GRC object type of the parent object to use for all newly created incidents.</parameter>
            <parameter name="label">Parent Object Type</parameter>
        </FormItem>
        <FormItem name="password">
            <ModTime>1432753086954</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">The password for the OpenPages user id.</parameter>
            <parameter name="label">Password</parameter>
            <parameter name="noLabel">false</parameter>
            <parameter name="syntax">password</parameter>
        </FormItem>
        <FormItem name="query">
            <ModTime>1435339779622</ModTime>
            <parameter name="description">The GRC query to apply for iteration.  If empty then SELECT * FROM [&lt;object&gt;] is used.</parameter>
            <parameter name="label">Query</parameter>
            <parameter name="modes"/>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="root">
            <ModTime>1432753221316</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">The root of the OpenPages REST API. This is by default /grc/api .</parameter>
            <parameter name="label">URI Root</parameter>
            <parameter name="noLabel">false</parameter>
        </FormItem>
        <FormItem name="smtpHost">
            <ModTime>1436823079339</ModTime>
            <parameter name="description">The SMTP host to use for sending email notifications for errors that can occur in the assembly line connectors.</parameter>
            <parameter name="label">SMTP Host</parameter>
        </FormItem>
        <FormItem name="smtpPort">
            <ModTime>1436821942625</ModTime>
            <parameter name="description">The SMTP port to use for sending email notifications to for errors that can occur in the assembly line connectors. Defaulted to 25.</parameter>
            <parameter name="label">SMTP Port</parameter>
        </FormItem>
        <FormItem name="url">
            <ModTime>1431455638910</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">The URL to the OpenPages system.  For example: http://openpages.acme.com:10108</parameter>
            <parameter name="label">URL</parameter>
        </FormItem>
        <FormItem name="username">
            <ModTime>1432753093706</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">The OpenPages user id to authenticate with.</parameter>
            <parameter name="label">User id</parameter>
        </FormItem>
        <FormSection name="Advanced">
            <FormSectionNames>
                <ListItem>root</ListItem>
                <ListItem>query</ListItem>
                <ListItem>$GLOBAL.script</ListItem>
            </FormSectionNames>
            <parameter name="initiallyExpanded">false</parameter>
            <parameter name="title">Advanced</parameter>
        </FormSection>
        <FormSection name="General">
            <FormSectionNames>
                <ListItem>url</ListItem>
                <ListItem>username</ListItem>
                <ListItem>password</ListItem>
                <ListItem>object</ListItem>
                <ListItem>parentType</ListItem>
                <ListItem>parentLoc</ListItem>
                <ListItem>$GLOBAL.userComment</ListItem>
                <ListItem>deBug</ListItem>
            </FormSectionNames>
        </FormSection>
        <FormSection name="Shared">
            <ModTime>1436821851376</ModTime>
            <FormSectionNames>
                <ListItem>smtpHost</ListItem>
                <ListItem>smtpPort</ListItem>
                <ListItem>mailTo</ListItem>
            </FormSectionNames>
            <parameter name="initiallyExpanded">false</parameter>
            <parameter name="title">Shared</parameter>
        </FormSection>
        <parameter name="formevents"><![CDATA[// 20140912 1248
var params = {	url : "", 
				root : "/grc/api",
				username : "", 
				password : "",
				object : "",
				query : "",
				
				refresh : function(connector) {
					for (var pname in this) {
						if (typeof this[pname] !== "function") {
							var control = form.getControl(pname);
							if (control !== null && control.getText() != null) {
								this[pname] = control.getText();
							}	
						}	
					}

					this.root = "/grc/api";

					if (!this.url.toLowerCase().endsWith(this.root.toLowerCase())) {
						this.url = this.url + this.fixPath(this.root);
					}	
//					form.alert("this.url: " + this.url + "\nthis.root: " + this.root)
				},
				
				apply : function(http) {
					for (var pname in this) {
						if (typeof this[pname] !== "function") {
							http.setParam(pname, this[pname]);
						}	
					}
				},

				fixPath : function(path) {
					if (!path.startsWith("/")) {
						path = "/" + path;
					}
					return path;
				}
			}


function getCertificate () {
	form.setWaitCursor();
	try {
		var msg = com.ibm.di.security.GetSSLCertificate.installCertificateFrom(url, 443);
	} finally {
		form.setNormalCursor();
	}
	form.alert(msg);
}

function getTypes() {
	params.refresh();
	params.apply(http);
	
	form.getClass();
	var combo = form.getControl("object");
	combo.removeAll();

	var reply = makeRequest({"verb" : "GET", 
							 "url" : "/types", 
							 "ctype" : "application/json", 
							 "where" : "selectEnries"});

	if (typeof reply.length !== "undefined") {						 
		var arr = new java.util.ArrayList();

		arr.add("file (word, excel, etc)");
		for (var i = 0; i < reply.length; i++) {
			arr.add(reply[i].name);
		}
			
		arr = arr.toArray();
		java.util.Arrays.sort(arr);
	
		for (var a in arr) {
			combo.add(a);
		}	
		
		combo.select(0);
	}	
}

function makeRequest(args) {
	var verb = args.verb;		// HTTP method, e.g. GET, POST, PUT, ...
	var url = args.url;		// url for the request. May be partial (only the path & query string params)
	var body = args.body;		// HTTP body to be passed for the request
	var ctype = args.ctype;	// Content-Type of the HTTP body
	var where = args.where;	// where this method is called from - for debugging purposes

	// set default values for missing params/properties
	if (verb == null) { verb = "GET"; } 
	if (url == null) { url = ""; } 
	if (ctype == null) { ctype = "application/json"; }
	if (where == null) { where = ""; } 

	// prepend the base url if not found in the url passed to the function
	if (url.toLowerCase().indexOf(params.url.toLowerCase()) < 0) {
		url = params.url + params.fixPath(url);
	}
	
//	form.alert("url: " + url + "\n\n    params.url: " + params.url);
	
	requestEntry.removeAllAttributes();
	
	if (typeof body !== "undefined" && body !== null && body.trim().length > 0) {
		requestEntry["http.body"] = body;
	}
	
	// set Connector parameters
	http.setParam("method", verb.toUpperCase());
	http.setParam("url", url);

	// prepare the request Entry (used for POST/PUT calls)
	requestEntry["http.Content-Type"] = ctype;
	requestEntry["http.Accept"] = "application/json";
	requestEntry["http.Connection"] = "keep-alive";
	requestEntry["http.remote_user"] = params.username;
	requestEntry["http.remote_pass"] = params.password;

// commented out for now
//
//	requestEntry["http.Accept-Encoding"] = "gzip, deflate";
//	requestEntry["http.Accept-Language"] = "en-US,en;q=0.5";
//	requestEntry["http.User-Agent"] = "IBM Security Directory Integrator";
//	requestEntry["http.Authorization"] = "BASIC " + system.base64Encode(String(user + ":" + password).getBytes());
	
	// add any cookies received on previous calls
	if (cookies.size() > 0) {
//		requestEntry["X-CouchDB-WWW-Authenticate"] = "Cookie"; // TODO
		requestEntry.merge(cookies);
	}	

	// if Detailed Log is enabled then write request details to the log
	if (deBug) {
		logDetails({"msg" : message["Request to"] + " OpenPages", 
					"obj" : requestEntry, 
					"url" : url, 
					"verb" : verb, 
					"ctype" : ctype, 
					"where" : where});
	}

	var retry = 0;
	var maxRetry = 2;
	var retEntry = null;
	
	// this loop makes the actual request. If an SSL handshake error occurs, attempt to retrieve
	// and import the client certificate and inform the user that TDI must be restarted.
	//
	do {
		try {	
			retEntry = http.queryReply(requestEntry);
			
//			form.alert(retEntry.toString())
		} catch (ex) {
			if (ex instanceof javax.net.ssl.SSLHandshakeException) {
				if (retry == 0) {
					getCertificate();
				} else {	
					throwException(message["You must restart the SDI server in order for the imported certificate to be trusted."])
				}
			} else {
				throw ex;
			}	
		}
		
		retry++;
	} while (retEntry === null && retry < maxRetry);
	
	// if Detailed Log is enabled, write reply details to the log
	if (deBug) {
		logDetails({"msg" : message["Response from"] + " OpenPages", 
				    "entry" : retEntry});
	}
	
	verifyResponse(retEntry);
	
	// parse the reply from OpenPages
	var reply = parseReply(retEntry);
	
	return reply;
}

function throwException(msg) {
	throw new java.lang.IllegalArgumentException(msg);
}

function logmsg(lvl, msg) {
	if (typeof lvl === "undefined") { lvl = ""; } 
	if (typeof msg === "undefined") {
		msg = lvl;
		lvl = "INFO";
	}
	
	if (deBug) {
		java.lang.System.out.println(msg);
	}
		
	try {
		connector.logmsg(lvl, msg);
	} catch (ex) {
		main.logmsg(lvl, msg);
	}	
}

function getParam(pname, required) {
	if (typeof required === "undefined") { required = true; }
	var ctrl = form.getControl(pname);
	if (ctrl == null && required) {
		throwException(message["Required parameter not set"] + ": " + pname);
	}
	
	pval = ctrl.getText();
	
	if (pval === null && required) {
		throwException(message["Required parameter not set"] + ": " + pname);
	} 
	
	return pval;
}

function parseReply(replyEntry) {
	var body = replyEntry.getString("http.bodyAsString");
	
	try {
//		if (deBug) logmsg("DEBUG", "body: " + body);
		var jobj = fromJson(body);
		
		// save any cookies passed back	
		var setCookie = replyEntry.getAttribute("http.Set-Cookie");
		if (setCookie !== null) {
			for (var i = 0; i < setCookie.size(); i++) {
				var thisCookie = setCookie.getValue(i);
				var p = thisCookie.indexOf("=");
				if (p > 0) {
					cookies["http." + thisCookie.substring(0,p)] = thisCookie.substring(p+1);
				}
			}	
		}
	} catch (ex) {
		throwException(message["Unable to parse JSON return from"] + " OpenPages - " + ex);
	}	
	
	return jobj;
}

function fixUrl(params) {
	var url = params.url;
	var dbtype = params.dbtype;
	var protocolSpes = "http:";
	var auth = "";
	
	if (url.startsWith("http")) {
		var p = url.indexOf("/");
		if (p > 0) {
			protocolSpes = url.substring(0, p);
			var p2 = url.indexOf("/", p+1);
			if (p2 == (p+1)) {
				url = url.substring(p2+1);
			} else {
				throwException(message["Invalid format for URL parameter"] + ": " + url);
			}
		}
	}

	if (!url.endsWith("/")) {
		return protocolSpes + "//" + auth + url + "/";
	} else {
		return protocolSpes + "//" + auth + url;
	}
}

function logDetails(params) {
	var msg = params.msg;
	var obj = params.obj; 
	var url = params.url;
	var verb = params.verb;
	var ctype = params.ctype; 
	var where = params.where;
	
	if (msg == null) {
		msg = message["Unnamed entry"];
	}

	var s = new java.lang.StringBuffer();
	
	if (where != null) {
		s.append("\n@@@------> (" + where + ") " + msg);
	} else {
		s.append("\n---------> " + msg);
	}
	
	
	if (verb != null) { s.append("   " + verb.toUpperCase()); } 
	if (ctype != null) { s.append("   " + ctype); } 
	if (url != null) { s.append("   " + url); } 
	s.append("\n");

	if (obj != null) {
		if (obj instanceof com.ibm.di.entry.Entry) {	
			var attNames = obj.getAttributeNames();
			for (var a in attNames) {
				if (a.indexOf("http.") >= 0 && 
					!("http.bodyAsString".equalsIgnoreCase(a)
						|| "http.bodyAsBytes".equalsIgnoreCase(a)) ) {
					s += " " + a + ": " + obj[a] + "\n";
				}
			}	
		} else {
			s.append(obj.toString());
		}
	}	
	form.alert(s.toString());
}

function verifyResponse(replyEntry) {
	var respCode = replyEntry.getString("http.responseCode");
	if (!respCode.startsWith("2")) {
		throwException(message["Error from"] 
						+ " OpenPage server - code: " + respCode
						+ "  message: " + replyEntry.getString("http.responseMsg"));
	}
}

function authenticate() {
	var user = getParam("user");
	var password = getParam("password");
	var reply = makeRequest({verb : "POST", 
							 url : "_session", 
							 body : "name=" + user + "&password=" + password, 
							 ctype : "application/x-www-form-urlencoded", 
							 where : "authenticate",
							 authenticating : true});
	authenticated = true;
}]]]]><![CDATA[></parameter>
        <parameter name="formscript"><![CDATA[var message = new Array();
var message = new Array();
message["Required parameter not set"] = "Required parameter not set";
message["Response from"] = "Response from";
message["Request to"] = "Request to";
message["Error from"] = "Error from";
message["You must restart the SDI server in order for the imported certificate to be trusted."] = "You must restart the SDI server in order for the imported certificate to be trusted.";
message["Unable to parse JSON return from"] = "Unable to parse JSON return from";
message["Invalid format for URL parameter"] = "Invalid format for URL parameter";

if (typeof(system) == "undefined") {
	var c = java.lang.Class.forName("com.ibm.di.function.UserFunctions");
	system = new c;
}	

var http = system.getConnector("ibmdi.HTTPClient");
var requestEntry = system.newEntry();
var cookies = system.newEntry();
var deBug = false;
var authenticated = false;
http.initialize(null);
]]]]><![CDATA[></parameter>
        <parameter name="title">OpenPages Connector</parameter>
        <TranslationFile>NLS/idi_conn_scriptconn</TranslationFile>
    </Form>
</MetamergeConfig>]]></parameter>
                <parameter name="allowOrphans">@SUBSTITUTE{property.qradar_integration:op_allowOrphans}</parameter>
                <parameter name="object">Asset</parameter>
                <parameter name="parentLoc"/>
                <parameter name="parentType"/>
                <parameter name="password">@SUBSTITUTE{property.POC_MVP:op.password}</parameter>
                <parameter name="root">@SUBSTITUTE{property.POC_MVP:op.uri.root}</parameter>
                <parameter name="script"><![CDATA[//////////////////////////////////////////////////////////////////////////////
//
//  Licensed Materials - Property of IBM
//
//  5725-D51
//
//  (C) Copyright IBM Corporation 2015, 2017  All Rights Reserved.
//
//  US Government Users Restricted Rights - Use, duplication or
//  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//
//////////////////////////////////////////////////////////////////////////////
//
// OpenPages Connector
//
// Ancient history moved to bottom of script
//var version = "20200626 1608"; // make selectEntries() initialize the Connector
//var version = "20200627 1307"; // Now support SOXDocment creation - both the actual doc (attachment) and fields
//var version = "20200629 1102"; // Trying different regex for the replacement of \/ with /
//var version = "20200629 1222"; // Giving up and reverting to simple replace
//var version = "20200630 1007"; // Adding get_fielddefinitions operation to queryReply
//var version = "20200630 1340"; // Fixed refresh in params object to trim Connector param values
//var version = "20200731 2334"; // Added set_current operation to queryReply()
//var version = "20200802 1502"; // putEntry() logs out new Resource ID
//var version = "20200802 1543"; // modEntry() corrected
//var version = "20200802 2109"; // modEntry() now returns updated Entry
//var version = "20200805 2239"; // updated entryToGRCObject() to remove illegal chars from Name
//var version = "20200813 2101"; // Fixed a bug I introduced to GrcObjectToEntry()
//var version = "20200818 1348"; // Fixed a bug where log() was used instead of logmsg()
//var version = "20200818 2013"; // Added debug for putEntry()
var version = "20200818 1710"; // EH - Removed code in entryToGrcObject() that removed extension from Name for SOXDocuments

var requestEntry = system.newEntry();
var cookies = system.newEntry();
var ISOdateMask1 = "yyyy-MM-dd'T'HH:mm:ss.SSZ";
var ISOdateMask2 = "yyyy-MM-dd'T'HH:mm:ss.SSSZ";

// Messages returned by the Connector are kept in an Array and set here to make it
// simpler to localize this component later.
//
var message = [];
message["Required parameter not set"] = "Required parameter not set";
message["Response from"] = "Response from";
message["Request to"] = "Request to";
message["Error from"] = "Error from";
message["You must restart the SDI server in order for the imported certificate to be trusted."] = "You must restart the SDI server in order for the imported certificate to be trusted.";
message["Unable to parse JSON return from"] = "Unable to parse JSON return from";
message["Invalid format for URL parameter"] = "Invalid format for URL parameter";
message["No field definitions returned for GRC object type"] = "No field definitions returned for GRC object type";
message["No GRC Object types returned by OpenPages"] = "No types returned by OpenPages";
message["GRC Object type"] = "GRC Object type";
message["has no field defintion for attribute"] = "has no field defintion for attribute";
message["The following field is readOnly and cannot be written to"] = "The following field is readOnly and cannot be written to";
message["No types returned by OpenPages"] = "No types returned by OpenPages";
message["The following fields are readOnly and cannot be written"] = "The following fields are readOnly and cannot be written";
message["The following fields are required"] = "The following fields are required";
message["Unable to parse DATE_TYPE value for"] = "Unable to parse DATE_TYPE value for";

// Global variables defined here
var initialized = false;

// GRC object system fields
var grcSystemFieldNames = ["name", "description", "primaryParentId", "typeDefinitionId", "parentFolderId"];
var grcSystemFieldTypes = ["String", "String", "Integer (Id)", "Integer (Id)", "Integer (Id)"];

var schemaType = [];
schemaType["DATE_TYPE"] = "Date";
schemaType["INTEGER_TYPE"] = "Integer";
schemaType["ID_TYPE"] = "Integer (Id)";
schemaType["STRING_TYPE"] = "String (limited to 4000 characters)";
schemaType["MEDIUM_STRING_TYPE"] = "Medium size String (limited to 32000 characters)";
schemaType["LARGE_STRING_TYPE"] = "Large size String (limited to configured maximum)";
schemaType["ENUM_TYPE"] = "String";
schemaType["MULTI_VALUE_ENUM"] = "String (multi-valued)";
schemaType["CURRENCY_TYPE"] = "Number (value in default currency)";
schemaType["BOOLEAN_TYPE"] = "Boolean (true or false)";
schemaType["FLOAT_TYPE"] = "Floating point decimal";

// timer object defined in some ALs using this Connector
// var _timer = java.lang.System.getProperties().get("_timer") || {start: function() {}, stop: function() {}, timers: function() {return {} }}; 
// Mail settings - this copy here has a local copy of the values shared by all connectors in the project
var mailSettings = {
	smtpHost: "",
	smtpPort: 25,
	emailTo: "",
	notificationsSent: null
};

// Keep track of last conn Entry after a putEntry() call
var lastConn = null;

// feed properties object; cleared and used for each entry
var feedProps = {
	staticPrimaryParentId: null,
	parentType: null,
	parentLoc: null,
	derivedPrimaryParentId: null,
	currencyIsoCodes: new java.util.HashMap(), // isoCode for each mapped CURRENCY_TYPE value per iteration

	clear: function() {
		this.staticPrimaryParentId = null;
		this.parentType = null;
		this.parentLoc = null;
		this.derivedPrimaryParentId = null;
		this.currencyIsoCodes.clear();
	},

	recoverPrimaryParentIdFromFeed: function(entry) {
		if (typeof entry.primaryparentType !== "undefined" && entry.primaryparentType !== null &&
			typeof entry.primaryparentLocation !== "undefined" && entry.primaryparentLocation !== null) {
			this.parentType = entry.primaryparentType.getValue();
			this.parentLoc = entry.primaryparentLocation.getValue();

			if (this.parentType !== null && this.parentType !== "" &&
				this.parentLoc !== null && this.parentLoc !== "") {
				if (params.getParentObjectType(this.parentType) !== null) {
					this.derivedPrimaryParentId = params.getParentObjectIdFromTypeAndLoc(this.parentType, this.parentLoc);
				}

				if (this.derivedPrimaryParentId === null) {
					var msg = "A primaryParentId could not be derived from the feed's parentType '" + this.parentType +
						"' and parentLocation '" + this.parentLoc + "' properties for this entry." +
						"Verify that the parentType is a legitimate parent type for an object of type '" +
						params.object + "' and that the parentLocation is correct.";
					logmsg("WARN", msg);
					sendEmailNotification(msg);
				}
			}
		}
	},

	obtainPrimaryParentIdFromFeed: function(entry) {
		var msg = "";
		var parentObjectType = null;

		if (typeof entry !== "undefined" && entry instanceof com.ibm.di.entry.Entry) {

			// First check if a valid primary parent id value was included in the feed
			if (typeof entry.primaryParentId !== "undefined" && entry.primaryParentId !== null &&
				isPrimaryParentIdValid(entry.primaryParentId.getValue())) {
				this.staticPrimaryParentId = entry.primaryParentId.getValue();
			}

			// Otherwise check if it can be derived from the feed's parentType and parentLocation values
			else if (typeof entry.parentType !== "undefined" && entry.parentType !== null &&
				typeof entry.parentLocation !== "undefined" && entry.parentLocation !== null) {
				this.parentType = entry.parentType.getValue();
				this.parentLoc = entry.parentLocation.getValue();

				if (this.parentType !== null && this.parentType !== "" &&
					this.parentLoc !== null && this.parentLoc !== "") {
					parentObjectType = params.getParentObjectType(this.parentType);

					if (parentObjectType !== null) {
						this.derivedPrimaryParentId = params.getParentObjectIdFromTypeAndLoc(this.parentType, this.parentLoc);
					}

					if (this.derivedPrimaryParentId === null) {
						msg = "A primaryParentId could not be derived from the feed's parentType '" + this.parentType +
							"' and parentLocation '" + this.parentLoc + "' properties for this entry." +
							"Verify that the parentType is a legitimate parent type for an object of type '" +
							params.object + "' and that the parentLocation is correct.";
						logmsg("WARN", msg);
						sendEmailNotification(msg);
					}
				}
			}
		}
	}
};

// parameters container object
var params = {
	url: "",
	root: "/grc/api",
	username: "",
	password: "",

	//
	// The grc object name, such as "Submandate" or "Mandate".  Should be set in the connector settings form.
	//
	object: "",

	//
	// The grc object id, looked up from the object name specified in the "object" property above
	//
	objectId: null,

	query: "",
	schema: null,
	defaultPrimaryParentObjectId: null, // derived from op_parentType, op_parentLoc props in connector.properties
	http: null,
	current: null,
	deBug: false,
	parentType: "", // from connector.properties file for deriving defaultPrimaryParentObjectId only
	parentLoc: "", // from connector.properties file for deriving defaultPrimaryParentObjectId only
	validPrimaryParentIds: null,
	invalidPrimaryParentIds: null,
	smtpHost: "",
	smtpPort: 25,
	mailTo: "",
	defaultCurrencyIsoCode: "",
	largeStringMaxSize: 256000,

	//
	// Resource caches that are loaded via query to OpenPages
	//
	fieldDefinitions: null,
	templates: null,
	typesById: null,
	typesByName: null,
	typeDetailsByName: null,

	//
	// Properties shared across all members of an assembly line (instance of java.lang.System.getProperties()).
	// This will be used to cache results of OP queries that will not change over the lifetime of the
	// assembly line, such as type and field definitions, preventing unnecessary reloading of common data.
	//
	properties: null,

	getHttp: function() {
		if (!this.http) {
			this.http = system.getConnector("ibmdi.HTTPClient");
			this.http.initialize(null);
		}

		return this.http;
	},

	refresh: function() {
		var paramVal;
		this.getHttp();
		for (var pname in this) {
			if (typeof this[pname] !== "function") {
				paramVal = connector.getParam(pname);
				if (paramVal != null || pname == "query") {
					if (typeof paramVal == "string") {
						paramVal = paramVal.trim();
					}
					this[pname] = paramVal;
				}
			}
		}
		if (!this.url.endsWith(this.root)) {
			this.url += this.fixPath(this.root);
		}
	},

	apply: function() {
		for (var pname in this) {
			if (typeof this[pname] !== "function") {
				this.getHttp().setParam(pname, this[pname]);
			}
		}

		if (this.deBug !== "true") this.deBug = false;
	},

	fixPath: function(path) {
		if (!path.startsWith("/")) {
			path = "/" + path;
		}
		return path;
	},

	initialize: function() {
		this.refresh();
		this.apply();

		//		this.properties = java.lang.System.getProperties();
		this.properties = new java.util.Properties();

		// Process the SMTP/mail properties
		var hostname = java.net.InetAddress.getLocalHost().getHostName();
		mailSettings.mailSubject = "(Do Not Reply) OpenPages Connector error ";
		mailSettings.mailFrom = "TDI-Administrator-on-" + hostname + "@" + hostname;
		mailSettings.notificationsSent = new java.util.HashSet();
		mailSettings.smtpHost = this.smtpHost ? this.smtpHost : "";
		mailSettings.smtpPort = this.smtpPort ? this.smtpPort : 25;
		mailSettings.mailTo = this.mailTo ? this.mailTo : "";

		// Disable mail notifications if important mailing properties were not specified
		if (mailSettings.smtpHost === "" || mailSettings.mailTo === "") {
			mailSettings.smtpHost = "";
		}

		// verify required properties are at least present from processing properties files
		if (this.url === null || this.url === "" || this.url.endsWith("/")) {
			throwException("Required property op_url must be set to a valid URL (with no trailing '/' character).");
			return null;
		}
		if (this.username === null || this.username === "") {
			throwException("Required property op_username must be set to a valid OpenPages login user name.");
			return null;
		}
		if (this.password === null || this.password === "") {
			throwException("Required property op_conn_password must be set to the password for the specified OpenPages login (op_username) property.");
			return null;
		}
		if (this.object === null || this.object === "") {
			throwException("Required property op_object must be set to a valid OpenPages object type.");
			return null;
		}

		// Ensure that if the API root was not specified that the default is used
		if (this.root === undefined || this.root === null || this.root === "null" || this.root == "") {
			this.root = "/grc/api";
		}

		if (!this.url.endsWith(this.root)) {
			this.url += this.fixPath(this.root);
		}

		var obj = this.object;
		this.getHttp().initialize(null);

		this.objectId = null;

		if (obj != null) {
			var thisType = this.getTypeByName(obj);
			if (thisType != null) {
				this.objectId = thisType.id;
				logmsg("INFO", "Object is " + obj + " and object id is " + this.objectId);
			}
		}

		// Process the parent type and the parent location properties from the properties file
		// to establish the default primary parent to use when the feed does not provide a
		// static or dynamically derived primaryParentId
		this.validPrimaryParentIds = new java.util.HashSet();
		this.invalidPrimaryParentIds = new java.util.HashSet();

		// Obtain the default currency ISO code to use in case the feed does not provide one
		// when a currency amount is included.
		this.defaultCurrencyIsoCode = this.getDefaultCurrencyIsoCode();

		// Obtain the registry setting for the Large String's maximum value
		this.largeStringMaxSize = this.getLargeStringMaxValue();

		if (this.object === "Mandate" && this.parentType !== "SOXBusEntity") {
			throwException("Invalid parent type set for Mandate.  Must be set to SOXBusEntity");
		}

		// log the property values obtained from the various properties file(s)
		logmsg("INFO", "The OpenPages Connector configuration properties used for this instance are:" +
			"\n\tURL (op_url):						  " + this.url +
			"\n\tUser Id (op_username):				 " + this.username +
			"\n\tGRC Object (op_object):				" + this.object +
			"\n\tQuery (op_query):					  " + this.query +
			"\n\tParent Object Type (op_parentType):	" + this.parentType +
			"\n\tParent Object Location (op_parentLoc): " + this.parentLoc +
			"\n\tDebug log (op_deBug):				  " + this.deBug +
			"\n\tURI Root (op_root):					" + this.root
		);

		if (mailSettings.smtpHost && mailSettings.smtpHost != "" && mailSettings.mailTo && mailSettings.mailTo != "") {
			system.setJavaProperty("mail.smtp.host", mailSettings.smtpHost);
			system.setJavaProperty("mail.smtp.port", mailSettings.smtpPort);

			//TEST:
			//sendEmailNotification("This is a test email from the OP Connector.");
		}
	},

	getDefaultPrimaryParentObjectId: function() {
		if (!this.defaultPrimaryParentObjectId) {
			var msg;

			var defaultParentObjectType = this.getParentObjectType(this.parentType);

			if (defaultParentObjectType !== null) {
				this.defaultPrimaryParentObjectId = this.getParentObjectIdFromTypeAndLoc(this.parentType, this.parentLoc);
				if (this.defaultPrimaryParentObjectId === null) {
					msg = "The Parent Object Location property (op_parentLoc='" + this.parentLoc +
						"') from the properties file is not valid. Verify that op_parentType '" +
						this.parentType + "' is a legitimate parent type for object '" + this.object +
						"' and that the specified parent location is correct.";
					logmsg("WARN", msg);
					sendEmailNotification(msg);
				}
			} else {
				msg = "The Parent Type property (op_parentType='" + this.parentType + "') from the " +
					"properties file is not valid.";
				logmsg("WARN", msg);
				sendEmailNotification(msg);
			}

			if (this.defaultPrimaryParentObjectId === null) {
				msg = "The default primaryParentId derived from the Parent Type property " +
					"(op_parentType) and the Parent Location property (op_parentLoc) " +
					"from the properties file is not valid. " +
					"Unable to establish a default primaryParentId for this assembly line run.";
				logmsg("WARN", msg);
				sendEmailNotification(msg);

				this.defaultPrimaryParentObjectId = "not_found";
			}
		}

		return this.defaultPrimaryParentObjectId === "not_found" ? null : this.defaultPrimaryParentObjectId;
	},

	setCurrent: function(entry) {
		this.current = entry;
	},

	getObjectType: function(entryOrType) {
		if (typeof entryOrType === "undefined") {
			entryOrType = params.object;
		}
		var objectType = null;

		if (entryOrType instanceof com.ibm.di.entry.Entry) {
			objectType = entry.getString("$grcObjectType");
			if (objectType == null) {
				objectType = entry.getString("objectType");
			}
			if (objectType == null) {
				typeAttVal = entry.getString("typeDefinitionId");
				if (typeAttVal !== null) {
					objectType = params.getTypeById(typeAttVal);
				}
			}
		} else
		if (typeof entryOrType == "string") {
			if (system.isValidInt(String(entryOrType))) {
				objectType = params.getTypeById(entryOrType);
			} else {
				objectType = String(entryOrType)
			}
		}

		//if (typeof objectType == "string" && objectType.toLowerCase().startsWith("file")) {
		//	objectType = 4; // EH hardcoding 4 for file type (attachment)
		//}

		if (objectType == null || objectType.trim().length == 0) {
			objectType = params.object;
		}

		if (objectType.toLowerCase().startsWith("file")) {
			objectType = "SOXDocument";
		}

		return objectType;
	},

	getCachedTemplate: function(objectType) {
		var key = objectType.trim().toLowerCase();
		return this.templates.get(key) || this.properties.get("OP_TMPL_" + key);
	},

	setCachedTemplate: function(objectType, template) {
		var key = objectType.trim().toLowerCase();
		this.templates[key] = template;
		this.properties.put("OP_TMPL_" + key, template);
	},

	typeToTemplate: function(fieldDefObj, objectType) {
		//fieldDefs = fieldDefObj.fieldDefinitions.fieldDefinition;
		var fieldDefs = this.getFieldDefinitions(fieldDefObj.name);

		var template = {
			fields: {
				field: []
			}
		};

		var fields = template.fields.field;

		//var fieldNames = fieldDefs.keySet().toArray();
		for (var fieldName in fieldDefs) {
			var fieldDef = fieldDefs.get(fieldName);
			if (typeof fieldDef == "object" && fieldDef.id) {
				var field = {
					id: fieldDef.id,
					name: fieldDef.name,
					dataType: fieldDef.dataType
				};
				if (field.dataType == "ENUM_TYPE") {
					field.enumValue = fieldDef.enumValues.enumValue[0];
				}
				fields.push(field);
			}
		}

		return template;
	},

	getTemplate: function(entryOrType) {
		var templateObj = null;

		if (this.templates == null) {
			this.templates = new java.util.HashMap();
		}

		var objectType = this.getObjectType(entryOrType);
		var objectDef = this.getTypeByName(objectType);
		var objectId = objectDef.id;

		var template = this.getCachedTemplate(objectType);

		if (template == null) {
			template = new java.util.HashMap();

			if (String(objectId) == "4") {
				templateObj = this.typeToTemplate(objectDef, objectType);
			} else {
			if (this.deBug) logmsg("DEBUG", "Retrieving template for " + objectType);
				try {
// // _timer.start("OpenPages Connector - getTemplate()" );
					templateObj = makeRequest({
						url: "/contents/template?typeId=" + objectId,
						where: "params.getTemplate"
					});
				} catch (ex) {
					//templateObj = null;   EH - trying to build template from objectDef
					//if (this.deBug) logmsg("DEBUG", "Exception occurred; details:\n" + ex);
					templateObj = this.typeToTemplate(objectDef, objectType);
				}
// // _timer.stop("OpenPages Connector - getTemplate()" );
			}

			if (templateObj == null || templateObj.length == 0) {
				throwException(message["No template found for GRC object type"] + ": " + objectType);
				return null;
			}

			var fds = templateObj.fields.field;
			for (var i = 0; fds != null && i < fds.length; i++) {
				var fd = fds[i];
				template.put(fd.name.trim().toLowerCase(), fd);
			}

			template.put("$grcObjectType", objectType);

			this.setCachedTemplate(objectType, template);
		}

		return template;
	},

	getFieldDefinition: function(objectType, fieldName) {
		if (!fieldName) {
			fieldName = objectType;
			objectType = this.object;
		}
		var fieldDefs = this.getFieldDefinitions(objectType);
		return fieldDefs.get(fieldName.toLowerCase().trim());
	},

	getFieldDefinitions: function(entryOrType) {
		var schema = null;

		if (typeof entryOrType === "undefined") {
			entryOrType = params.object;
		}

		if (this.fieldDefinitions == null) {
			this.fieldDefinitions = new java.util.HashMap();
		}

		var objectType = this.getObjectType(entryOrType);
		var fieldDefs = this.getCachedFieldDefinition(objectType);

		if (fieldDefs == null) {
			fieldDefs = new java.util.HashMap();

			if (this.deBug) logmsg("DEBUG", "Retrieving field definitions for " + objectType);
			try {
// _timer.start("OpenPages Connector - getFieldDefinitions()" );
				schema = makeRequest({
					url: "/types/" + objectType,
					where: "params.getFieldDefinitions"
				});
			} catch (ex) {
				schema = null;
				if (this.deBug) logmsg("DEBUG", "Exception occurred; details:\n" + ex);
			}
// _timer.stop("OpenPages Connector - getFieldDefinitions()" );

			if (schema == null || schema.fieldDefinitions == null) {
				throwException(message["No field definitions returned for GRC object type"] + ": " +
					objectType + "  RESPONSE: " + toJson(schema) +
					". A valid op_object must be specified; aborting assembly line run.");
				return null;
			}

			var fds = schema.fieldDefinitions.fieldDefinition;
			for (var i = 0; fds != null && i < fds.length; i++) {
				var fd = fds[i];
				fieldDefs.put(fd.name.trim().toLowerCase(), fd);
			}

			fieldDefs.put("$grcObjectType", objectType);

			this.setCachedFieldDefinition(objectType, fieldDefs);
		}

		return fieldDefs;
	},

	getCachedFieldDefinition: function(objectType) {
		if (!this.fieldDefinitions) {
			this.fieldDefinitions = new java.util.HashMap();
			return null;
		}

		if (objectType.toLowerCase().startsWith("file")) {
			objectType = "SOXDocument";
		}
		var key = objectType.trim().toLowerCase();
		var fieldDefs = this.fieldDefinitions.get(key);
		return fieldDefs || this.properties.get("OP_FIELDDEF_" + key);
	},


	setCachedFieldDefinition: function(objectType, fieldDef) {
		var key = objectType.trim().toLowerCase();
		this.fieldDefinitions.put(key, fieldDef);
		this.properties.put("OP_FIELDDEF_" + key, fieldDef);
	},

	getTypeById: function(id) {
		var ids = this.getTypesById(id);
		return ids.get(id);
	},

	getTypeByName: function(type) {
		var types = this.getTypesByName(type);
		if (type.toLowerCase().startsWith("file")) {
			return 4; // EH hardcoding type 4 here for file (attachement)
		}
		return types.get(type);
	},

	getTypesByName: function() {
		if (this.typesByName != null) {
			return this.typesByName;
		}

		this.getTypesById();
		return this.typesByName;
	},

	getCachedTypes: function() {
		if (!this.typesById) {
			this.typesById = this.properties.get("OPTypesByID");
			if (this.typesById) {
				//				this.typesByName = java.lang.System.getProperties().get("OPTypesByName");
				this.typesByName = this.properties.get("OPTypesByName");
			}
		}

		return this.typesById;
	},

	setCachedTypes: function(typesById, typesByName) {
		this.typesById = typesById;
		this.typesByName = typesByName;
		this.properties.put("OPTypesByID", typesById);
		this.properties.put("OPTypesByName", typesByName);
	},

	getTypesById: function() {
		var reply = null;

		if (this.getCachedTypes()) {
			return this.typesById;
		}

		var typesById = new java.util.HashMap();
		var typesByName = new java.util.HashMap();

		try {
// _timer.start("OpenPages Connector - getTypesById()" );
			reply = makeRequest({
				"verb": "GET",
				"url": "/types",
				"ctype": "application/json",
				"where": "params.getTypesById"
			});
		} catch (ex) {
// _timer.stop("OpenPages Connector - getTypesById()" );
			throw ex;
			reply = null;
			if (this.deBug) logmsg("DEBUG", "Exception occurred; details:\n" + ex);
		}
// _timer.stop("OpenPages Connector - getTypesById()" );

		if (reply == null || typeof reply.length === "undefined" || typeof reply.length == 0) {
			throwException(message["No types returned by OpenPages"] + " RESPONSE: - " +
				toJson(reply) +
				".\nEnsure that the OpenPages server is running and that the op_url, op_root, " +
				"op_username and op_conn_password properties are valid.");
		}

		for (var i = 0; i < reply.length; i++) {
			typesById.put(reply[i].id, reply[i]);
			typesByName.put(reply[i].name, reply[i]);
		}

		this.setCachedTypes(typesById, typesByName);

		return this.typesById;
	},

	getCachedObjectDetails: function(objectType) {
		return this.typeDetailsByName && this.typeDetailsByName.get(objectType);
	},

	setCachedObjectDetails: function(objectType, details) {
		if (!this.typeDetailsByName) {
			this.typeDetailsByName = new java.util.HashMap();
		}

		this.typeDetailsByName.put(objectType, details);
	},

	// Perform a lookup of the specified parent object type to verify that it exists.
	// Return the parent object type (as JSON), or null if the type does not exist.
	getParentObjectType: function(ptype) {
		var reply = null;

		if (!ptype || ptype === "") {
			logmsg("INFO", "No value specified for parent object type.");
			return null;
		}

		ptype = ptype.trim();

		var parentObjectTypeAsJson = this.getCachedObjectDetails(ptype);
		if (parentObjectTypeAsJson) {
			return parentObjectTypeAsJson;
		}

		if (this.deBug) logmsg("DEBUG", "Retrieving definition for parent object type " + ptype);
		try {
// _timer.start("OpenPages Connector - getParentObjectType()" );
			reply = makeRequest({
				url: "/types/" + ptype,
				where: "params.getParentObjectType"
			});

			if (reply !== null && reply.fieldDefinitions !== null) {
				parentObjectTypeAsJson = toJson(reply);

				this.setCachedObjectDetails(ptype, parentObjectTypeAsJson);
			}
		} catch (ex) {
			logmsg("WARN", "Non-fatal exception occurred while retrieving parent object type '" + ptype +
				"'; details:\n" + ex);
		}
// _timer.stop("OpenPages Connector - getParentObjectType()" );

		return parentObjectTypeAsJson;
	},

	// Given the parent type, perform a lookup to verify that it exists. Return the
	// parent object Id, or null if it does not exist. This method assumes that the
	// ptype parameter has been validated by the getParentType() function.
	getParentObjectIdFromTypeAndLoc: function(ptype, ploc) {
		var reply = null;
		var parentObjectId = null;

		if (!ptype || ptype === "") {
			logmsg("INFO", "No value specified for parent object type.");
			return null;
		}

		if (!ploc || ploc === "") {
			logmsg("INFO", "No value specified for parent object location.");
			return null;
		}

		ptype = ptype.trim();
		ploc = ploc.trim();
		ploc = this.fixPath(ploc); // ensures that the location starts with a '/'

		// Search for the parent object instance of the given ptype at the specified location.
		// There should be one and only one match if the provided location is correct.
		var queryUrl = "query?q=SELECT * FROM [" + ptype + "] WHERE [Location] LIKE '" + ploc + "'";
		if (this.deBug) logmsg("DEBUG", "Retrieving parent object with relative location: " + ploc);

		try {
// _timer.start("OpenPages Connector - getParentObjectIdFromTypeAndLoc()" );
			reply = makeRequest({
				url: queryUrl,
				where: "params.getParentObjectIdFromTypeAndLoc"
			});
			if (reply !== null && typeof reply.rows !== "undefined" && reply.rows.length === 1) {
				if (isPrimaryParentIdValid(reply.rows[0].fields.field[0].value)) {
					parentObjectId = reply.rows[0].fields.field[0].value;
				}
			}
		} catch (ex) {
			if (this.deBug) logmsg("DEBUG", "Exception occurred; details:\n" + ex);
		}
// _timer.stop("OpenPages Connector - getParentObjectIdFromTypeAndLoc()" );

		return parentObjectId;
	},

	getDefaultCurrencyIsoCode: function() {
		if (this.defaultCurrencyIsoCode) {
			return this.defaultCurrencyIsoCode;
		}

		var isoCode = this.properties.get("OPDefaultCurrencyIsoCode");
		if (isoCode) {
			this.defaultCurrencyIsoCode = isoCode;
			return isoCode;
		}

		var reply = null;
		isoCode = "USD";

		if (this.deBug) {
			logmsg("DEBUG", "Retrieving default (base) currency ISO code...");
		}

		try {
			reply = makeRequest({
				url: "/configuration/currencies/base",
				where: "this.getDefaultCurrencyIsoCode"
			});

			if (reply !== null && reply.isoCode !== null) {
				isoCode = reply.isoCode;
			}
		} catch (ex) {
			logmsg("WARN",
				"Non-fatal exception occurred while retrieving base currency ISO code;" +
				" using 'USD'. Exception details:\n" + ex);
		}

		this.defaultCurrencyIsoCode = isoCode;
		this.properties.put("OPDefaultCurrencyIsoCode", isoCode);

		return isoCode;
	},

	getLargeStringMaxValue: function() {
		if (this.largeStringMaxSize) {
			return this.largeStringMaxSize;
		}

		var largeStringMaxSize = this.properties.get("OPLargeStringMaxSize");
		if (largeStringMaxSize) {
			this.largeStringMaxSize = largeStringMaxSize;
			return largeStringMaxSize;
		}

		var reply = null;
		var doubleVal = 256000;

		if (this.deBug) logmsg("DEBUG", "Retrieving Large Text maximum value from OP registry...");
		// do a GET of this: "configuration/settings/%2FOpenPages%2FPlatform%2FRepository%2FResource%2FLarge Text%2FMaximum Size"
		try {
			reply = makeRequest({
				url: "configuration/settings/%2FOpenPages%2FPlatform%2FRepository%2FResource%2FLarge Text%2FMaximum Size",
				where: "params.getLargeStringMaxValue"
			});

			if (reply != null && reply.value != null) {
				largeStringMaxSize = reply.value;

				try {
					doubleVal = java.lang.Double.parseDouble(largeStringMaxSize);
				} catch (ex) {
					logmsg("WARN", "Unable to convert Large String Maximum Value of (" + largeStringMaxSize +
						") into a number; using hard-coded value of 256000.");
					doubleVal = 256000;
				}
			} else {
				logmsg("WARN", "No response on attempt to retrieve Large String Maximum Value registry setting;" +
					" using hard-coded value of 256000.");
			}
		} catch (ex) {
			logmsg("WARN", "Non-fatal exception occurred while retrieving Large String Maximum Value registry setting;" +
				" using hard-coded value of 256000. Exception details:\n" + ex);
		}

		this.largeStringMaxSize = doubleVal;
		this.properties.put("OPLargeStringMaxSize", doubleVal);

		return doubleVal;
	}
};

// result set handler - works similar to an Iterator
var resultSet = {
	set: new java.util.ArrayList(),
	index: 0,
	nextUrl: null,
	objectType: null,

	add: function(jobj) {
		this.set.add(jobj);
	},

	size: function() {
		return this.set.size();
	},

	clear: function() {
		this.set.clear();
		this.index = 0;
	},

	hasNext: function() {
		return (this.set !== null && (this.index < this.set.size() || this.nextUrl != null));
	},

	next: function() {
		if (this.set === null) {
			return null;
		} else {
			//if no results AND no next link, end of list
			if (this.index >= this.set.size() && this.nextUrl == null) {
				return null;
			}
			//else if no results but have next link, get result set
			else if (this.index >= this.set.size() && this.nextUrl != null) {
				this.getResultSet({
					url: "/" + this.nextUrl
				});
			}

			//return next entry
			var n = this.set.get(this.index);
			if (n == null) {
				return null;
			}
			return GrcObjectToEntry(this.set.get(this.index++));
		}
	},


	executeGrcObjectQuery: function(queryPath, ignoreCache) {
// _timer.start("OpenPages Connector - executeGrcObjectQuery()" );
		var reply = this.makeRequest({
			ignoreCache: ignoreCache,
			verb: "GET",
			ctype: "application/json;charset=utf-8",
			url: "/query?q=" + queryPath.replace(" ", "+") + "&caseInsensitive=true",
			where: "executeGrcObjectSetQuery"
		});
// _timer.stop("OpenPages Connector - executeGrcObjectQuery()" );
		return reply;
	},

	getResultSet: function(args) {
		var verb = args.verb || "GET"; // HTTP method, e.g. GET, POST, PUT, ...
		var url = args.url || ""; // url for the request. May be partial (only the path & query string params)
		// var body = args.body;	// HTTP body to be passed for the request
		var ctype = args.ctype || "application/json"; // Content-Type of the HTTP body
		var where = args.where || ""; // where this method is called from - for debugging purposes
		var reply = null;
		var query = args.query || "";

		if (query != "") {
			url = "/query?q=" + query.replace(" ", "+") + "&caseInsensitive=true";
		}

		this.clear();
		if (params.deBug) logmsg("DEBUG", "Issuing " + verb + " request to URL: " + url);

		try {
// _timer.start("OpenPages Connector - getResultSet()" );
			reply = makeRequest({
				verb: verb,
				url: url,
				ctype: ctype,
				where: where + "resultSet.getResultSet"
			});
		} catch (ex) {
			reply = null;
			logmsg("WARN", "Exception occurred while processing result set from REST request to OpenPages; continuing...");
			if (params.deBug) logmsg("DEBUG", "Exception occurred; details:\n" + ex);
		}
// _timer.stop("OpenPages Connector - getResultSet()" );

		var i;
		if (reply !== null) {
			if (typeof reply.rows !== "undefined") {
				var rows = reply.rows;
				for (i = 0; i < rows.length; i++) {
					this.add(rows[i]);
				}
			} else {
				this.add(reply);
			}

			// check for next link
			if (typeof reply.links !== "undefined") {
				this.nextUrl = null;
				for (i = 0; i < reply.links.length; i++) {
					if (reply.links[i].rel == "next") {
						this.nextUrl = reply.links[i].href;
					}
				}
			}
		}
	}
};

function ensureInitialized() {
	params.refresh();
	if (!initialized) {
		initializeConnector();
		selectConnectorEntries();
	}
}

// functions follow
function initializeConnector() {
	logmsg("INFO", "OpenPages Connector version: " + version);
	if (initialized) {
		terminate();
	}

	params.initialize();

	initialized = true;
}

function terminate() {
	initialized = false;
	params.getHttp().terminate();
}

function selectEntries() {
	ensureInitialized();
}

function selectConnectorEntries(args) {
	//if (!initialized) { notInitializedError(); }
	ensureInitialized();

	if (connector.getParam("object").toLowerCase().startsWith("file")) {
		return {};
	}

	var urlPath = "/query?q=";
	var selectClause, whereClause, query;
	var url;

	if (args) {
		urlPath = (args.urlPath) ? args.urlPath : urlPath;
		selectClause = args.selectClause;
		whereClause = args.whereClause;
	}

	if (!selectClause) {
		selectClause = "SELECT * from [" + params.object + "]";
		if (params.query && params.query.length > 0) {
			selectClause = params.query;
		}
	}

	url = urlPath;

	if (url.equalsIgnoreCase("/query?q=")) {
		query = selectClause;
		if (whereClause && query.indexOf(" WHERE ") < 0) {
			query += whereClause;
		}

		// EH Always add Resource Id to the list of fields returned - at least for the first object listed in the fields list
		query = addIdToQuery(query);

		//		url += java.net.URLEncoder.encode(query + "&caseInsensitive=true", "UTF-8");
		url += java.net.URLEncoder.encode(query, "UTF-8");
	}

	resultSet.getResultSet({
		verb: "GET",
		url: url,
		ctype: "application/json",
		where: "selectConnectorEntries"
	});

}

function addIdToQuery(query) {
	query = query.trim();
	var queryLC = query.toLowerCase();

	if (!queryLC.startsWith("select")) {
		return query;
	}

	var fromP = queryLC.indexOf(" from ");
	if (fromP < 0) {
		return query;
	}

	var attList = query.substring("select ".length, fromP).trim();
	var attListLC = attList.toLowerCase();

	if (attList == "*") {
		return query;
	}

	// Now determine which objects are being read based on the field list.
	// If required by args.needId then add .["Resource ID"] for first Object found

	// First first field specifier
	var p = attList.indexOf("].[");
	if (p < 0) {
		return query;
	}

	var objectName = attList.substring(1, p);

	var requiredAtt = "[" + objectName + "].[Resource ID]";
	if (attListLC.contains(requiredAtt.toLowerCase())) {
		return query;
	}

	attList += " " + requiredAtt + " as _UNIQUE_ID_";

	var newQuery = query.substring(0, "select ".length) +
		attList +
		query.substring(fromP);

	logmsg("DEBUG", "Adding " + requiredAtt) + " to query: " + newQuery;;
	return newQuery;
}

function getNextEntry() {
	ensureInitialized();

	var e = resultSet.next();
	if (e !== null) {
		entry.merge(e);
		result.setStatus(1);
	} else {
		result.setStatus(0);
	}

	return entry;
}

function queryReply() {
	var operation = entry.getString("operation") || "* not specified *";
	//entry.removeAllAttributes();

	switch (operation) {
		case "state":
			entry.removeAllAttributes();
			if (!initialized) {
				entry.state = "not initialized";
			} else {
				entry.state = "initialized";
			}
			break;
		case "get_conn":
			entry.removeAllAttributes();
			if (lastConn != null) {
				entry.merge(lastConn);
			}
			break;
		case "set_current":
			params.setCurrent(entry.getObject("current"));
			break;
		case "get_types":
			entry.removeAllAttributes();
			ensureInitialized();
			params.getTypesById();
			var types = {
				typesById: params.typesById,
				typesByName: params.typesByName
			}
			entry.types = types;
			break;
		case "get_fielddefinitions":
			ensureInitialized();
			params.getFieldDefinitions(entry);
			var fieldDefinitions = params.fieldDefinitions
			entry.removeAllAttributes();
			entry.field_definitions = fieldDefinitions;
			break;
		case "select":
			entry.removeAllAttributes();
			ensureInitialized();
			params.refresh();
			params.apply();
			selectConnectorEntries();
			break;
		default:
			throw "Cannot perform queryReply() operation: " + operation;
	}
}

function putEntry() {
	ensureInitialized();

	var grcObj = entryToGrcObject(entry, true /* creating new */ );
	var primaryParentId = "<undefined>";
	var objName = (grcObj.name == null || grcObj.name === "" ? "<no name provided>" : grcObj.name);

	if (params.deBug) logmsg("--->\n" + makeJson(grcObj));

	// Only create a new object if a valid primary parent Id is present
	if (typeof grcObj.primaryParentId === "undefined" || grcObj.primaryParentId === null ||
		params.invalidPrimaryParentIds.contains(grcObj.primaryParentId)) {
		if (typeof grcObj.primaryParentId !== "undefined" && grcObj.primaryParentId !== null) {
			primaryParentId = grcObj.primaryParentId;
		}
		logmsg("WARN", "A null or invalid primaryParentId was detected; not creating a new " +
			params.object + " object.");
	} else {
// _timer.start("OpenPages Connector - putEntry()" );
		if (entry.getString("$grcObjectType") == "SOXDocument") {
			logmsg("Adding SOXDocument: " + grcObj.name);
		}
		var response = makeRequest({
			"verb": "POST",
			"url": "/contents",
			"ctype": "application/json",
			"where": "putEntry",
			"body": makeJson(grcObj)
		});
// _timer.stop("OpenPages Connector - putEntry()" );

		// Now return the new Resource ID in the conn Entry by setting lastConn
		var fields = response.fields.field;
		for (var i = 0; i < fields.length; i++) {
			var field = fields[i];
			if (field.name == "Resource ID") {
				var newID = system.toInt(field.value)
				entry["Resource ID"] = newID;
			} else {
				entry[field.name] = field.value;
			}
		}
		lastConn = entry;
		logmsg("INFO", "Added new " + params.object + " named '" + entry.name + "'" + " with id: " + entry["Resource ID"]);
	}
}

function modEntry() {
	ensureInitialized();

	var grcObj = entryToGrcObject(entry, false /* modifying existing */ );
	var primaryParentId = "<undefined>";
	var objName = (grcObj.name == null || grcObj.name === "" ? "<no name provided>" : grcObj.name);
	var i;

	if (params.deBug) logmsg("--->\n" + makeJson(grcObj));

	// This if-clause only works for ucf_integration. The function is to modify and correct Requirements' primary
	// parent back to the Business Entity after adding other Sub-mandate parents (Parent-child association);
	// And collect a set of parents' attribute values and map them to Requirements' fields. Aug, 2016
	if (params.object == "Requirement") {
// _timer.start("OpenPages Connector - modEntry()" );
		var preReply = makeRequest({
			"verb": "GET",
			"url": "/contents/" + params.current.getString("Resource ID"),
			"ctype": "application/json"
		});
// _timer.stop("OpenPages Connector - modEntry()" );

		var preserveFields = ["UCF-Req:Supporting Requirements", "UCF-Req:Associated Mandates", "UCF-Req:Guidance"];
		var existingField = preReply.fields.field;

		var tempSuppReq = null;
		var tempADCommonName = null;
		var tempGuidance = null;

		for (i = 0; i < existingField.length; i++) {
			if (existingField[i].name == preserveFields[0]) {
				tempSuppReq = existingField[i].value
			} else if (existingField[i].name == preserveFields[1]) {
				tempADCommonName = existingField[i].value
			} else if (existingField[i].name == preserveFields[2]) {
				tempGuidance = existingField[i].value
			}

			var newField = grcObj.fields.field;

			for (i = 0; i < newField.length; i++) {
				if (newField[i].name == preserveFields[0]) {
					newField[i].value = (tempSuppReq.contains(newField[i].value)) ? tempSuppReq : tempSuppReq + newField[i].value
				} else if (newField[i].name == preserveFields[1]) {
					newField[i].value = (tempADCommonName.contains(newField[i].value)) ? tempADCommonName : tempADCommonName + newField[i].value
				} else if (newField[i].name == preserveFields[2]) {
					newField[i].value = (tempGuidance.contains(newField[i].value)) ? tempGuidance : tempGuidance + newField[i].value
				}
			}
		}
	}

	if (params.object == "Requirement") {
		feedProps.recoverPrimaryParentIdFromFeed(entry);
		grcObj.primaryParentId = feedProps.derivedPrimaryParentId;
		setGrcPrimaryParentIdFromFeedPropsOrDefault(grcObj, "primaryParentId");

	} else {
		if (typeof grcObj.primaryParentId !== "undefined" && grcObj.primaryParentId !== null) {
			primaryParentId = grcObj.primaryParentId;
		}
		logmsg("WARN", "A null or invalid primaryParentId was detected");
	}

// _timer.start("OpenPages Connector - modEntry()" );
	response = makeRequest({
		"verb": "PUT",
		"url": "/contents/" + params.current.getString("Resource ID"),
		"ctype": "application/json",
		"where": "modEntry",
		"body": makeJson(grcObj)
	});
// _timer.stop("OpenPages Connector - modEntry()" );

	logmsg("INFO", "Modified existing " + params.object + " named '" + entry.name + "'" + " with id: " + entry["Resource ID"]);

	// Now return the new Resource ID in the conn Entry by setting lastConn
	var fields = response.fields.field;
	for (var i = 0; i < fields.length; i++) {
		var field = fields[i];
		if (field.name == "Resource ID") {
			var newID = system.toInt(field.value)
			entry["Resource ID"] = newID;
		} else {
			entry[field.name] = field.value;
		}
	}
	lastConn = entry;
}

function findEntry() {
	ensureInitialized();

	var res = grcWhereClause(search);

	params.setCurrent(null);
	feedProps.clear(); // clear out the feed props for each new entry

	selectConnectorEntries({
		urlPath: res.path,
		whereClause: res.where,
		selectClause: res.query
	});

	if (resultSet.size() == 1) {
		var e = resultSet.next();
		entry.merge(e);
		result.setStatus(1);
		params.setCurrent(e);
	} else
	if (resultSet.size() > 1) {
		while (resultSet.hasNext()) {
			connector.addFindEntry(resultSet.next());
		}
		result.setStatus(1);
	} else {
		result.setStatus(0);
	}
}

function deleteEntry() {
	ensureInitialized();

	try {
		makeRequest({
			"verb": "DELETE",
			"url": "/contents/" + params.current.getString("Resource ID"),
			"ctype": "application/json",
			"where": "deleteEntry"
		});
	} catch (ex) {
		logmsg("ERROR", "Unable to delete existing object; an exception occured in the " +
			"OpenPages server: " + ex);
	}
}

function querySchema(objectType) {
	ensureInitialized();

	if (typeof objectType === "undefined" || objectType == null) {
		objectType = params.object;
	}

	if (objectType.toLowerCase().startsWith("file")) { // EH hardcoding for "file"
		var fields = [{
				name: "name",
				type: "String (f.ex. document.docx)"
			},
			{
				name: "extension",
				type: "String (f.ex. docx)"
			},
			{
				name: "type",
				type: "String (f.ex. word)"
			},
			{
				name: "description",
				type: "String"
			},
			{
				name: "content",
				type: "String or Byte Array"
			},
			{
				name: "primaryParentId",
				type: "Integer"
			}
		];
		for (var i = 0; i < fields.length; i++) {
			var e = system.newEntry();
			var field = fields[i];
			e.addAttributeValue("name", field.name);
			e.addAttributeValue("syntax", field.type);
			list.add(e);
		}
	} else {
		var fieldDefs = params.getFieldDefinitions(objectType);
		var keys = fieldDefs.keySet().toArray();
		java.util.Arrays.sort(keys);

		for (var key in keys) {
			list.add(newSchemaEntry(key, fieldDefs));
		}

		for (var i = grcSystemFieldNames.length - 1; i > 0; i--) {
			list.add(newSchemaEntry(grcSystemFieldNames[i], grcSystemFieldTypes[i]));
		}

		list.add(newSchemaEntry("$grcObject", "JavaScript Object"));
		list.add(newSchemaEntry("$grcObjectType", "String"));
		list.add(newSchemaEntry("$grcObjectJSON", "JSON"));
	}

	result.setStatus(1);
}

function newSchemaEntry(key, fieldDefs) {
	var e = new com.ibm.di.entry.Entry();

	if (typeof fieldDefs === "string" || typeof fieldDefs[key] === "string") {
		e.addAttributeValue("name", key);
		e.addAttributeValue("syntax", fieldDefs);
	} else {
		e.addAttributeValue("name", fieldDefs[key].name);
		e.addAttributeValue("syntax", getSchemaType(fieldDefs, key));
	}

	return e;
}

function grcWhereClause(search) {
	var where = "";
	var path = null;
	var query = null;
	var critList = search.getCriteria();
	var type = params.object;
	var boolOp = "AND";
	if (search.getType() == search.SEARCH_OR) {
		boolOp = "OR";
	}

	for (var crit in critList) {
		var fieldDef = params.getFieldDefinition(crit.name);
		if (fieldDef == null) {
			throw "The link criteria of the OpenPages connector specifies a field name (" + crit.name + ") that does not belong " +
				"to the chosen OpenPages object type (" + type + ").  Either the link criteria or the chosen OpenPages object " +
				"has changed and is out of sync with the other.  Check both settings and try again.";
		}

		if ("Resource ID".equalsIgnoreCase(fieldDef.name) &&
			crit.match == search.EXACT &&
			search.getType() == search.SEARCH_AND) {
			path = "contents/" + crit.value;
			query = null;
			where = null;
			break;
		}
		where += (where.length == 0) ? "" : " " + boolOp + " ";
		where += "[" + type + "].[" + fieldDef.name + "]";
		where += grcClause(crit, fieldDef);
	}

	return {
		where: " WHERE " + where,
		path: path,
		query: query
	};
}

function grcClause(criteria, fieldDef) {
	var match = criteria.match;
	var value = criteria.value;

	if (!"INTEGER_TYPE".equals(fieldDef.dataType) &&
		!"CURRENCY_TYPE".equals(fieldDef.dataType)) {
		value = "'" + criteria.value + "'";
	}

	if (match == com.ibm.di.server.SearchCriteria.EXACT ||
		match == com.ibm.di.server.SearchCriteria.EXCACT) {
		return " = " + value;
	} else
	if (match == com.ibm.di.server.SearchCriteria.FINAL_STRING) {
		return " LIKE '%" + criteria.value + "'"
	} else
	if (match == com.ibm.di.server.SearchCriteria.GREATER_THAN) {
		return " > " + value;
	} else
	if (match == com.ibm.di.server.SearchCriteria.GREATER_THAN_OR_EQUAL) {
		return " >= " + value;
	} else
	if (match == com.ibm.di.server.SearchCriteria.INITIAL_STRING) {
		return " LIKE '" + criteria.value + "%'"
	} else
	if (match == com.ibm.di.server.SearchCriteria.LESS_THAN) {
		return " < " + value;
	} else
	if (match == com.ibm.di.server.SearchCriteria.LESS_THAN_OR_EQUAL) {
		return " <= " + value;
	} else
	if (match == com.ibm.di.server.SearchCriteria.SUBSTRING) {
		return " LIKE '%" + criteria.value + "%'"
	} else {
		throw "Unknown match type: " + match;
	}
}

function getSchemaType(fieldDefs, key) {
	var type = "?undefined " + key + "?";
	var fieldDef = fieldDefs[key];
	if (typeof fieldDef !== "undefined" || fieldDef != null) {
		var fieldType = schemaType[fieldDef.dataType];
		if (fieldType != null) {
			type = fieldType;
			if ("true".equalsIgnoreCase(fieldDef.readOnly)) {
				type += " (read only)";
			} else
			if ("true".equalsIgnoreCase(fieldDef.required)) {
				type += " (required)";
			}
		}
	}
	return type;
}

function fixTypeObj(ext) {
	ext = ext || "txt";
	switch (ext) {
		case "xls":
			return {
				type: "application/vnd.ms-excel", id: 46, ext: ext
			};
		case "xlsx":
			return {
				type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", id: 53, ext: ext
			};
		case "docx":
			return {
				type: "application/vnd.openxmlformats-officedocument.wordprocessingml.document", id: 73, ext: ext
			};
		case "rtf":
			return {
				type: "text/richtext", id: 13, ext: ext
			};
		case "txt":
			return {
				type: "text/plain", id: 9, ext: ext
			};
		case "html":
			return {
				type: "text/html", id: 1, ext: ext
			};
		case "htm":
			return {
				type: "text/html", id: 2, ext: ext
			};
		case "pdf":
			return {
				type: "application/pdf", id: 44, ext: ext
			};
		case "ppt":
			return {
				type: "application/vnd.ms-powerpoint", id: 56, ext: ext
			};
		case "doc":
			return {
				type: "application/msword", id: 70, ext: ext
			};
		default:
			return {
				type: "application/msword", id: 70, ext: ext
			};
	}
}

// Funcion to add file details to a SOXDocument
function addFileDetails(grcObj, entry) {
	var name = entry.getString("name");
	var p = name.lastIndexOf(".");
	var ext = entry.getString("extension") || ((p > 0) ? name.substring(p + 1) : "txt");
	if (p > 0) {
		name = name.substring(0, p);
	}

	var type = entry.getString("type");

	var encode = true;
	typeobj = fixTypeObj(ext);

	var content = entry.getObject("content");
	if (encode) {
		if (typeof content != "[B") { // If not a byte array, then the request is wrong
			var errormsg = "The content Attribute must be a Byte Array for this type of file";
			logmsg("ERROR", "Error writing file object - " + errormsg);
			throw errormsg;
		}
		content = system.base64Encode(content);
	}

	grcObj.contentDefinition = {
		attribute: {
			type: typeobj.type
		},
		children: content
	};
	grcObj.fileTypeDefinition = {
		id: typeobj.id,
		mimeType: typeobj.type,
		fileExtension: typeobj.ext
	};

	return grcObj;
}

// Convert an Entry into a grc Object ready to be passed to the OpenPages REST API
function entryToGrcObject(entry, creatingNew) {
	if (typeof creatingNew === "undefined") {
		creatingNew = true;
	}

	var i, length;
	var grcObj = entry.getObject("$grcObject");

	// Place holder for future use (ucf_integration_control)
	var grcObjType = entry.getObject("$grcObjectType");
	if (grcObjType != null) {
		params.object = grcObjType;
		var thisType = params.getTypeByName(grcObjType);
		if (thisType != null) {
			params.objectId = thisType.id;
		}
	}

	params.getObjectType(entry);

	if (grcObj == null || typeof grcObj !== "object") {
		var readOnly = [];
		var required = [];

		if (params.object.toLowerCase().startsWith("file") ||
			params.object.equalsIgnoreCase("SOXDocument")) {
			var mandatoryFields = ["name", "content"];
			for (var i = 0; i < mandatoryFields.length; i++) {
				if (entry[mandatoryFields[i]] == null) {
					required.push(mandatoryFields[i]);
				}
			}

			if (required.length > 0) {
				var errmsg = "Required Attributes are missing from the output map: " + required.join(", ");
				logmsg("ERROR", errmsg);
				throw errmsg;
			} else {
				var name = entry.getString("Name") || "* Name not set *";
				var ext = entry.getString("extension") || "txt";

				var type = entry.getString("type");

				var encode = true;
				typeobj = fixTypeObj(ext);

				var content = entry.getObject("content");
				if (encode) {
					if (typeof content != "[B") { // If not a byte array, then the request is wrong
						var errormsg = "The content Attribute must be a Byte Array for this type of file";
						logmsg("ERROR", "Error writing file object - " + errormsg);
						throw errormsg;
					}
					content = system.base64Encode(content);
				}

				grcObj = {
					name: name,
					contentDefinition: {
						attribute: {
							type: typeobj.type
						},
						children: content
					},
					fileTypeDefinition: {
						id: typeobj.id,
						mimeType: typeobj.type,
						fileExtension: typeobj.ext
					},
					fields: {
						field: []
					},
					typeDefinitionId: "4"
				};

				var optionalFields = ["description", "primaryParentId"];
				for (var i = 0; i < optionalFields.length; i++) {
					var fieldName = optionalFields[i];
					if (entry[fieldName] != null) {
						grcObj[fieldName] = entry.getObject(fieldName);
					}
				}
			}
		} else {
			grcObj = {
				fields: {
					field: []
				}
			};
		}

		// Continue build the grcObj

		var fieldDefs = params.getFieldDefinitions(entry);
		var templates = params.getTemplate(entry);

		var objectType = fieldDefs.get("$grcObjectType");

		grcObj.typeDefinitionId = params.getTypeByName(objectType).id;

		// It is possible that the system field value for primaryParentId may not be specified.
		// If it is it will be used. If it is not, there may be feed-provided values for
		// "parentType" and "parentLocation" that can be used to derive the primaryParentId.
		// Obtain the static (or dynamically derived) value of the primaryParentId from the
		// feed now so that addGrcSystemField() can use the proper value.
		feedProps.obtainPrimaryParentIdFromFeed(entry);

		for (i = 0, length = grcSystemFieldNames.length; i < length; i++) {
			addGrcSystemField(grcObj, grcSystemFieldNames[i], entry);
		}

		var keys = templates.keySet().toArray();
		java.util.Arrays.sort(keys);

		for (var key in keys) {
			if (key.startsWith("$")) {
				continue;
			}
			var fieldDef = fieldDefs.get(key);
			var att = entry.getAttribute(fieldDef.name);

			if (fieldDef.readOnly && att != null) {
				readOnly.push(fieldDef);
			} else
			if (fieldDef.required && att == null && creatingNew) {
				if (!fieldDef.readOnly) {
					required.push(fieldDef);
				}
			} else if (att !== null) {
				addGrcField(grcObj, att, fieldDef);
			}
		}

		var fields;
		if (required.length > 0) {
			fields = [];
			for (i = 0; i < required.length; i++) {
				fields.push(required[i].name);
			}
			throwException(message["The following fields are required"] + ": " + fields.join(", "));
		}

		if (readOnly.length > 0) {
			fields = "";
			for (i = 0; i < readOnly.length; i++) {
				fields += (fields.length == 0 ? "" : ", ") + readOnly[i].name;
			}
			logmsg("WARN", message["The following fields are readOnly and cannot be written"] + ": " + fields);
		}

		if (entry.primaryParentId) {
			grcObj.primaryParentId = entry.getObject("primaryParentId");
		}

		if (objectType.equalsIgnoreCase("SOXDocument")) {
			grcObj = addFileDetails(grcObj, entry);
		}
	}
	
	// Remove illegal characters from the .name property
	if (grcObj.name) {
		var illegalChars = ["/"];
		for (var i = 0; i < illegalChars.length; i++) {
			grcObj.name = grcObj.name.replaceAll(illegalChars[i], "_");
		}
	}

	return grcObj;
}

// This function is for use when setting an entry's primaryParentId
function setGrcPrimaryParentIdFromFeedPropsOrDefault(grcObj, name) {

	// If a valid primaryParentId was included in the feed for this entry then use it
	if (feedProps.staticPrimaryParentId !== null) {
		grcObj[name] = feedProps.staticPrimaryParentId;
		logmsg("INFO", "Using the static primaryParentId value '" + feedProps.staticPrimaryParentId +
			"' supplied in the feed.");
	}

	// otherwise if a primaryParentId was derived from the feed properties then use it
	else if (feedProps.derivedPrimaryParentId !== null) {
		grcObj[name] = feedProps.derivedPrimaryParentId;
		logmsg("INFO", "Using the primaryParentId value '" + feedProps.derivedPrimaryParentId +
			"' derived from the feed's parentType and parentLocation values.");
	}

	// otherwise use the default parent object ID (if any)
	else {
		var defaultPrimaryParentObjectId = params.getDefaultPrimaryParentObjectId();

		if (defaultPrimaryParentObjectId) {
			grcObj[name] = defaultPrimaryParentObjectId;

			logmsg("INFO", "A primaryParentId was not supplied in or derived from the feed; using " +
				"the default primaryParentId value '" + defaultPrimaryParentObjectId +
				"' derived from the op_parentType and op_parentLoc properties. ");
		} else {
			logmsg("WARN", "A primaryParentId was not supplied in or derived from the feed, " +
				"and a default primaryParentId is not defined.");
		}
	}
}

function addGrcSystemField(grcObj, name, entry) {
	var att = entry[name];

	// Special handling is required for the "typeDefinitionId" and "primaryParentId" system fields
	if (att == null) {
		if ("typeDefinitionId".equalsIgnoreCase(name)) {
			grcObj[name] = params.objectId || grcObj.typeDefinitionId;
		} else if ("primaryParentId".equalsIgnoreCase(name)) {
			setGrcPrimaryParentIdFromFeedPropsOrDefault(grcObj, name);
		}
	}

	// The attribute value is not null but special handling is needed for "primaryParentId"
	// (the primaryParentId to use is set up via feedProps.obtainPrimaryParentIdFromFeed)
	else if ("primaryParentId".equalsIgnoreCase(name)) {
		setGrcPrimaryParentIdFromFeedPropsOrDefault(grcObj, name);
	}

	// no special handling needed for this field, just set it
	else {
		grcObj[name] = att.getValue();
	}
}

function truncateStringForGrcField(stringValue, maxAllowedLength) {
	var truncatedStr = stringValue;
	if (stringValue.length >= maxAllowedLength) {
		truncatedStr = stringValue.substring(0, Math.min(stringValue.length(), maxAllowedLength - 5));
		if (stringValue.length >= maxAllowedLength - 4) {
			truncatedStr += "...";
		}
	}
	return truncatedStr;
}

function addGrcField(grcObj, att, fieldDef) {
	var grcField = {
		dataType: fieldDef.dataType,
		id: fieldDef.id,
		name: fieldDef.name
	};
	var inError = [];
	var attValue = null;
	var field = grcObj.fields.field;
	var addedValue = false;
	var message = "";
	var truncatedStr, eval;

	if (params.deBug) logmsg("DEBUG", "--> Attempting to add " + att.toString() + "   field: " + fieldDef.id);

	if (att !== null && att.size() > 0) {
		attValue = att.getValue(0);
	}

	if (attValue != null) {
		try {
			switch (fieldDef.dataType) {
				case "STRING_TYPE": // string length limited to 4000 chars
					truncatedStr = truncateStringForGrcField(attValue, 4000);
					grcField.value = truncatedStr;
					addedValue = true;
					break;
				case "MEDIUM_STRING_TYPE": // string length limited to 32000 chars
					truncatedStr = truncateStringForGrcField(attValue, 32000);
					grcField.value = truncatedStr;
					addedValue = true;
					grcField.dataType = "STRING_TYPE"; //nan -  OP server doesn't recognize MEDIUM_STRING_TYPE
					break;
				case "LARGE_STRING_TYPE": // string length limited to OP registry setting for largeStringMaxSize
					truncatedStr = truncateStringForGrcField(attValue, params.largeStringMaxSize);
					grcField.value = truncatedStr;
					addedValue = true;
					break;
				case "ID_TYPE":
				case "BOOLEAN_TYPE":
				case "FLOAT_TYPE":
					grcField.value = attValue;
					addedValue = true;
					break;
				case "INTEGER_TYPE":
					grcField.value = attValue;
					addedValue = true;
					break;
				case "ENUM_TYPE":
					eval = enumValue(attValue, fieldDef);
					if (eval != null) {
						grcField.enumValue = enumValue(attValue, fieldDef);
						addedValue = true;
					} else {
						message = "Attempt to add value of '" + attValue +
							"' to enumerated field definition '" + fieldDef.name +
							"' was not allowed to object type '" + params.object + "'." +
							" The assembly line mapping will need to be modified.";
						logmsg("WARN", message);
						sendEmailNotification(message);
					}
					break;
				case "MULTI_VALUE_ENUM":
					grcField.enumValue = [];
					for (var i = 0; i < att.size(); i++) {
						eval = enumValue(att.getValue(i), fieldDef);
						if (eval != null) {
							grcField.enumValue.push(eval);
							addedValue = true;
						} else {
							message = "Attempt to add value of '" + attValue +
								"' to multi-enumerated field definition '" + fieldDef.name +
								"' was not allowed to object type '" + params.object + "'." +
								" The assembly line mapping will need to be modified.";
							logmsg("WARN", message);
							sendEmailNotification(message);
						}
					}
					break;
				case "DATE_TYPE":
					var dateValue;
					if (attValue instanceof java.util.Date) {
						dateValue = attValue;
					} else {
						dateValue = parseDateValue(attValue);
					}
					if (dateValue !== null) {
						// "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" // works but TZ is not accurate

						// TDI 7.1.1 uses Java 6, so we cannot use format string "yyyy-MM-dd'T'HH:mm:ss.SSSXXX"
						// (which *is* supported in Java 7 and newer). So, we are using format string
						// "yyyy-MM-dd'T'HH:mm:ss.SSSZ" and are manually inserting the colon into place at the
						// end of the string in the 4 digits that follow the last "-" or "+" character, and
						// (if present) we remove the ':' directly in front of the 'T'.
						// Example: convert 2013-10-07T07:36:13.000-0400 to 2013-10-07T07:36:13.000-04:00
						// Example: convert 2013-10-07:T07:36:13.000-0400 to 2013-10-07T07:36:13.000-04:00

						var sdf = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
						var timeDate = sdf.format(dateValue);
						timeDate = timeDate.replace(":T", "T");

						var timeDateStr = new java.lang.String(timeDate);
						var insertColonPos = timeDateStr.length() - 2;
						var firstPart = timeDateStr.substring(0, insertColonPos);
						var lastPart = timeDateStr.substring(insertColonPos, timeDateStr.length());

						grcField.value = new java.lang.String(firstPart + ":" + lastPart);
						addedValue = true;
					}
					break;
				case "CURRENCY_TYPE":
					// Mapping format required for a currency value in the feed must follow this example:
					//	  "123.45|AUD"
					// If no ISO code is supplied then the OP Base ISO code is used.

					var valueStr = new java.lang.String(attValue.trim());
					if (valueStr == "") {
						break;
					}

					var separatorIndex = valueStr.indexOf("|");
					var amount = "";
					var doubleVal = null;
					var isoCode = "";

					// parse out the amount and the ISO code from the provided attValue string
					if (separatorIndex !== -1) {
						amount = valueStr.substring(0, separatorIndex).trim();
						isoCode = valueStr.substring(separatorIndex + 1).trim();
					} else {
						amount = valueStr.trim();
					}

					// ensure that the amount is a valid double value
					try {
						doubleVal = java.lang.Double.parseDouble(amount);
					} catch (ex) {
						logmsg("ERROR", "Detected missing or invalid amount '" + amount + "' in the value " +
							"specified from the feed for CURRENCY_TYPE field '" + fieldDef.name +
							"'. Skipping this currency value.");
						break;
					}

					// ensure that the ISO code is not empty
					if (separatorIndex === -1 || isoCode === null || isoCode === "") {
						isoCode = params.defaultCurrencyIsoCode;
						logmsg("WARN", "Detected missing or invalid ISO code in the value " +
							"specified from the feed for CURRENCY_TYPE field '" + fieldDef.name +
							"'. Using the OpenPages default ISO code of '" + isoCode + "'.");
					}

					grcField.baseAmount = amount;
					grcField.localAmount = amount;

					// keep track of this field's ISO code for use when creating the JSON for OP
					feedProps.currencyIsoCodes.putIfAbsent(fieldDef.id, isoCode);

					addedValue = true;
					break;
			}
		} catch (ex) {
			inError.push(message["Error creating GRC field"] + " - " + ex + " --> " + att.toString());
		}
	}

	if (inError.length > 0) {
		throwException(toJson(inError));
	}

	if (addedValue) {
		field[field.length] = grcField;
	}

	return grcField;
}

function enumValue(attValue, fieldDef) {
	var enumValues = fieldDef.enumValues.enumValue;
	if (attValue == null) {
		return null;
	}

	attValue = attValue.trim();
	for (var i = enumValues.length - 1; i >= 0; i--) {
		var thisValue = enumValues[i];
		if (attValue.equalsIgnoreCase(thisValue.name) ||
			attValue.equalsIgnoreCase(thisValue.localizedLabel ||
				attValue.equalsIgnoreCase(thisValue.index))) {
			return {
				index: thisValue.index,
				hidden: thisValue.hidden,
				name: thisValue.name,
				id: thisValue.id,
				localizedLabel: thisValue.localizedLabel
			};
		}
	}

	return null;
}

function parseDateValue(attValue) {
	if (typeof attValue === "undefined" || attValue == null) {
		return null;
	}

	var dt = system.parseDate(attValue, "EEE MMM dd HH:mm:ss z yyyy");

	if (dt == null) {
		dt = system.parseDate(attValue, ISOdateMask1);
	}
	if (dt == null) {
		dt = system.parseDate(attValue, ISOdateMask2);
	}
	if (dt == null) {
		try {
			var df = java.text.DateFormat.getDateInstance();
			dt = df.parse(attValue);
		} catch (ex) {
			dt = null;
		}
	}

	return dt;
}

// requests the client cert from the service and installs it into the SDI keystore
function getCertificate() {
	com.ibm.di.security.GetSSLCertificate.installCertificateFrom(params.url, 443);
}

// examine the reply from OpenPages for any errors returned
function verifyResponse(replyEntry, url) {
	var respCode = replyEntry.getString("http.responseCode");
	if (respCode == "404") {
		// ignore NOT FOUND
	} else
	if (!respCode.startsWith("2")) {
		if (replyEntry.getString("http.bodyAsString").contains("-60002")) { // querying invalid object type
			logmsg(replyEntry.getString("http.bodyAsString") + " - for url: " + url);
			return;
		}
		throwException(message["Error from"] +
			" OpenPages server - code: " + respCode +
			"  message: " + replyEntry.getString("http.responseMsg") +
			"\nURL: " + url +
			"\nHTTP Body returned: " + replyEntry.getString("http.bodyAsString"));
	}
}

// Replaces \/ with /
function fixBody(body) {
	return String(body).replace(/\\\//g, "/");
	//	return String(body).replace(/[a-zA-Z0-9_.-]+(\\\/)[a-zA-Z0-9_.-]+/g, "/");
}

// workhorse function that handles all comms with OpenPages. It accepts a single
// argument that is a Javascript object containing the properties set in the first
// lines of the function. Note that many of these properties are optional and that
// default values are set by the script is not specified.
//
function makeRequest(args) {
	var verb = args.verb; // HTTP method, e.g. GET, POST, PUT, ...
	var url = args.url; // url for the request. May be partial (only the path & query string params)
	var body = args.body; // HTTP body to be passed for the request
	var ctype = args.ctype; // Content-Type of the HTTP body
	var where = args.where; // where this method is called from - for debugging purposes

	// set default values for missing params/properties
	if (verb == null) {
		verb = "GET";
	}
	if (url == null) {
		url = "";
	}
	if (ctype == null) {
		ctype = "application/json";
	}
	if (where == null) {
		where = "";
	}

	// prepend the base url if not found in the url passed to the function
	if (url.toLowerCase().indexOf(params.url.toLowerCase()) < 0) {
		url = params.url + params.fixPath(url);
	}

	requestEntry.removeAllAttributes();

	if (typeof body !== "undefined" && body !== null && body.trim().length > 0) {
		requestEntry["http.body"] = fixBody(body);
	}

	// set Connector parameters
	params.getHttp().setParam("method", verb.toUpperCase());
	params.getHttp().setParam("url", url);

	// prepare the request Entry (used for POST/PUT calls)
	requestEntry["http.Content-Type"] = ctype;
	requestEntry["http.Accept"] = "application/json";
	requestEntry["http.Connection"] = "keep-alive";
	requestEntry["http.remote_user"] = params.username;
	requestEntry["http.remote_pass"] = params.password;

	// the following are not used for now:
	//
	//	requestEntry["http.Accept-Encoding"] = "gzip, deflate";
	//	requestEntry["http.Accept-Language"] = "en-US,en;q=0.5";
	//	requestEntry["http.User-Agent"] = "IBM Security Directory Integrator";
	//	requestEntry["http.Authorization"] = "BASIC " + system.base64Encode(String(user + ":" + password).getBytes());

	// add any cookies received on previous calls
	if (cookies.size() > 0) {
		//		requestEntry["X-CouchDB-WWW-Authenticate"] = "Cookie";
		requestEntry.merge(cookies);
	}

	// if Detailed Log is enabled then write request details to the log
	if (params.deBug) {
		logDetails({
			msg: message["Request to"] + " OpenPages",
			obj: requestEntry,
			url: url,
			verb: verb,
			ctype: ctype,
			where: where
		});
	}

	var retry = 0;
	var maxRetry = 2;
	var retEntry = null;

	// this loop makes the actual request. If an SSL handshake error occurs, attempt to retrieve
	// and import the client certificate and inform the user that TDI must be restarted.
	//
	do {
		try {
			retEntry = params.getHttp().queryReply(requestEntry);
		} catch (ex) {
			if (ex instanceof javax.net.ssl.SSLHandshakeException && false) {
				if (retry == 0) {
					getCertificate();
				} else {
					throwException(message["You must restart the SDI server in order for the imported certificate to be trusted."])
				}
			} else {
				throw ex;
			}
		}
		/*
			// For some object types , template queries are different
			var code = retEntry.getString("http.responseCode");
			var msg = retEntry.getString("http.responseMsg");
			var p = url.indexOf("/template?typeId=");
			var body = retEntry.getString("http.bodyAsString");
			if(code == "400"
			&& body.contains("Bad Request - Document object template requires fileTypeId to be set.")
			&& p > 0 ){
				var p2 = url.lastIndexOf("=");
				url = url.substring(0,p) + "/" + url.substring(p2+1);
				params.getHttp().setParam("url", url);
				retEntry = null;
			}
		 */
		retry++;
	} while (retEntry === null && retry < maxRetry);

	// if Detailed Log is enabled, write reply details to the log
	if (params.deBug) {
		logDetails({
			"msg": message["Response from"] + " OpenPages",
			"entry": retEntry
		});
	}

	verifyResponse(retEntry, url);

	// parse the reply from OpenPages
	return parseReply(retEntry);
}

function parseReply(replyEntry) {
	var body = replyEntry.getString("http.bodyAsString");
	var code = replyEntry.getString("http.resultCode");

	if (body == null || body.trim().length == 0 || "404".equals(code)) {
		return;
	}

	try {
		//		if (params.deBug) logmsg("DEBUG", "body: " + body);
		var jobj = fromJson(body);

		// save any cookies passed back
		var setCookie = replyEntry.getAttribute("http.Set-Cookie");
		if (setCookie !== null) {
			for (var i = 0; i < setCookie.size(); i++) {
				var thisCookie = setCookie.getValue(i);
				var p = thisCookie.indexOf("=");
				if (p > 0) {
					cookies["http." + thisCookie.substring(0, p)] = thisCookie.substring(p + 1);
				}
			}
		}
	} catch (ex) {
		throwException(message["Unable to parse JSON return from"] + " OpenPages - " + ex);
	}

	return jobj;
}

// wrapper function for throwing exceptions. Otherwise exceptions thrown will be 'script' exceptions
function throwException(msg) {
	logmsg("ERROR", msg); // will also send an email notification
	throw new java.lang.IllegalArgumentException(msg);
}

// wrapper function for writing log messages
function logmsg(lvl, msg) {
	if (typeof lvl === "undefined") {
		lvl = "";
	}
	if (typeof msg === "undefined") {
		msg = lvl;
		lvl = "INFO";
	}

	// if Detailed Log is enabled then log output is also sent to the stdout
	if (params.deBug) {
		java.lang.System.out.println(msg);
	}

	try {
		task.logmsg(lvl, msg);
	} catch (ex) {
		main.logmsg(lvl, msg);
	}

	// send an email notification
	if (lvl === "ERROR") {
		sendEmailNotification(msg);
	}
}

// write request or reply details to the log
function logDetails(params) {
	var msg = params.msg;
	var obj = params.obj;
	var url = params.url;
	var verb = params.verb;
	var ctype = params.ctype;
	var where = params.where;

	if (msg == null) {
		msg = message["Unnamed entry"];
	}

	var s = new java.lang.StringBuffer();

	if (where != null) {
		s.append("\n@@@------> (" + where + ") " + msg);
	} else {
		s.append("\n---------> " + msg);
	}


	if (verb != null) {
		s.append("   " + verb.toUpperCase());
	}
	if (ctype != null) {
		s.append("   " + ctype);
	}
	if (url != null) {
		s.append("   " + url);
	}
	s.append("\n");

	if (obj != null) {
		if (obj instanceof com.ibm.di.entry.Entry) {
			var attNames = obj.getAttributeNames();
			for (var a in attNames) {
				// include all "http.*" attributes, except bodyAsBytes
				if (a.indexOf("http.") >= 0 &&
					!"http.bodyAsBytes".equalsIgnoreCase(a) &&
					!"http.remote_pass".equalsIgnoreCase(a)) {
					s += " " + a + ": " + obj[a] + "\n";
				}
			}
		} else {
			s.append(obj.toString());
		}
	}
	logmsg(s.toString());
}

function notInitializedError() {
	throwException("The OpenPages Connector must be initialized before use.");
}

/**
 * @return {null}
 */
function GrcObjectToEntry(jobj) {
	var entry = system.newEntry();
	var inError = [];
	var i;

	try {
		var type = null;

		var links = jobj.links;
		if (typeof links !== "undefined") {
			for (i = 0; i < links.length; i++) {
				if ("describedby".equals(links[i].rel.toLowerCase().trim())) {
					type = links[i].href.substring(9);
					var p = type.indexOf("?");
					type = type.substring(0, p);
				}
			}
			if (type !== null) {
				entry["$grcObjectType"] = type;
			}
		}

		var fields = jobj.fields ? jobj.fields.field : [];
		if (fields !== "undefined") {
			for (i = 0; i < fields.length; i++) {
				addGrcAttribute(entry, fields[i]);
			}
		}

		if (entry.size() > 0) {
			entry["$grcObject"] = jobj;
			entry["$grcObjectJSON"] = makeJson(jobj);
		}
	} catch (ex) {
		inError.push(message["Error parsing json from OpenPages"] + " - " + ex + "  -> " + makeJson(jobj));
	}

	if (inError.length > 0) {
		throwException(toJson(inError));
	}

	if (entry.size() === 0) {
		return null;
	} else {
		return entry;
	}
}

function addGrcAttribute(entry, field) {
	if (typeof field === "undefined" || field == null) {
		return;
	}

	var fieldName = field.name;
	var fieldValue = field.value;

	if (typeof fieldName !== "undefined" && fieldName != null && fieldName.trim().length > 0) {

		fieldName = fieldName.trim();

		try {
			switch (field.dataType) {
				case "STRING_TYPE":
				case "MEDIUM_STRING_TYPE":
				case "LARGE_STRING_TYPE":
				case "ID_TYPE":
				case "BOOLEAN_TYPE":
					if (fieldValue) {
						addAttributeValue(entry, fieldName, fieldValue);
					}
					break;
				case "FLOAT_TYPE": // Handles any floating point decimal value as a double value
					if (fieldValue) {
						var doubleVal = 0.0;
						try {
							doubleVal = java.lang.Double.parseDouble(fieldValue);
						} catch (ex) {
							doubleVal = "Error parsing floating point value: " + fieldValue;
						}
						addAttributeValue(entry, fieldName, doubleVal);
					}
					break;
				case "INTEGER_TYPE":
					if (fieldValue) {
						var intValue = 0;
						try {
							intValue = system.toInt(fieldValue);
						} catch (ex) {
							intValue = "Error parsing integer value: " + fieldValue;
						}
						addAttributeValue(entry, fieldName, intValue);
					} else {
						entry[fieldName] = null;
					}
					break;
				case "ENUM_TYPE":
					if (field.enumValue) {
						if (typeof field.enumValue.name !== "undefined") {
							addAttributeValue(entry, fieldName, field.enumValue.name);
						}

						if (field.enumValue.index) {
							addAttributeValue(entry, fieldName + "_index", field.enumValue.index);
						}
					}
					break;
				case "MULTI_VALUE_ENUM":
					if (typeof field.multiEnumValue !== "undefined") {
						var enums = field.multiEnumValue.enumValue;
						if (typeof enums !== "undefined" && enums.length > 0) {
							for (var i = 0; i < enums.length; i++) {
								addAttributeValue(entry, fieldName, enums[i].name, false);
							}
						}
					}
					break;
				case "DATE_TYPE":
					if (fieldValue) {
						if (fieldValue && fieldValue.endsWith("Z")) {
							fieldValue = fieldValue.substr(0, fieldValue.length - 1);
						}
						var dateValue = system.parseDate(fieldValue,
							"yyyy-MM-dd'T'HH:mm:ss.SSS");

						if (dateValue == null) {
							logmsg("WARN", message["Unable to parse DATE_TYPE value for"] + " " + fieldName + ": " + fieldValue);
						}
						addAttributeValue(entry, fieldName, dateValue);
					}
					break;
				case "CURRENCY_TYPE":
					addAmount(entry, fieldName, "", field.baseAmount, field.baseCurrency);
					addAmount(entry, fieldName, "_localAmount", field.localAmount, field.localCurrency);
					break;
			}
		} catch (ex) {
			if (params.deBug) logmsg("DEBUG", "--!!--> Error parsing GRC field: " + toJson(field) + " - " + ex);
		}
	}
}

function addAttributeValue(entry, attName, attValue, replace) {
	if (typeof attName === "undefined" || attName == null) {
		return;
	}

	if (typeof replace === "undefined" || !"false".equalsIgnoreCase(replace)) {
		replace = true;
	}

	if (typeof attValue === "undefined" || attValue == null) {
		entry[attName] = entry.returnJavaNull;
	} else if (replace) {
		entry.setAttribute(attName, attValue);
	} else {
		entry.addAttributeValue(attName, attValue);
	}
}

function addAmount(entry, attName, attSuffix, attValue, currency) {
	if (typeof attName === "undefined" || attName == null) {
		return;
	}

	var doubleVal;
	try {
		doubleVal = java.lang.Double.parseDouble(attValue);
	} catch (ex) {
		doubleVal = "Error parsing amount: " + attValue + " - " + ex;
	}

	addAttributeValue(entry, attName + attSuffix, doubleVal);

	if (typeof currency !== "undefined" && typeof currency.isoCode !== "undefined") {
		addAttributeValue(entry, attName + attSuffix + "_currency", currency.isoCode);
	}
}

function nl(pad) {
	if (params.deBug) {
		return "\n											".substring(0, (pad * 4) + 1);
	} else {
		return "";
	}
}

function makeEnumJson(enumVal) {
	var json = new java.lang.StringBuffer();

	json.append(nl(6) + '{"index" : ' + enumVal.index + ',' +
		nl(6) + '"hidden" : ' + enumVal.hidden + ',' +
		nl(6) + '"id" : "' + enumVal.id + '",' +
		nl(6) + '"name" : "' + enumVal.name + '",' +
		nl(6) + '"localizedLabel" : "' + enumVal.localizedLabel + '"}');

	return json.toString();
}

function makeCurrencyJson(field, prop) {
	var json = new java.lang.StringBuffer();

	// The baseCurrency and localCurrency properties contain properties of
	// their own; special handling is performed here
	if (prop == "baseCurrency" || prop == "localCurrency") {
		var thisField = field[prop];

		json.append('"' + prop + '" :' +
			nl(6) + '{"isoCode" : "' + thisField.isoCode + '",' +
			nl(6) + '"name" : "' + thisField.name + '",' +
			nl(6) + '"symbol" : "' + thisField.symbol + '",' +
			nl(6) + '"precision" : ' + thisField.precision + ',' +
			nl(6) + '"isBaseCurrency" : ' + thisField.isBaseCurrency + ',' +
			nl(6) + '"isEnabled" : ' + thisField.isEnabled + ',' +
			nl(6) + '"id" : "' + thisField.id + '"}');

		return json.toString();
	} else {
		// Ensure that the localAmount has a localCurrency, which is
		// required for setting or updating a currency amount in OP. It
		// gets added here automatically since the currency field definition
		// does not specify any metadata for the ISO code.
		var isoCode = feedProps.currencyIsoCodes.get(field.id);

		if (prop == "localAmount" && isoCode !== null) {

			json.append('"' + prop + '" : ' + field[prop] + ',' +
				nl(4) + '"localCurrency" : ' +
				nl(6) + '{"isoCode" : "' + isoCode + '"},');

			return json.toString();
		} else {
			// all other currency properties are 'simple'
			return '"' + prop + '" : ' + field[prop];
		}
	}
}

function makeValueJson(field, prop) {
	var json = new java.lang.StringBuffer();
	var thisField = field[prop];
	if ("MULTI_VALUE_ENUM".equals(field.dataType)) {
		json.append(nl(4) + '"multiEnumValue" : {' +
			nl(5) + '"enumValue" : [');
		for (var i = 0; i < thisField.length; i++) {
			json.append(makeEnumJson(thisField[i]) + ",");
		}
		json.setLength(json.length() - 1);
		json.append(nl(5) + "]" + nl(4) + "}");
	} else if ("ENUM_TYPE".equals(field.dataType)) {
		json.append(nl(4) + '"enumValue" : ' + makeEnumJson(thisField));
	} else if ("CURRENCY_TYPE".equals(field.dataType)) {
		json.append(nl(4) + makeCurrencyJson(field, prop));
	} else {
		json.append(nl(4) + '"value" : ' + toJson(thisField));
	}

	return json.toString();
}

function makeFieldsJson(fields) {
	var json = new java.lang.StringBuffer();

	for (var i = 0; i < fields.length; i++) {
		var field = fields[i];
		json.append(nl(3) + "{" +
			nl(4) + '"dataType" : "' + field.dataType + '",' +
			nl(4) + '"id" : "' + field.id + '",' +
			nl(4) + '"name" : "' + field.name + '",'
		);
		for (var prop in field) {
			if (!"dataType".equals(prop) &&
				!"id".equals(prop) &&
				!"name".equals(prop)) {
				json.append(makeValueJson(field, prop) + ",")
			}
		}
		json.setLength(json.length() - 1);
		json.append(nl(3) + "},");
	}

	if (json.length() > 0) {
		json.setLength(json.length() - 1);
	}
	return json.toString();
}

function makeJson(jobj) {
	if (connector.getParam("object").startsWith("file")) {
		return toJson(jobj);
	}

	return toJson(jobj); // EH I have short-circuited the logic of this function

	var trueJSON = toJson(jobj);

	// EH the code below looks crappy to me

	var json = new java.lang.StringBuffer("{");
	for (var prop in jobj) {
		if (typeof jobj[prop] !== "object") {
			json.append(nl(1) + '"' + prop + '" : "' + jobj[prop] + '",');
		}
	}

	json.append(nl(1) + '"fields" : { ' + nl(2) + '"field" : [');

	json.append(makeFieldsJson(jobj.fields.field));

	json.append(nl(2) + "]" + nl(1) + "}" + nl(0) + "}");

	var thisJSON = json.toString();

	//logmsg()

	return thisJSON;
}

function isPrimaryParentIdValid(id) {
	var isValid = false;
	var typeDefnId = null;
	var reply = null;

	if (params.deBug) logmsg("DEBUG", "Verifying that the specified parent id is valid: " + id);

	if (!id || id === "" || params.invalidPrimaryParentIds.contains(id)) {
		return false;
	}
	if (params.validPrimaryParentIds.contains(id)) {
		return true;
	}

	// the id must be a number
	try {
		system.toInt(id);
	} catch (e0) {
		params.invalidPrimaryParentIds.add(id);
		return false;
	}

	// The specified id is not yet known to the connector; try getting it to ensure it exists
	try {
// _timer.start("OpenPages Connector - isPrimaryParentIdValid()" );
		reply = makeRequest({
			"verb": "GET",
			url: "/contents/" + id,
			where: "isPrimaryParentIdValid"
		});
		typeDefnId = reply.typeDefinitionId;
	} catch (e1) {
		reply = null;
		if (params.deBug) logmsg("DEBUG", "Exception occurred; details:\n" + e1);
	}
// _timer.stop("OpenPages Connector - isPrimaryParentIdValid()" );

	if (reply === null || typeof reply.id === "undefined" || reply.id !== id) {
		isValid = false;
	}

	// Verify the object is a parent 'type' based on its typeDefinitionId and associations
	else {
		try {
// _timer.start("OpenPages Connector - isPrimaryParentIdValid()" );
			reply = makeRequest({
				"verb": "GET",
				url: "/types/" + params.object + "/associations/parents",
				where: "isPrimaryParentIdValid"
			});
		} catch (e2) {
			reply = null;
			isValid = false;
			if (params.deBug) logmsg("DEBUG", "Exception occurred; details:\n" + e2);
		}
// _timer.stop("OpenPages Connector - isPrimaryParentIdValid()" );

		// The entry with the matching id must have a relationship of "Parent"
		for (var i = 0; reply !== null && i < reply.length; i++) {
			if (reply[i].id === typeDefnId && reply[i].relationship.trim().toLowerCase() === "parent") {
				isValid = true;
				break;
			}
		}
	}

	if (isValid === true) {
		params.validPrimaryParentIds.add(id);
	} else {
		params.invalidPrimaryParentIds.add(id);
	}

	return isValid;
}

// Send an email if mail has been configured
function sendEmailNotification(error) {
	var didSend = false;
	var alreadySent = mailSettings.notificationsSent.contains(error);

	if (mailSettings.smtpHost != "" && alreadySent === false) {
		didSend = system.sendMail(mailSettings.mailFrom, mailSettings.mailTo,
			mailSettings.mailSubject,
			"Additional instances of this error will not be reported via email for the " +
			"current scheduled run.\n\nReported Issue:\n\n" + error,
			null);

		// remember this error to avoid mailing duplicates for this assembly line run
		mailSettings.notificationsSent.add(error);
		java.lang.Thread.sleep(100); // avoids overwhelming the SMTP server

		if (didSend !== null) {
			logmsg("WARN", "Attempt to send email was not successful for message [" + error + "]\n\tReason: " + didSend);
		}
	}
}

// Ancient history for this component
//
//var version = "20140910 1730" // started
//var version = "20140923 1830" // Added paged reads and fixed bugs with Brian Laskey
//var version = "20141001 1235" // Started work on putEntry
//var version = "20141002 1828" // getting Types and Templates now
//var version = "20141003 1111" // added uri root parameter
//var version = "20141007 1030" // iterator and add mode
//var version = "20141008 1344" // update mode started
//var version = "20141009 1710" // update mode working
//var version = "20141013 1421" // fixed GRC object creation
//var version = "20141013 2321" // added delete mode
//var version = "20141014 1412" // connector uses Type setting if typeDefinitionId not mapped for add operation
//var version = "20150617 1439" // added logic to process parent type and parent location properties
//var version = "20150619 1044" // added logic to process primaryParentId and prevent orphaned incidents
//var version = "20150625 1731" // added try/catch's for makeRequest()'s that did not yet have them
//var version = "20150714 1243" // added form fields and logic for sending email notifications from connectors
//var version = "20150717 1520" // Corrected the REST api call to confirm the parent association
//var version = "20150730 1335" // Extended logic that processes date/time values to use another format string
//var version = "20150805 1718" // Converted over to using connector.properties file
//var version = "20150807 1503" // Re-worked WARN messages regarding properties for invalid primaryParentId to also send email notification
//var version = "20150812 1337" // Restored original date/time format string and adjusted the logic to format it
//var version = "20150826 1332" // Added dynamic derivation of primaryParentId using mapped properties for parent type and location
//var version = "20150904 1155" // Enhanced currency handling to take a value and its associated ISO code
//var version = "20151102 1410" // Added support for: BOOLEAN_TYPE, FLOAT_TYPE, MEDIUM_STRING_TYPE, LARGE_STRING_TYPE
//var version = "20160421 1710" //Added plave holder for the future change of ucf_integration
//var version = "20160801 1210" //Added logic segment that merge all citation parents' guidence value for ucf_integration - control
//var version = "20160812 1050";  //Added logic segment that retrive all control parents' information for ucf_integration - control
//var version = "20200527 1136";  //Replaced ConcurrentHashMaps with HashMaps and fixed Connect/Next from CE
//var version = "20200529 1403";  //Connector now returns new Resource ID in conn Entry for adds (putEntry) - can access in After Add Hook
//var version = "20200502 1351"; // Added support for writing files (word, excel, etc)
//var version = "20200602 1456"; // Handling file types correctly now when adding as attachments to OpenPages
//var version = "20200604 2046"; // Fixed bug in entrytoGrcObject thanks to Blade
//var version = "20200605 1638"; // putEntry returns new Resource ID
//var version = "20200609 1903"; // made putEntry store the entire newly created entry (response from add) in the last_conn variable
//var version = "20200610 2018"; // trying to add support for complex queries (i.e. PARENT or CHILD joins)
//var version = "20200615 1544"; // fixed putEntry for adding objectType file so default is word doc
//var version = "20200625 1249"; // Added params.refresh() to start of ensureInitialized() function
//var version = "20200625 1300"; // Changed addGrcSystemField to not null out the typeDefinitionId property of grcObj
//var version = "20200625 1309"; // parseReply() now ignores the body if the http.resultCode is 404
//var version = "20200625 1346"; // fixed double incrementing of this.index in resultSet.next function]]></parameter>
                <parameter name="smtpPort">25</parameter>
                <parameter name="url">@SUBSTITUTE{property.POC_MVP:op.url}</parameter>
                <parameter name="user"/>
                <parameter name="username">@SUBSTITUTE{property.POC_MVP:op.username}</parameter>
                <parameter name="view"/>
            </Configuration>
            <ComputeChanges>false</ComputeChanges>
            <Parser>
                <InheritFrom>[parent]</InheritFrom>
            </Parser>
            <AttributeMap name="Input">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <AttributeMap name="Output">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <DeltaSettings>
                <WhenToCommit>After every database operation</WhenToCommit>
                <RowLocking>SERIALIZABLE</RowLocking>
                <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
            </DeltaSettings>
            <Schema name="Input">
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1596026052127</ModTime>
                <SchemaItem>
                    <Name>$grcObject</Name>
                    <NativeSyntax>JavaScript Object</NativeSyntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>$grcObjectJSON</Name>
                    <NativeSyntax>JSON</NativeSyntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>$grcObjectType</Name>
                    <NativeSyntax>String</NativeSyntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>Comment</Name>
                    <NativeSyntax>String (limited to 4000 characters)</NativeSyntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>Created By</Name>
                    <NativeSyntax>Integer (read only)</NativeSyntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>Creation Date</Name>
                    <NativeSyntax>Date (read only)</NativeSyntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>Description</Name>
                    <NativeSyntax>String</NativeSyntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>Last Modification Date</Name>
                    <NativeSyntax>Date (read only)</NativeSyntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>Last Modified By</Name>
                    <NativeSyntax>Integer (read only)</NativeSyntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>Location</Name>
                    <NativeSyntax>String (limited to 4000 characters) (read only)</NativeSyntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>Name</Name>
                    <NativeSyntax>String (limited to 4000 characters) (read only)</NativeSyntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>OPSS-Assert:Assertions</Name>
                    <NativeSyntax>String (multi-valued)</NativeSyntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>Orphan</Name>
                    <NativeSyntax>String (limited to 4000 characters) (read only)</NativeSyntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>Resource ID</Name>
                    <NativeSyntax>Integer (Id) (read only)</NativeSyntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>parentFolderId</Name>
                    <NativeSyntax>Integer (Id)</NativeSyntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>primaryParentId</Name>
                    <NativeSyntax>Integer (Id)</NativeSyntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>typeDefinitionId</Name>
                    <NativeSyntax>Integer (Id)</NativeSyntax>
                </SchemaItem>
            </Schema>
            <Schema name="Output">
                <InheritFrom>[parent]</InheritFrom>
            </Schema>
            <LinkCriteria>
                <InheritFrom>[parent]</InheritFrom>
            </LinkCriteria>
            <Hooks>
                <InheritFrom>[parent]</InheritFrom>
                <Hook name="default_fail">
                    <InheritFrom>/Scripts/Hook_Default_On_Error</InheritFrom>
                    <Name>default_fail</Name>
                    <Enabled>true</Enabled>
                </Hook>
                <Hook name="initialize_fail">
                    <InheritFrom>/Scripts/Hook_On_Error</InheritFrom>
                    <Name>initialize_fail</Name>
                    <Enabled>true</Enabled>
                </Hook>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <Reconnect>
                <InheritFrom>[parent]</InheritFrom>
                <parameter name="autoreconnect">false</parameter>
                <parameter name="numberOfRetries">10</parameter>
                <parameter name="retryDelay">5</parameter>
                <ReconnectRules/>
            </Reconnect>
            <Operations/>
            <PoolDefinition>
                <InheritFrom>[parent]</InheritFrom>
                <Enabled>false</Enabled>
                <MinPoolSize>0</MinPoolSize>
                <MaxPoolSize>0</MaxPoolSize>
                <PurgeInterval>0</PurgeInterval>
                <InitializeAttempts>1</InitializeAttempts>
                <InitializeSleepInterval>0</InitializeSleepInterval>
            </PoolDefinition>
            <PoolInstance/>
        </Connector>
        
        
        
    <Connector name="ePolicy_db">
            <InheritFrom>system:/Connectors/ibmdi.JDBC</InheritFrom>
            <ModTime>1597233205823</ModTime>
            <ConnectorMode>Iterator</ConnectorMode>
            <ConnectorState>Enabled</ConnectorState>
            <Configuration>
                <UserComment>fixing</UserComment>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1596458386255</ModTime>
                <parameter name="custom.database">POLICYL</parameter>
                <parameter name="custom.form">1</parameter>
                <parameter name="custom.hostname">mopbzp174025.fr.dst.ibm.com</parameter>
                <parameter name="custom.port">50000</parameter>
                <parameter name="jdbcDriver">com.ibm.db2.jcc.DB2Driver</parameter>
                <parameter name="jdbcLogin">db2inst1</parameter>
                <parameter name="jdbcPassword">Epolicy2ibm@123</parameter>
                <parameter name="jdbcSchema">EPOLICY</parameter>
                <parameter name="jdbcSource">jdbc:db2://mopbzp174025.fr.dst.ibm.com:50000/POLICYL</parameter>
                <parameter name="jdbcTable">evidence</parameter>
            </Configuration>
            <Parser>
                <InheritFrom>[parent]</InheritFrom>
            </Parser>
            <AttributeMap name="Input">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <AttributeMap name="Output">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <DeltaSettings>
                <UniqueAttribute/>
                <WhenToCommit>After every database operation</WhenToCommit>
                <RowLocking>SERIALIZABLE</RowLocking>
                <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
            </DeltaSettings>
            <Schema name="Input">
                <InheritFrom>[parent]</InheritFrom>
            </Schema>
            <Schema name="Output">
                <InheritFrom>[parent]</InheritFrom>
                <SchemaItem>
                    <Name>BASE_RR</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>COMMENT</Name>
                </SchemaItem>
                <SchemaItem>
                    <Name>CUST_XYZ</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>DATA</Name>
                    <Syntax>[B</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>DELAYED</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>DELETED_TS</Name>
                </SchemaItem>
                <SchemaItem>
                    <Name>ENVIRONMENT</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>EVIDENCE_TYPE_ID</Name>
                    <Syntax>java.lang.Integer</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>EXCEPTION</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>EXTRA_TYPE</Name>
                    <Syntax>java.lang.Integer</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>FILE_NAME</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>FORM</Name>
                    <Syntax>[B</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>FORMAT</Name>
                    <Syntax>java.lang.Integer</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>IBM</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>ID</Name>
                    <Syntax>java.lang.Integer</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>IMPORTED_FLAG</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>IS_DELETED</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>LAST_EDITOR</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>LOCKED_BY</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>LOCKED_FLAG</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>LOCKED_TS</Name>
                </SchemaItem>
                <SchemaItem>
                    <Name>NAME</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>OWNER_ID</Name>
                    <Syntax>java.lang.Integer</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>POLICY_ID</Name>
                    <Syntax>java.lang.Integer</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>REF</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>REVISION</Name>
                    <Syntax>java.lang.Integer</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>REVISION_COUNT</Name>
                    <Syntax>java.lang.Integer</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>STATUS_ID</Name>
                    <Syntax>java.lang.Integer</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>TEMPLATE_ID</Name>
                    <Syntax>java.lang.Integer</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>TEMPLATE_TYPE_ID</Name>
                    <Syntax>java.lang.Integer</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>TEMPLATE_VERSION</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>UPDATED_BY</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>UPDATED_TS</Name>
                    <Syntax>java.sql.Timestamp</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>XDOCUMENT_ID</Name>
                    <Syntax>java.lang.Integer</Syntax>
                </SchemaItem>
            </Schema>
            <LinkCriteria>
                <InheritFrom>[parent]</InheritFrom>
            </LinkCriteria>
            <Hooks>
                <InheritFrom>[parent]</InheritFrom>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <Reconnect>
                <InheritFrom>[parent]</InheritFrom>
                <ReconnectRules/>
            </Reconnect>
            <Operations/>
            <PoolDefinition>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1597233205823</ModTime>
                <Enabled>false</Enabled>
                <MinPoolSize>5</MinPoolSize>
                <MaxPoolSize>10</MaxPoolSize>
                <PurgeInterval>0</PurgeInterval>
                <InitializeAttempts>1</InitializeAttempts>
                <InitializeSleepInterval>0</InitializeSleepInterval>
            </PoolDefinition>
            <PoolInstance/>
        </Connector>
        <Connector name="ePolicy_db_IW">
            <InheritFrom>system:/Connectors/ibmdi.JDBC</InheritFrom>
            <ModTime>1591208882689</ModTime>
            <ConnectorMode>Iterator</ConnectorMode>
            <ConnectorState>Enabled</ConnectorState>
            <Configuration>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1591208882689</ModTime>
                <parameter name="custom.database">POLICYL</parameter>
                <parameter name="custom.form">1</parameter>
                <parameter name="custom.hostname">mopbzp174025.fr.dst.ibm.com</parameter>
                <parameter name="custom.port">50000</parameter>
                <parameter name="jdbcDriver">com.ibm.db2.jcc.DB2Driver</parameter>
                <parameter name="jdbcLogin">db2inst1</parameter>
                <parameter name="jdbcPassword">Epolicy2ibm@123</parameter>
                <parameter name="jdbcSchema">IW</parameter>
                <parameter name="jdbcSource">jdbc:db2://mopbzp174025.fr.dst.ibm.com:50000/POLICYL</parameter>
                <parameter name="jdbcTable">ACCOUNT</parameter>
            </Configuration>
            <Parser>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1588766232920</ModTime>
            </Parser>
            <AttributeMap name="Input">
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1588766232920</ModTime>
            </AttributeMap>
            <AttributeMap name="Output">
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1588766232920</ModTime>
            </AttributeMap>
            <DeltaSettings>
                <ModTime>1591177906733</ModTime>
                <UniqueAttribute/>
                <WhenToCommit>After every database operation</WhenToCommit>
                <RowLocking>SERIALIZABLE</RowLocking>
                <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
            </DeltaSettings>
            <Schema name="Input">
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1588766232920</ModTime>
            </Schema>
            <Schema name="Output">
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1588766232920</ModTime>
            </Schema>
            <LinkCriteria>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1588766232920</ModTime>
            </LinkCriteria>
            <Hooks>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1588766232920</ModTime>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <Reconnect>
                <InheritFrom>[parent]</InheritFrom>
                <ReconnectRules/>
            </Reconnect>
            <Operations/>
            <PoolDefinition>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1588766257229</ModTime>
                <Enabled>false</Enabled>
                <MinPoolSize>0</MinPoolSize>
                <MaxPoolSize>0</MaxPoolSize>
                <PurgeInterval>0</PurgeInterval>
                <InitializeAttempts>1</InitializeAttempts>
                <InitializeSleepInterval>0</InitializeSleepInterval>
            </PoolDefinition>
            <PoolInstance/>
        </Connector>
    <Connector name="OpenPages Connector 20200627 1138">
            <InheritFrom>system:/Connectors/ibmdi.ScriptConnector</InheritFrom>
            <ModTime>1593207591525</ModTime>
            <ConnectorMode>Iterator</ConnectorMode>
            <ConnectorState>Enabled</ConnectorState>
            <Configuration>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1593207591525</ModTime>
                <parameter name="$form$"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="260" UUID="a8ad3eb7-a05b-4a69-b5c2-397f536ac120" created="Sun Jun 01 21:17:26 CEST 2014" createdBy="Administrator" main="Form" modified="Thu Jun 25 12:21:31 CEST 2020" modifiedBy="eddie" version="7.1.1">
    <Form name="Form">
        <ModTime>1591039019456</ModTime>
        <FormItemNames>
            <ListItem>$GLOBAL.script</ListItem>
            <ListItem>password</ListItem>
            <ListItem>deBug</ListItem>
            <ListItem>url</ListItem>
            <ListItem>username</ListItem>
            <ListItem>object</ListItem>
            <ListItem>query</ListItem>
            <ListItem>root</ListItem>
            <ListItem>parentType</ListItem>
            <ListItem>parentLoc</ListItem>
            <ListItem>smtpHost</ListItem>
            <ListItem>smtpPort</ListItem>
            <ListItem>mailTo</ListItem>
        </FormItemNames>
        <FormSectionNames>
            <ListItem>General</ListItem>
            <ListItem>Advanced</ListItem>
            <ListItem>Shared</ListItem>
        </FormSectionNames>
        <FormItem name="Parent Object Type"/>
        <FormItem name="allowOrphans">
            <ModTime>1433528573989</ModTime>
            <parameter name="description">When set, allow orphaned objects to be created.</parameter>
            <parameter name="label">Allow Orphans</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="deBug">
            <ModTime>1431552570823</ModTime>
            <parameter name="description">Enable this to provide debugging messages in the log output and console.</parameter>
            <parameter name="label">Debug log</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="mailTo">
            <ModTime>1436821990224</ModTime>
            <parameter name="description">The email address to use for sending email notifications for errors that can occur in the assembly line connectors.</parameter>
            <parameter name="label">Mail To</parameter>
        </FormItem>
        <FormItem name="object">
            <ModTime>1432753097249</ModTime>
            <Values>
                <ListItem>Incident</ListItem>
                <ListItem>Asset</ListItem>
            </Values>
            <parameter name="Required">true</parameter>
            <parameter name="description">The type of object to work with. May be overridden for add operation by mapping out an attribute named '$grcObjectType'.</parameter>
            <parameter name="label">GRC Object</parameter>
            <parameter name="script">getTypes</parameter>
            <parameter name="scriptLabel">Query</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="parentLoc">
            <ModTime>1433445455394</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="description">The relative location of the GRC parent object to use as the parent for all newly created incidents.  Example: /EMEA/Audits</parameter>
            <parameter name="label">Parent Location</parameter>
        </FormItem>
        <FormItem name="parentType">
            <ModTime>1433771469910</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="description">The GRC object type of the parent object to use for all newly created incidents.</parameter>
            <parameter name="label">Parent Object Type</parameter>
        </FormItem>
        <FormItem name="password">
            <ModTime>1432753086954</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">The password for the OpenPages user id.</parameter>
            <parameter name="label">Password</parameter>
            <parameter name="noLabel">false</parameter>
            <parameter name="syntax">password</parameter>
        </FormItem>
        <FormItem name="query">
            <ModTime>1435339779622</ModTime>
            <parameter name="description">The GRC query to apply for iteration.  If empty then SELECT * FROM [&lt;object&gt;] is used.</parameter>
            <parameter name="label">Query</parameter>
            <parameter name="modes"/>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="root">
            <ModTime>1432753221316</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">The root of the OpenPages REST API. This is by default /grc/api .</parameter>
            <parameter name="label">URI Root</parameter>
            <parameter name="noLabel">false</parameter>
        </FormItem>
        <FormItem name="smtpHost">
            <ModTime>1436823079339</ModTime>
            <parameter name="description">The SMTP host to use for sending email notifications for errors that can occur in the assembly line connectors.</parameter>
            <parameter name="label">SMTP Host</parameter>
        </FormItem>
        <FormItem name="smtpPort">
            <ModTime>1436821942625</ModTime>
            <parameter name="description">The SMTP port to use for sending email notifications to for errors that can occur in the assembly line connectors. Defaulted to 25.</parameter>
            <parameter name="label">SMTP Port</parameter>
        </FormItem>
        <FormItem name="url">
            <ModTime>1431455638910</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">The URL to the OpenPages system.  For example: http://openpages.acme.com:10108</parameter>
            <parameter name="label">URL</parameter>
        </FormItem>
        <FormItem name="username">
            <ModTime>1432753093706</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">The OpenPages user id to authenticate with.</parameter>
            <parameter name="label">User id</parameter>
        </FormItem>
        <FormSection name="Advanced">
            <FormSectionNames>
                <ListItem>root</ListItem>
                <ListItem>query</ListItem>
                <ListItem>$GLOBAL.script</ListItem>
            </FormSectionNames>
            <parameter name="initiallyExpanded">false</parameter>
            <parameter name="title">Advanced</parameter>
        </FormSection>
        <FormSection name="General">
            <FormSectionNames>
                <ListItem>url</ListItem>
                <ListItem>username</ListItem>
                <ListItem>password</ListItem>
                <ListItem>object</ListItem>
                <ListItem>parentType</ListItem>
                <ListItem>parentLoc</ListItem>
                <ListItem>$GLOBAL.userComment</ListItem>
                <ListItem>deBug</ListItem>
            </FormSectionNames>
        </FormSection>
        <FormSection name="Shared">
            <ModTime>1436821851376</ModTime>
            <FormSectionNames>
                <ListItem>smtpHost</ListItem>
                <ListItem>smtpPort</ListItem>
                <ListItem>mailTo</ListItem>
            </FormSectionNames>
            <parameter name="initiallyExpanded">false</parameter>
            <parameter name="title">Shared</parameter>
        </FormSection>
        <parameter name="formevents"><![CDATA[// 20140912 1248
var params = {	url : "", 
				root : "/grc/api",
				username : "", 
				password : "",
				object : "",
				query : "",
				
				refresh : function(connector) {
					for (var pname in this) {
						if (typeof this[pname] !== "function") {
							var control = form.getControl(pname);
							if (control !== null && control.getText() != null) {
								this[pname] = control.getText();
							}	
						}	
					}

					this.root = "/grc/api";

					if (!this.url.toLowerCase().endsWith(this.root.toLowerCase())) {
						this.url = this.url + this.fixPath(this.root);
					}	
//					form.alert("this.url: " + this.url + "\nthis.root: " + this.root)
				},
				
				apply : function(http) {
					for (var pname in this) {
						if (typeof this[pname] !== "function") {
							http.setParam(pname, this[pname]);
						}	
					}
				},

				fixPath : function(path) {
					if (!path.startsWith("/")) {
						path = "/" + path;
					}
					return path;
				}
			}


function getCertificate () {
	form.setWaitCursor();
	try {
		var msg = com.ibm.di.security.GetSSLCertificate.installCertificateFrom(url, 443);
	} finally {
		form.setNormalCursor();
	}
	form.alert(msg);
}

function getTypes() {
	params.refresh();
	params.apply(http);
	
	form.getClass();
	var combo = form.getControl("object");
	combo.removeAll();

	var reply = makeRequest({"verb" : "GET", 
							 "url" : "/types", 
							 "ctype" : "application/json", 
							 "where" : "selectEnries"});

	if (typeof reply.length !== "undefined") {						 
		var arr = new java.util.ArrayList();

		arr.add("file (word, excel, etc)");
		for (var i = 0; i < reply.length; i++) {
			arr.add(reply[i].name);
		}
			
		arr = arr.toArray();
		java.util.Arrays.sort(arr);
	
		for (var a in arr) {
			combo.add(a);
		}	
		
		combo.select(0);
	}	
}

function makeRequest(args) {
	var verb = args.verb;		// HTTP method, e.g. GET, POST, PUT, ...
	var url = args.url;		// url for the request. May be partial (only the path & query string params)
	var body = args.body;		// HTTP body to be passed for the request
	var ctype = args.ctype;	// Content-Type of the HTTP body
	var where = args.where;	// where this method is called from - for debugging purposes

	// set default values for missing params/properties
	if (verb == null) { verb = "GET"; } 
	if (url == null) { url = ""; } 
	if (ctype == null) { ctype = "application/json"; }
	if (where == null) { where = ""; } 

	// prepend the base url if not found in the url passed to the function
	if (url.toLowerCase().indexOf(params.url.toLowerCase()) < 0) {
		url = params.url + params.fixPath(url);
	}
	
//	form.alert("url: " + url + "\n\n    params.url: " + params.url);
	
	requestEntry.removeAllAttributes();
	
	if (typeof body !== "undefined" && body !== null && body.trim().length > 0) {
		requestEntry["http.body"] = body;
	}
	
	// set Connector parameters
	http.setParam("method", verb.toUpperCase());
	http.setParam("url", url);

	// prepare the request Entry (used for POST/PUT calls)
	requestEntry["http.Content-Type"] = ctype;
	requestEntry["http.Accept"] = "application/json";
	requestEntry["http.Connection"] = "keep-alive";
	requestEntry["http.remote_user"] = params.username;
	requestEntry["http.remote_pass"] = params.password;

// commented out for now
//
//	requestEntry["http.Accept-Encoding"] = "gzip, deflate";
//	requestEntry["http.Accept-Language"] = "en-US,en;q=0.5";
//	requestEntry["http.User-Agent"] = "IBM Security Directory Integrator";
//	requestEntry["http.Authorization"] = "BASIC " + system.base64Encode(String(user + ":" + password).getBytes());
	
	// add any cookies received on previous calls
	if (cookies.size() > 0) {
//		requestEntry["X-CouchDB-WWW-Authenticate"] = "Cookie"; // TODO
		requestEntry.merge(cookies);
	}	

	// if Detailed Log is enabled then write request details to the log
	if (deBug) {
		logDetails({"msg" : message["Request to"] + " OpenPages", 
					"obj" : requestEntry, 
					"url" : url, 
					"verb" : verb, 
					"ctype" : ctype, 
					"where" : where});
	}

	var retry = 0;
	var maxRetry = 2;
	var retEntry = null;
	
	// this loop makes the actual request. If an SSL handshake error occurs, attempt to retrieve
	// and import the client certificate and inform the user that TDI must be restarted.
	//
	do {
		try {	
			retEntry = http.queryReply(requestEntry);
			
//			form.alert(retEntry.toString())
		} catch (ex) {
			if (ex instanceof javax.net.ssl.SSLHandshakeException) {
				if (retry == 0) {
					getCertificate();
				} else {	
					throwException(message["You must restart the SDI server in order for the imported certificate to be trusted."])
				}
			} else {
				throw ex;
			}	
		}
		
		retry++;
	} while (retEntry === null && retry < maxRetry);
	
	// if Detailed Log is enabled, write reply details to the log
	if (deBug) {
		logDetails({"msg" : message["Response from"] + " OpenPages", 
				    "entry" : retEntry});
	}
	
	verifyResponse(retEntry);
	
	// parse the reply from OpenPages
	var reply = parseReply(retEntry);
	
	return reply;
}

function throwException(msg) {
	throw new java.lang.IllegalArgumentException(msg);
}

function logmsg(lvl, msg) {
	if (typeof lvl === "undefined") { lvl = ""; } 
	if (typeof msg === "undefined") {
		msg = lvl;
		lvl = "INFO";
	}
	
	if (deBug) {
		java.lang.System.out.println(msg);
	}
		
	try {
		connector.logmsg(lvl, msg);
	} catch (ex) {
		main.logmsg(lvl, msg);
	}	
}

function getParam(pname, required) {
	if (typeof required === "undefined") { required = true; }
	var ctrl = form.getControl(pname);
	if (ctrl == null && required) {
		throwException(message["Required parameter not set"] + ": " + pname);
	}
	
	pval = ctrl.getText();
	
	if (pval === null && required) {
		throwException(message["Required parameter not set"] + ": " + pname);
	} 
	
	return pval;
}

function parseReply(replyEntry) {
	var body = replyEntry.getString("http.bodyAsString");
	
	try {
//		if (deBug) logmsg("DEBUG", "body: " + body);
		var jobj = fromJson(body);
		
		// save any cookies passed back	
		var setCookie = replyEntry.getAttribute("http.Set-Cookie");
		if (setCookie !== null) {
			for (var i = 0; i < setCookie.size(); i++) {
				var thisCookie = setCookie.getValue(i);
				var p = thisCookie.indexOf("=");
				if (p > 0) {
					cookies["http." + thisCookie.substring(0,p)] = thisCookie.substring(p+1);
				}
			}	
		}
	} catch (ex) {
		throwException(message["Unable to parse JSON return from"] + " OpenPages - " + ex);
	}	
	
	return jobj;
}

function fixUrl(params) {
	var url = params.url;
	var dbtype = params.dbtype;
	var protocolSpes = "http:";
	var auth = "";
	
	if (url.startsWith("http")) {
		var p = url.indexOf("/");
		if (p > 0) {
			protocolSpes = url.substring(0, p);
			var p2 = url.indexOf("/", p+1);
			if (p2 == (p+1)) {
				url = url.substring(p2+1);
			} else {
				throwException(message["Invalid format for URL parameter"] + ": " + url);
			}
		}
	}

	if (!url.endsWith("/")) {
		return protocolSpes + "//" + auth + url + "/";
	} else {
		return protocolSpes + "//" + auth + url;
	}
}

function logDetails(params) {
	var msg = params.msg;
	var obj = params.obj; 
	var url = params.url;
	var verb = params.verb;
	var ctype = params.ctype; 
	var where = params.where;
	
	if (msg == null) {
		msg = message["Unnamed entry"];
	}

	var s = new java.lang.StringBuffer();
	
	if (where != null) {
		s.append("\n@@@------> (" + where + ") " + msg);
	} else {
		s.append("\n---------> " + msg);
	}
	
	
	if (verb != null) { s.append("   " + verb.toUpperCase()); } 
	if (ctype != null) { s.append("   " + ctype); } 
	if (url != null) { s.append("   " + url); } 
	s.append("\n");

	if (obj != null) {
		if (obj instanceof com.ibm.di.entry.Entry) {	
			var attNames = obj.getAttributeNames();
			for (var a in attNames) {
				if (a.indexOf("http.") >= 0 && 
					!("http.bodyAsString".equalsIgnoreCase(a)
						|| "http.bodyAsBytes".equalsIgnoreCase(a)) ) {
					s += " " + a + ": " + obj[a] + "\n";
				}
			}	
		} else {
			s.append(obj.toString());
		}
	}	
	form.alert(s.toString());
}

function verifyResponse(replyEntry) {
	var respCode = replyEntry.getString("http.responseCode");
	if (!respCode.startsWith("2")) {
		throwException(message["Error from"] 
						+ " OpenPage server - code: " + respCode
						+ "  message: " + replyEntry.getString("http.responseMsg"));
	}
}

function authenticate() {
	var user = getParam("user");
	var password = getParam("password");
	var reply = makeRequest({verb : "POST", 
							 url : "_session", 
							 body : "name=" + user + "&password=" + password, 
							 ctype : "application/x-www-form-urlencoded", 
							 where : "authenticate",
							 authenticating : true});
	authenticated = true;
}]]]]><![CDATA[></parameter>
        <parameter name="formscript"><![CDATA[var message = new Array();
var message = new Array();
message["Required parameter not set"] = "Required parameter not set";
message["Response from"] = "Response from";
message["Request to"] = "Request to";
message["Error from"] = "Error from";
message["You must restart the SDI server in order for the imported certificate to be trusted."] = "You must restart the SDI server in order for the imported certificate to be trusted.";
message["Unable to parse JSON return from"] = "Unable to parse JSON return from";
message["Invalid format for URL parameter"] = "Invalid format for URL parameter";

if (typeof(system) == "undefined") {
	var c = java.lang.Class.forName("com.ibm.di.function.UserFunctions");
	system = new c;
}	

var http = system.getConnector("ibmdi.HTTPClient");
var requestEntry = system.newEntry();
var cookies = system.newEntry();
var deBug = false;
var authenticated = false;
http.initialize(null);
]]]]><![CDATA[></parameter>
        <parameter name="title">OpenPages Connector</parameter>
        <TranslationFile>NLS/idi_conn_scriptconn</TranslationFile>
    </Form>
</MetamergeConfig>]]></parameter>
                <parameter name="allowOrphans">@SUBSTITUTE{property.qradar_integration:op_allowOrphans}</parameter>
                <parameter name="object">Assertion</parameter>
                <parameter name="parentLoc"/>
                <parameter name="parentType"/>
                <parameter name="password">@SUBSTITUTE{property.POC_MVP:op.password}</parameter>
                <parameter name="root">@SUBSTITUTE{property.POC_MVP:op.uri.root}</parameter>
                <parameter name="script"><![CDATA[//////////////////////////////////////////////////////////////////////////////
//
//  Licensed Materials - Property of IBM
//
//  5725-D51
//
//  (C) Copyright IBM Corporation 2015, 2017  All Rights Reserved.
//
//  US Government Users Restricted Rights - Use, duplication or
//  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//
//////////////////////////////////////////////////////////////////////////////
//
// OpenPages Connector
//
//
//var version = "20140910 1730" // started
//var version = "20140923 1830" // Added paged reads and fixed bugs with Brian Laskey
//var version = "20141001 1235" // Started work on putEntry
//var version = "20141002 1828" // getting Types and Templates now
//var version = "20141003 1111" // added uri root parameter
//var version = "20141007 1030" // iterator and add mode
//var version = "20141008 1344" // update mode started
//var version = "20141009 1710" // update mode working
//var version = "20141013 1421" // fixed GRC object creation
//var version = "20141013 2321" // added delete mode
//var version = "20141014 1412" // connector uses Type setting if typeDefinitionId not mapped for add operation
//var version = "20150617 1439" // added logic to process parent type and parent location properties
//var version = "20150619 1044" // added logic to process primaryParentId and prevent orphaned incidents
//var version = "20150625 1731" // added try/catch's for makeRequest()'s that did not yet have them
//var version = "20150714 1243" // added form fields and logic for sending email notifications from connectors
//var version = "20150717 1520" // Corrected the REST api call to confirm the parent association
//var version = "20150730 1335" // Extended logic that processes date/time values to use another format string
//var version = "20150805 1718" // Converted over to using connector.properties file
//var version = "20150807 1503" // Re-worked WARN messages regarding properties for invalid primaryParentId to also send email notification
//var version = "20150812 1337" // Restored original date/time format string and adjusted the logic to format it
//var version = "20150826 1332" // Added dynamic derivation of primaryParentId using mapped properties for parent type and location
//var version = "20150904 1155" // Enhanced currency handling to take a value and its associated ISO code
//var version = "20151102 1410" // Added support for: BOOLEAN_TYPE, FLOAT_TYPE, MEDIUM_STRING_TYPE, LARGE_STRING_TYPE
//var version = "20160421 1710" //Added plave holder for the future change of ucf_integration
//var version = "20160801 1210" //Added logic segment that merge all citation parents' guidence value for ucf_integration - control
//var version = "20160812 1050";  //Added logic segment that retrive all control parents' information for ucf_integration - control
//var version = "20200527 1136";  //Replaced ConcurrentHashMaps with HashMaps and fixed Connect/Next from CE
//var version = "20200529 1403";  //Connector now returns new Resource ID in conn Entry for adds (putEntry) - can access in After Add Hook
//var version = "20200502 1351"; // Added support for writing files (word, excel, etc)
//var version = "20200602 1456"; // Handling file types correctly now when adding as attachments to OpenPages
//var version = "20200604 2046"; // Fixed bug in entrytoGrcObject thanks to Blade
//var version = "20200605 1638"; // putEntry returns new Resource ID 
//var version = "20200609 1903"; // made putEntry store the entire newly created entry (response from add) in the last_conn variable
//var version = "20200610 2018"; // trying to add support for complex queries (i.e. PARENT or CHILD joins)
//var version = "20200615 1544"; // fixed putEntry for adding objectType file so default is word doc
//var version = "20200625 1249"; // Added params.refresh() to start of ensureInitialized() function
//var version = "20200625 1300"; // Changed addGrcSystemField to not null out the typeDefinitionId property of grcObj
//var version = "20200625 1309"; // parseReply() now ignores the body if the http.resultCode is 404
//var version = "20200625 1346"; // fixed double incrementing of this.index in resultSet.next function
var version = "20200626 1608"; // make selectEntries() initialize the Connector

var requestEntry = system.newEntry();
var cookies = system.newEntry();
var ISOdateMask1 = "yyyy-MM-dd'T'HH:mm:ss.SSZ";
var ISOdateMask2 = "yyyy-MM-dd'T'HH:mm:ss.SSSZ";

// Messages returned by the Connector are kept in an Array and set here to make it
// simpler to localize this component later.
//
var message = [];
message["Required parameter not set"] = "Required parameter not set";
message["Response from"] = "Response from";
message["Request to"] = "Request to";
message["Error from"] = "Error from";
message["You must restart the SDI server in order for the imported certificate to be trusted."] = "You must restart the SDI server in order for the imported certificate to be trusted.";
message["Unable to parse JSON return from"] = "Unable to parse JSON return from";
message["Invalid format for URL parameter"] = "Invalid format for URL parameter";
message["No field definitions returned for GRC object type"] = "No field definitions returned for GRC object type";
message["No GRC Object types returned by OpenPages"] = "No types returned by OpenPages";
message["GRC Object type"] = "GRC Object type";
message["has no field defintion for attribute"] = "has no field defintion for attribute";
message["The following field is readOnly and cannot be written to"] = "The following field is readOnly and cannot be written to";
message["No types returned by OpenPages"] = "No types returned by OpenPages";
message["The following fields are readOnly and cannot be written"] = "The following fields are readOnly and cannot be written";
message["The following fields are required"] = "The following fields are required";
message["Unable to parse DATE_TYPE value for"] = "Unable to parse DATE_TYPE value for";

// Global variables defined here
var initialized = false;

// GRC object system fields
var grcSystemFieldNames = ["name", "description", "primaryParentId", "typeDefinitionId", "parentFolderId"];
var grcSystemFieldTypes = ["String", "String", "Integer (Id)", "Integer (Id)", "Integer (Id)"];

var schemaType = [];
schemaType["DATE_TYPE"] = "Date";
schemaType["INTEGER_TYPE"] = "Integer";
schemaType["ID_TYPE"] = "Integer (Id)";
schemaType["STRING_TYPE"] = "String (limited to 4000 characters)";
schemaType["MEDIUM_STRING_TYPE"] = "Medium size String (limited to 32000 characters)";
schemaType["LARGE_STRING_TYPE"] = "Large size String (limited to configured maximum)";
schemaType["ENUM_TYPE"] = "String";
schemaType["MULTI_VALUE_ENUM"] = "String (multi-valued)";
schemaType["CURRENCY_TYPE"] = "Number (value in default currency)";
schemaType["BOOLEAN_TYPE"] = "Boolean (true or false)";
schemaType["FLOAT_TYPE"] = "Floating point decimal";

// Mail settings - this copy here has a local copy of the values shared by all connectors in the project
var mailSettings = {
	smtpHost: "",
	smtpPort: 25,
	emailTo: "",
	notificationsSent: null
};

// Keep track of last conn Entry after a putEntry() call
var lastConn = null;

// feed properties object; cleared and used for each entry
var feedProps = {
	staticPrimaryParentId: null,
	parentType: null,
	parentLoc: null,
	derivedPrimaryParentId: null,
	currencyIsoCodes: new java.util.HashMap(), // isoCode for each mapped CURRENCY_TYPE value per iteration

	clear : function() {
		this.staticPrimaryParentId = null;
		this.parentType = null;
		this.parentLoc = null;
		this.derivedPrimaryParentId = null;
		this.currencyIsoCodes.clear();
	},

	recoverPrimaryParentIdFromFeed : function(entry) {
		if (typeof entry.primaryparentType !== "undefined" && entry.primaryparentType !== null &&
			typeof entry.primaryparentLocation !== "undefined" && entry.primaryparentLocation !== null)
		{
			this.parentType = entry.primaryparentType.getValue();
			this.parentLoc = entry.primaryparentLocation.getValue();

			if (this.parentType !== null && this.parentType !== "" &&
				this.parentLoc !== null && this.parentLoc !== "")
			{
				if (params.getParentObjectType(this.parentType) !== null) {
					this.derivedPrimaryParentId = params.getParentObjectIdFromTypeAndLoc(this.parentType, this.parentLoc);
				}

				if (this.derivedPrimaryParentId === null) {
					var msg = "A primaryParentId could not be derived from the feed's parentType '" + this.parentType +
						"' and parentLocation '" + this.parentLoc + "' properties for this entry." +
						"Verify that the parentType is a legitimate parent type for an object of type '" +
						params.object + "' and that the parentLocation is correct.";
					logmsg("WARN", msg);
					sendEmailNotification(msg);
				}
			}
		}
	},

	obtainPrimaryParentIdFromFeed : function(entry) {
		var msg = "";
		var parentObjectType = null;

		if (typeof entry !== "undefined" && entry instanceof com.ibm.di.entry.Entry) {

			// First check if a valid primary parent id value was included in the feed
			if (typeof entry.primaryParentId !== "undefined" && entry.primaryParentId !== null &&
				isPrimaryParentIdValid(entry.primaryParentId.getValue()))
			{
				this.staticPrimaryParentId = entry.primaryParentId.getValue();
			}

			// Otherwise check if it can be derived from the feed's parentType and parentLocation values
			else if (typeof entry.parentType !== "undefined" && entry.parentType !== null &&
				typeof entry.parentLocation !== "undefined" && entry.parentLocation !== null)
			{
				this.parentType = entry.parentType.getValue();
				this.parentLoc = entry.parentLocation.getValue();

				if (this.parentType !== null && this.parentType !== "" &&
					this.parentLoc !== null && this.parentLoc !== "")
				{
					parentObjectType = params.getParentObjectType(this.parentType);

					if (parentObjectType !== null) {
						this.derivedPrimaryParentId = params.getParentObjectIdFromTypeAndLoc(this.parentType, this.parentLoc);
					}

					if (this.derivedPrimaryParentId === null) {
						msg = "A primaryParentId could not be derived from the feed's parentType '" + this.parentType +
							"' and parentLocation '" + this.parentLoc + "' properties for this entry." +
							"Verify that the parentType is a legitimate parent type for an object of type '" +
							params.object + "' and that the parentLocation is correct.";
						logmsg("WARN", msg);
						sendEmailNotification(msg);
					}
				}
			}
		}
	}
};

// parameters container object
var params = {
	url : "",
	root : "/grc/api",
	username : "",
	password : "",

	//
	// The grc object name, such as "Submandate" or "Mandate".  Should be set in the connector settings form.
	//
	object : "",

	//
	// The grc object id, looked up from the object name specified in the "object" property above
	//
	objectId : null,

	query : "",
	schema : null,
	defaultPrimaryParentObjectId : null, // derived from op_parentType, op_parentLoc props in connector.properties
	http : null,
	current : null,
	deBug : false,
	parentType : "", // from connector.properties file for deriving defaultPrimaryParentObjectId only
	parentLoc : "", // from connector.properties file for deriving defaultPrimaryParentObjectId only
	validPrimaryParentIds : null,
	invalidPrimaryParentIds : null,
	smtpHost: "",
	smtpPort: 25,
	mailTo: "",
	defaultCurrencyIsoCode: "",
	largeStringMaxSize: 256000,

	//
	// Resource caches that are loaded via query to OpenPages
	//
	fieldDefinitions : null,
	templates : null,
	typesById : null,
	typesByName : null,
	typeDetailsByName : null,

	//
	// Properties shared across all members of an assembly line (instance of java.lang.System.getProperties()).
	// This will be used to cache results of OP queries that will not change over the lifetime of the
	// assembly line, such as type and field definitions, preventing unnecessary reloading of common data.
	//
	properties : null,

	getHttp : function() {
		if (! this.http) {
			this.http = system.getConnector("ibmdi.HTTPClient");
			this.http.initialize(null);
		}

		return this.http;
	},

	refresh : function() {
		var paramVal;
		this.getHttp();
		for (var pname in this) {
			if (typeof this[pname] !== "function") {
				paramVal = connector.getParam(pname);
				if (paramVal != null || pname == "query") {
					this[pname] = paramVal;
				}
			}
		}
		if (!this.url.endsWith(this.root)) {
			this.url += this.fixPath(this.root);
		}
	},

	apply : function() {
		for (var pname in this) {
			if (typeof this[pname] !== "function") {
				this.getHttp().setParam(pname, this[pname]);
			}
		}

		if (this.deBug !== "true") this.deBug = false;
	},

	fixPath : function(path) {
		if (!path.startsWith("/")) {
			path = "/" + path;
		}
		return path;
	},

	initialize : function() {
		this.refresh();
		this.apply();

//		this.properties = java.lang.System.getProperties();
		this.properties = new java.util.Properties();

		// Process the SMTP/mail properties
		var hostname = java.net.InetAddress.getLocalHost().getHostName();
		mailSettings.mailSubject = "(Do Not Reply) OpenPages Connector error ";
		mailSettings.mailFrom = "TDI-Administrator-on-" + hostname + "@" + hostname;
		mailSettings.notificationsSent = new java.util.HashSet();
		mailSettings.smtpHost = this.smtpHost ? this.smtpHost : "";
		mailSettings.smtpPort = this.smtpPort ? this.smtpPort : 25;
		mailSettings.mailTo = this.mailTo ? this.mailTo : "";

		// Disable mail notifications if important mailing properties were not specified
		if (mailSettings.smtpHost === "" || mailSettings.mailTo === "") {
			mailSettings.smtpHost = "";
		}

		// verify required properties are at least present from processing properties files
		if (this.url === null || this.url === "" || this.url.endsWith("/")) {
			throwException("Required property op_url must be set to a valid URL (with no trailing '/' character).");
			return null;
		}
		if (this.username === null || this.username === "") {
			throwException("Required property op_username must be set to a valid OpenPages login user name.");
			return null;
		}
		if (this.password === null || this.password === "") {
			throwException("Required property op_conn_password must be set to the password for the specified OpenPages login (op_username) property.");
			return null;
		}
		if (this.object === null || this.object === "") {
			throwException("Required property op_object must be set to a valid OpenPages object type.");
			return null;
		}

		// Ensure that if the API root was not specified that the default is used
		if (this.root === undefined || this.root === null || this.root === "null" || this.root == "") {
			this.root = "/grc/api";
		}

		if (!this.url.endsWith(this.root)) {
			this.url += this.fixPath(this.root);
		}

		var obj = this.object;
		this.getHttp().initialize(null);

		this.objectId = null;

		if (obj != null) {
			var thisType = this.getTypeByName(obj);
			if (thisType != null) {
				this.objectId = thisType.id;
				logmsg("INFO", "Object is " + obj + " and object id is " + this.objectId);
			}
		}

		// Process the parent type and the parent location properties from the properties file
		// to establish the default primary parent to use when the feed does not provide a
		// static or dynamically derived primaryParentId
		this.validPrimaryParentIds = new java.util.HashSet();
		this.invalidPrimaryParentIds = new java.util.HashSet();

		// Obtain the default currency ISO code to use in case the feed does not provide one
		// when a currency amount is included.
		this.defaultCurrencyIsoCode = this.getDefaultCurrencyIsoCode();

		// Obtain the registry setting for the Large String's maximum value
		this.largeStringMaxSize = this.getLargeStringMaxValue();

		if (this.object === "Mandate" && this.parentType !== "SOXBusEntity") {
			throwException("Invalid parent type set for Mandate.  Must be set to SOXBusEntity");
		}

		// log the property values obtained from the various properties file(s)
		logmsg("INFO", "The OpenPages Connector configuration properties used for this instance are:" +
			"\n\tURL (op_url):                          " + this.url +
			"\n\tUser Id (op_username):                 " + this.username +
			"\n\tGRC Object (op_object):                " + this.object +
			"\n\tQuery (op_query):                      " + this.query +
			"\n\tParent Object Type (op_parentType):    " + this.parentType +
			"\n\tParent Object Location (op_parentLoc): " + this.parentLoc +
			"\n\tDebug log (op_deBug):                  " + this.deBug +
			"\n\tURI Root (op_root):                    " + this.root +
			"\n\tSMTP Host (smtpHost):                  " + mailSettings.smtpHost +
			"\n\tSMTP Port (smtpPort):                  " + mailSettings.smtpPort +
			"\n\tMail To (mailTo):                      " + mailSettings.mailTo + "\n"
		);

		if (mailSettings.smtpHost && mailSettings.smtpHost != "" && mailSettings.mailTo && mailSettings.mailTo != "") {
			system.setJavaProperty("mail.smtp.host", mailSettings.smtpHost);
			system.setJavaProperty("mail.smtp.port", mailSettings.smtpPort);

			//TEST:
			//sendEmailNotification("This is a test email from the OP Connector.");
		}
	},

	getDefaultPrimaryParentObjectId : function() {
		if (! this.defaultPrimaryParentObjectId) {
			var msg;

			var defaultParentObjectType = this.getParentObjectType(this.parentType);

			if (defaultParentObjectType !== null) {
				this.defaultPrimaryParentObjectId = this.getParentObjectIdFromTypeAndLoc(this.parentType, this.parentLoc);
				if (this.defaultPrimaryParentObjectId === null) {
					msg = "The Parent Object Location property (op_parentLoc='" + this.parentLoc +
						"') from the properties file is not valid. Verify that op_parentType '" +
						this.parentType + "' is a legitimate parent type for object '" + this.object +
						"' and that the specified parent location is correct.";
					logmsg("WARN", msg);
					sendEmailNotification(msg);
				}
			}
			else {
				msg = "The Parent Type property (op_parentType='" + this.parentType + "') from the " +
					"properties file is not valid.";
				logmsg("WARN", msg);
				sendEmailNotification(msg);
			}

			if (this.defaultPrimaryParentObjectId === null) {
				msg = "The default primaryParentId derived from the Parent Type property " +
					"(op_parentType) and the Parent Location property (op_parentLoc) " +
					"from the properties file is not valid. " +
					"Unable to establish a default primaryParentId for this assembly line run.";
				logmsg("WARN", msg);
				sendEmailNotification(msg);

				this.defaultPrimaryParentObjectId = "not_found";
			}
		}

		return this.defaultPrimaryParentObjectId === "not_found" ? null : this.defaultPrimaryParentObjectId;
	},

	setCurrent : function(entry) {
		this.current = entry;
	},

	getObjectType : function(entryOrType) {
		if (typeof entryOrType === "undefined") { entryOrType = params.object; }
		var objectType = null;

		if (entryOrType instanceof com.ibm.di.entry.Entry) {
			var typeAttVal = entry.getString("$grcObjectType");
			if (typeAttVal !== null) {
				objectType = typeAttVal;
			}
			if (objectType == null) {
				typeAttVal = entry.getString("typeDefinitionId");
				if (typeAttVal !== null) {
					objectType = params.getTypeById(typeAttVal);
				}
			}
		} else {
			objectType = String(entryOrType)
		}

		//if (typeof objectType == "string" && objectType.toLowerCase().startsWith("file")) {
		//	objectType = 4; // EH hardcoding 4 for file type (attachment)
		//}

		if (objectType == null || objectType.trim().length == 0) {
			objectType = params.object;
		}

		return objectType;
	},

	getCachedTemplate : function(objectType) {
		var key = objectType.trim().toLowerCase();
		return this.templates.get(key) || this.properties.get("OP_TMPL_" + key);
	},

	setCachedTemplate : function(objectType, template) {
		var key = objectType.trim().toLowerCase();
		this.templates[key] = template;
		this.properties.put("OP_TMPL_" + key, template);
	},
	
	typeToTemplate : function(fieldDefObj, objectType) {
		//fieldDefs = fieldDefObj.fieldDefinitions.fieldDefinition;
		var fieldDefs = this.getFieldDefinitions(fieldDefObj.name);
		
		var template = {
			fields: {
				field: []
			}
		};
		
		var fields = template.fields.field;
		
		//var fieldNames = fieldDefs.keySet().toArray();
		for (var fieldName in fieldDefs){
			var fieldDef = fieldDefs.get(fieldName);
			if (typeof fieldDef == "object" && fieldDef.id) {
				var field = {
					id: fieldDef.id,
					name: fieldDef.name,
					dataType: fieldDef.dataType
				};
				if (field.dataType == "ENUM_TYPE") {
					field.enumValue = fieldDef.enumValues.enumValue[0];
				}
				fields.push(field);
			}
		}
		
		return template;
	},

	getTemplate : function(entryOrType) {
		var templateObj = null;

		if (this.templates == null) {
			this.templates = new java.util.HashMap();
		}

		var objectType = this.getObjectType(entryOrType);
		var objectDef = this.getTypeByName(objectType);
		var objectId = objectDef.id;

		var template = this.getCachedTemplate(objectType);

		if (template == null) {
			template = new java.util.HashMap();

			if (this.deBug) logmsg("DEBUG", "Retrieving template for " + objectType);
			try {
				templateObj = makeRequest({	url : "/contents/template?typeId=" + objectId,
					where : "params.getTemplate"});
			}
			catch (ex) {
				//templateObj = null;   EH - trying to build template from objectDef
				//if (this.deBug) logmsg("DEBUG", "Exception occurred; details:\n" + ex);
				templateObj = this.typeToTemplate(objectDef, objectType);
			}

			if (templateObj == null || templateObj.length == 0) {
				throwException(message["No template found for GRC object type"] + ": " + objectType);
				return null;
			}

			var fds = templateObj.fields.field;
			for (var i = 0; fds != null && i < fds.length; i++) {
				var fd = fds[i];
				template.put(fd.name.trim().toLowerCase(), fd);
			}

			template.put("$grcObjectType", objectType);

			this.setCachedTemplate(objectType, template);
		}

		return template;
	},

	getFieldDefinition : function(objectType, fieldName) {
		if (!fieldName) {
			fieldName = objectType;
			objectType = this.object;
		}
		var fieldDefs = this.getFieldDefinitions(objectType);
		return fieldDefs.get(fieldName.toLowerCase().trim());
	},

	getFieldDefinitions : function(entryOrType) {
		var schema = null;

		if (typeof entryOrType === "undefined") { entryOrType = params.object; }

		if (this.fieldDefinitions == null) {
			this.fieldDefinitions = new java.util.HashMap();
		}

		var objectType = this.getObjectType(entryOrType);
		var fieldDefs = this.getCachedFieldDefinition(objectType);

		if (fieldDefs == null) {
			fieldDefs = new java.util.HashMap();

			if (this.deBug) logmsg("DEBUG", "Retrieving field definitions for " + objectType);
			try {
				schema = makeRequest({	url : "/types/" + objectType,
					where : "params.getFieldDefinitions"});
			}
			catch (ex) {
				schema = null;
				if (this.deBug) logmsg("DEBUG", "Exception occurred; details:\n" + ex);
			}

			if (schema == null || schema.fieldDefinitions == null) {
				throwException(message["No field definitions returned for GRC object type"] + ": "
					+ objectType + "  RESPONSE: " + toJson(schema)
					+ ". A valid op_object must be specified; aborting assembly line run.");
				return null;
			}

			var fds = schema.fieldDefinitions.fieldDefinition;
			for (var i = 0; fds != null && i < fds.length; i++) {
				var fd = fds[i];
				fieldDefs.put(fd.name.trim().toLowerCase(), fd);
			}

			fieldDefs.put("$grcObjectType", objectType);

			this.setCachedFieldDefinition(objectType, fieldDefs);
		}

		return fieldDefs;
	},

	getCachedFieldDefinition : function(objectType) {
		if (! this.fieldDefinitions) {
			this.fieldDefinitions = new java.util.HashMap();
			return null;
		}

		var key = objectType.trim().toLowerCase();
		var fieldDefs = this.fieldDefinitions.get(key);
		return fieldDefs || this.properties.get("OP_FIELDDEF_" + key);
	},


	setCachedFieldDefinition : function(objectType, fieldDef) {
		var key = objectType.trim().toLowerCase();
		this.fieldDefinitions.put(key, fieldDef);
		this.properties.put("OP_FIELDDEF_" + key, fieldDef);
	},

	getTypeById : function(id) {
		var ids = this.getTypesById(id);
		return ids.get(id);
	},

	getTypeByName : function(type) {
		var types = this.getTypesByName(type);
		if (type.toLowerCase().startsWith("file")) {
			return 4; // EH hardcoding type 4 here for file (attachement)
		}
		return types.get(type);
	},

	getTypesByName : function() {
		if (this.typesByName != null) {
			return this.typesByName;
		}

		this.getTypesById();
		return this.typesByName;
	},

	getCachedTypes : function() {
		if (! this.typesById) {
			this.typesById = this.properties.get("OPTypesByID");
			if (this.typesById) {
//				this.typesByName = java.lang.System.getProperties().get("OPTypesByName");
				this.typesByName = this.properties.get("OPTypesByName");
			}
		}

		return this.typesById;
	},

	setCachedTypes : function(typesById, typesByName) {
		this.typesById = typesById;
		this.typesByName = typesByName;
		this.properties.put("OPTypesByID", typesById);
		this.properties.put("OPTypesByName", typesByName);
	},

	getTypesById : function() {
		var reply = null;

		if (this.getCachedTypes()) {
			return this.typesById;
		}

		var typesById = new java.util.HashMap();
		var typesByName = new java.util.HashMap();

		try {
			reply = makeRequest({
				"verb" : "GET",
				"url" : "/types",
				"ctype" : "application/json",
				"where" : "params.getTypesById"
			});
		}
		catch (ex) {
			throw ex;
			reply = null;
			if (this.deBug) logmsg("DEBUG", "Exception occurred; details:\n" + ex);
		}

		if (reply == null || typeof reply.length === "undefined" || typeof reply.length == 0) {
			throwException(message["No types returned by OpenPages"] + " RESPONSE: - "
				+ toJson(reply)
				+ ".\nEnsure that the OpenPages server is running and that the op_url, op_root, "
				+ "op_username and op_conn_password properties are valid.");
		}

		for (var i = 0; i < reply.length; i++) {
			typesById.put(reply[i].id, reply[i]);
			typesByName.put(reply[i].name, reply[i]);
		}

		this.setCachedTypes(typesById, typesByName);

		return this.typesById;
	},

	getCachedObjectDetails : function(objectType) {
		return this.typeDetailsByName && this.typeDetailsByName.get(objectType);
	},

	setCachedObjectDetails : function(objectType, details) {
		if (! this.typeDetailsByName) {
			this.typeDetailsByName = new java.util.HashMap();
		}

		this.typeDetailsByName.put(objectType, details);
	},

	// Perform a lookup of the specified parent object type to verify that it exists.
	// Return the parent object type (as JSON), or null if the type does not exist.
	getParentObjectType : function(ptype) {
		var reply = null;

		if (!ptype || ptype === "") {
			logmsg("INFO", "No value specified for parent object type.");
			return null;
		}

		ptype = ptype.trim();

		var parentObjectTypeAsJson = this.getCachedObjectDetails(ptype);
		if (parentObjectTypeAsJson) {
			return parentObjectTypeAsJson;
		}

		if (this.deBug) logmsg("DEBUG", "Retrieving definition for parent object type " + ptype);
		try {
			reply = makeRequest({	url : "/types/" + ptype,
				where : "params.getParentObjectType"});

			if (reply !== null && reply.fieldDefinitions !== null) {
				parentObjectTypeAsJson = toJson(reply);

				this.setCachedObjectDetails(ptype, parentObjectTypeAsJson);
			}
		}
		catch (ex) {
			logmsg("WARN", "Non-fatal exception occurred while retrieving parent object type '" + ptype +
				"'; details:\n" + ex);
		}

		return parentObjectTypeAsJson;
	},

	// Given the parent type, perform a lookup to verify that it exists. Return the
	// parent object Id, or null if it does not exist. This method assumes that the
	// ptype parameter has been validated by the getParentType() function.
	getParentObjectIdFromTypeAndLoc : function(ptype, ploc) {
		var reply = null;
		var parentObjectId = null;

		if (!ptype || ptype === "") {
			logmsg("INFO", "No value specified for parent object type.");
			return null;
		}

		if (!ploc || ploc === "") {
			logmsg("INFO", "No value specified for parent object location.");
			return null;
		}

		ptype = ptype.trim();
		ploc = ploc.trim();
		ploc = this.fixPath(ploc); // ensures that the location starts with a '/'

		// Search for the parent object instance of the given ptype at the specified location.
		// There should be one and only one match if the provided location is correct.
		var queryUrl = "query?q=SELECT * FROM [" + ptype + "] WHERE [Location] LIKE '" + ploc + "'";
		if (this.deBug) logmsg("DEBUG", "Retrieving parent object with relative location: " + ploc);

		try {
			reply = makeRequest({	url : queryUrl,
				where : "params.getParentObjectIdFromTypeAndLoc"});
			if (reply !== null && typeof reply.rows !== "undefined" && reply.rows.length === 1) {
				if (isPrimaryParentIdValid(reply.rows[0].fields.field[0].value)) {
					parentObjectId = reply.rows[0].fields.field[0].value;
				}
			}
		}
		catch (ex) {
			if (this.deBug) logmsg("DEBUG", "Exception occurred; details:\n" + ex);
		}

		return parentObjectId;
	},

	getDefaultCurrencyIsoCode : function() {
		if (this.defaultCurrencyIsoCode) {
			return this.defaultCurrencyIsoCode;
		}

		var isoCode = this.properties.get("OPDefaultCurrencyIsoCode");
		if (isoCode) {
			this.defaultCurrencyIsoCode = isoCode;
			return isoCode;
		}

		var reply = null;
		isoCode = "USD";

		if (this.deBug) {
			logmsg("DEBUG", "Retrieving default (base) currency ISO code...");
		}

		try {
			reply = makeRequest({
				url : "/configuration/currencies/base",
				where : "this.getDefaultCurrencyIsoCode"
			});

			if (reply !== null && reply.isoCode !== null) {
				isoCode = reply.isoCode;
			}
		} catch (ex) {
			logmsg("WARN",
				"Non-fatal exception occurred while retrieving base currency ISO code;" +
				" using 'USD'. Exception details:\n" + ex);
		}

		this.defaultCurrencyIsoCode = isoCode;
		this.properties.put("OPDefaultCurrencyIsoCode", isoCode);

		return isoCode;
	},

	getLargeStringMaxValue : function() {
		if (this.largeStringMaxSize) {
			return this.largeStringMaxSize;
		}

		var largeStringMaxSize = this.properties.get("OPLargeStringMaxSize");
		if (largeStringMaxSize) {
			this.largeStringMaxSize = largeStringMaxSize;
			return largeStringMaxSize;
		}

		var reply = null;
		var doubleVal = 256000;

		if (this.deBug) logmsg("DEBUG", "Retrieving Large Text maximum value from OP registry...");
		// do a GET of this: "configuration/settings/%2FOpenPages%2FPlatform%2FRepository%2FResource%2FLarge Text%2FMaximum Size"
		try {
			reply = makeRequest({	url : "configuration/settings/%2FOpenPages%2FPlatform%2FRepository%2FResource%2FLarge Text%2FMaximum Size",
				where : "params.getLargeStringMaxValue"});

			if (reply != null && reply.value != null) {
				largeStringMaxSize = reply.value;

				try {
					doubleVal = java.lang.Double.parseDouble(largeStringMaxSize);
				} catch (ex) {
					logmsg("WARN", "Unable to convert Large String Maximum Value of (" + largeStringMaxSize +
						") into a number; using hard-coded value of 256000.");
					doubleVal = 256000;
				}
			}
			else {
				logmsg("WARN", "No response on attempt to retrieve Large String Maximum Value registry setting;" +
					" using hard-coded value of 256000.");
			}
		}
		catch (ex) {
			logmsg("WARN", "Non-fatal exception occurred while retrieving Large String Maximum Value registry setting;" +
				" using hard-coded value of 256000. Exception details:\n" + ex);
		}

		this.largeStringMaxSize = doubleVal;
		this.properties.put("OPLargeStringMaxSize", doubleVal);

		return doubleVal;
	}
};

// result set handler - works similar to an Iterator
var resultSet = {
	set : new java.util.ArrayList(),
	index : 0,
	nextUrl : null,
	objectType : null,

	add : function(jobj) {
		this.set.add(jobj);
	},

	size : function() {
		return this.set.size();
	},

	clear : function() {
		this.set.clear();
		this.index = 0;
	},

	hasNext : function() {
		return (this.set !== null && (this.index < this.set.size() || this.nextUrl != null));
	},

	next : function() {
		if (this.set === null) {
			return null;
		} else {
			//if no results AND no next link, end of list
			if(this.index >= this.set.size() && this.nextUrl == null){
				return null;
			}
			//else if no results but have next link, get result set
			else if(this.index >= this.set.size() && this.nextUrl != null){
				this.getResultSet({url: "/" + this.nextUrl});
			}

			//return next entry
			var n = this.set.get(this.index);
			if (n == null) {
				return null;
			}
			return GrcObjectToEntry(this.set.get(this.index++));
		}
	},
	
	
	executeGrcObjectQuery : function(queryPath, ignoreCache) {
		return this.makeRequest({
			ignoreCache : ignoreCache,
			verb : "GET",
			ctype : "application/json;charset=utf-8",
			url : "/query?q=" + queryPath.replace(" ", "+") + "&caseInsensitive=true",
			where : "executeGrcObjectSetQuery"
		});
	},

	getResultSet : function(args) {
		var verb = args.verb || "GET";	// HTTP method, e.g. GET, POST, PUT, ...
		var url = args.url || "";		// url for the request. May be partial (only the path & query string params)
		// var body = args.body;	// HTTP body to be passed for the request
		var ctype = args.ctype || "application/json";	// Content-Type of the HTTP body
		var where = args.where || "";	// where this method is called from - for debugging purposes
		var reply = null;
		var query = args.query || "";
		
		if (query != "") {
		 	url = "/query?q=" + query.replace(" ", "+") + "&caseInsensitive=true";
		}
		
		this.clear();
		if (params.deBug) logmsg("DEBUG", "Issuing " + verb + " request to URL: " + url);

		try {
			reply = makeRequest({verb : verb,
				url : url,
				ctype : ctype,
				where : where + "resultSet.getResultSet"});
		}
		catch (ex) {
			reply = null;
			logmsg("WARN", "Exception occurred while processing result set from REST request to OpenPages; continuing...");
			if (params.deBug) logmsg("DEBUG", "Exception occurred; details:\n" + ex);
		}

		var i;
		if (reply !== null) {
			if (typeof reply.rows !== "undefined") {
				var rows = reply.rows;
				for (i = 0; i < rows.length; i++) {
					this.add(rows[i]);
				}
			}
			else {
				this.add(reply);
			}

			// check for next link
			if (typeof reply.links !== "undefined") {
				this.nextUrl = null;
				for (i = 0; i < reply.links.length; i++) {
					if(reply.links[i].rel == "next"){
						this.nextUrl = reply.links[i].href;
					}
				}
			}
		}
	}
};

function ensureInitialized() {
	params.refresh();
	if (!initialized) {
		initializeConnector();
		selectConnectorEntries();
	}
}

// functions follow
function initializeConnector() {
	logmsg("INFO", "OpenPages Connector version: " + version);
	if (initialized) {
		terminate();
	}

	params.initialize();

	initialized = true;
}

function terminate() {
	initialized = false;
	params.getHttp().terminate();
}

function selectEntries() {
	ensureInitialized();
}

function selectConnectorEntries(args) {
	//if (!initialized) { notInitializedError(); }
	ensureInitialized();

	if (connector.getParam("object").toLowerCase().startsWith("file")) {
		return {};
	}

	var urlPath = "/query?q=";
	var selectClause, whereClause, query;
	var url;

	if (args) {
		urlPath = (args.urlPath) ? args.urlPath : urlPath;
		selectClause = args.selectClause;
		whereClause = args.whereClause;
	}

	if (!selectClause) {
		selectClause = "SELECT * from [" + params.object + "]";
		if (params.query && params.query.length > 0) {
			selectClause = params.query;
		}
	}

	url = urlPath;

	if (url.equalsIgnoreCase("/query?q=")) {
		query = selectClause;
		if (whereClause && query.indexOf(" WHERE ") < 0) {
			query += whereClause;
		}

		// EH Always add Resource Id to the list of fields returned - at least for the first object listed in the fields list
		query = addIdToQuery(query);

//		url += java.net.URLEncoder.encode(query + "&caseInsensitive=true", "UTF-8");
		url += java.net.URLEncoder.encode(query, "UTF-8");
	}

	resultSet.getResultSet({ verb : "GET",
		url : url,
		ctype : "application/json",
		where : "selectConnectorEntries"});

}

function addIdToQuery(query) {
	query = query.trim();
	var queryLC = query.toLowerCase();
	
	if (!queryLC.startsWith("select")) {
		return query;
	}
	
	var fromP = queryLC.indexOf(" from ");
	if (fromP < 0) {
		return query;
	}
	
	var attList = query.substring("select ".length, fromP).trim();
	var attListLC = attList.toLowerCase();
	
	if (attList == "*") {
		return query;
	}
	
	// Now determine which objects are being read based on the field list. 
	// If required by args.needId then add .["Resource ID"] for first Object found
	
	// First first field specifier
	var p = attList.indexOf("].[");
	if (p < 0) {
		return query;
	}

	var objectName = attList.substring(1, p);
	
	var requiredAtt = "[" + objectName + "].[Resource ID]";
	if (attListLC.contains(requiredAtt.toLowerCase())) {
		return query;
	}
	
	attList += " " + requiredAtt + " as _UNIQUE_ID_";
	
	var newQuery = query.substring(0, "select ".length)
					+ attList
					+ query.substring(fromP);
					
	log("DEBUG", "Adding " + requiredAtt) + " to query: " + newQuery;;
	return newQuery;
}

function getNextEntry() {
	ensureInitialized();

	var e = resultSet.next();
	if (e !== null) {
		entry.merge(e);
		result.setStatus(1);
	} else {
		result.setStatus(0);
	}

	return entry;
}

function queryReply() {
	var operation = entry.getString("operation") || "* not specified *";
	entry.removeAllAttributes();
	
	switch (operation) {
		case "state":
			if (!initialized) {
				entry.state = "not initialized";
			} else {
				entry.state = "initialized";
			}
		case "get_conn": 
			if (lastConn != null) {
				entry.merge(lastConn);
			}
			break;
		case "select":
			if (!initialized) { 
				ensureInitialized();
			} else {
				params.refresh();
				params.apply();
				selectConnectorEntries();
			}
			break;
		default: throw "Cannot perform queryReply() operation: " + operation;
	}
}

function putEntry() {
	ensureInitialized();

	var grcObj = entryToGrcObject(entry, true /* creating new */);
	var primaryParentId = "<undefined>";
	var objName = (grcObj.name == null || grcObj.name === "" ? "<no name provided>" : grcObj.name);

	if (params.deBug) logmsg("--->\n" + makeJson(grcObj));

	// Only create a new object if a valid primary parent Id is present
	if (typeof grcObj.primaryParentId === "undefined" || grcObj.primaryParentId === null ||
		params.invalidPrimaryParentIds.contains(grcObj.primaryParentId))
	{
		if (typeof grcObj.primaryParentId !== "undefined" && grcObj.primaryParentId !== null) {
			primaryParentId = grcObj.primaryParentId;
		}
		logmsg("WARN", "A null or invalid primaryParentId was detected; not creating a new " +
			params.object + " object.");
	}
	else {
		var response = makeRequest({"verb" : "POST",
			"url" : "/contents",
			"ctype" : "application/json",
			"where" : "putEntry",
			"body" : makeJson(grcObj)});
		logmsg("INFO", "Created new " + params.object + " object named '" + objName + "'");
		// Now return the new Resource ID in the conn Entry
		var fields = response.fields.field;
		for (var i = 0; i < fields.length; i++) {
			var field = fields[i];
			if (field.name == "Resource ID") {
				var newID = system.toInt(field.value)
				entry["Resource ID"] = newID;
				lastConn = entry;
			} else {
				entry[field.name] = field.value;
			}
		}
	}
}

function modEntry() {
	ensureInitialized();

	var grcObj = entryToGrcObject(entry, false /* modifying existing */);
	var primaryParentId = "<undefined>";
	var objName = (grcObj.name == null || grcObj.name === "" ? "<no name provided>" : grcObj.name);
	var i;

	if (params.deBug) logmsg("--->\n" + makeJson(grcObj));

	// If no primary parent Id is present, or if the primary parent Id is present
	// AND it is valid then update the object
	if (   (typeof grcObj.primaryParentId === "undefined")
		|| (grcObj.primaryParentId !== null && grcObj.primaryParentId !== "" &&
		params.validPrimaryParentIds.contains(grcObj.primaryParentId))
	)
	{
		// This if-clause only works for ucf_integration. The function is to modify and correct Requirements' primary
		// parent back to the Business Entity after adding other Sub-mandate parents (Parent-child association);
		// And collect a set of parents' attribute values and map them to Requirements' fields. Aug, 2016
		if(params.object == "Requirement"){
			var preReply = makeRequest({"verb" : "GET",
				"url" : "/contents/" + params.current.getString("Resource ID"),
				"ctype" : "application/json"});
			var preserveFields = ["UCF-Req:Supporting Requirements","UCF-Req:Associated Mandates","UCF-Req:Guidance"];
			var existingField = preReply.fields.field;

			var tempSuppReq = null;
			var tempADCommonName = null;
			var tempGuidance = null;

			for(i = 0; i< existingField.length;i++){
				if(existingField[i].name == preserveFields[0]){
					tempSuppReq = existingField[i].value
				}else if(existingField[i].name == preserveFields[1]){
					tempADCommonName = existingField[i].value
				}else if(existingField[i].name == preserveFields[2]){
					tempGuidance = existingField[i].value
				}
			}

			var newField = grcObj.fields.field;

			for(i = 0; i< newField.length;i++){
				if(newField[i].name == preserveFields[0]){
					newField[i].value = (tempSuppReq.contains(newField[i].value))? tempSuppReq : tempSuppReq + newField[i].value
				}else if(newField[i].name == preserveFields[1]){
					newField[i].value = (tempADCommonName.contains(newField[i].value))? tempADCommonName : tempADCommonName + newField[i].value
				}else if(newField[i].name == preserveFields[2]){
					newField[i].value = (tempGuidance.contains(newField[i].value))? tempGuidance : tempGuidance + newField[i].value
				}
			}
		}

		makeRequest({"verb" : "PUT",
			"url" : "/contents/" + params.current.getString("Resource ID"),
			"ctype" : "application/json",
			"where" : "modEntry",
			"body" : makeJson(grcObj)});
		logmsg("INFO", "Updated existing " + params.object + " object named '" + objName + "'");
		if(params.object == "Requirement"){
			feedProps.recoverPrimaryParentIdFromFeed(entry);
			grcObj.primaryParentId = feedProps.derivedPrimaryParentId;
			setGrcPrimaryParentIdFromFeedPropsOrDefault(grcObj,"primaryParentId");

			makeRequest({"verb" : "PUT",
				"url" : "/contents/" + params.current.getString("Resource ID"),
				"ctype" : "application/json",
				"where" : "modEntry",
				"body" : makeJson(grcObj)});
			logmsg("INFO", "Set existing " + params.object + " object named '" + objName + "'" +
				" to correct primary parent value "+grcObj.primaryParentId +".");
		}
	}
	else {
		if (typeof grcObj.primaryParentId !== "undefined" && grcObj.primaryParentId !== null) {
			primaryParentId = grcObj.primaryParentId;
		}
		logmsg("WARN", "A null or invalid primaryParentId was detected; not updating existing " +
			params.object + " object named '" + objName + "'.");
	}
}

function findEntry() {
	ensureInitialized();

	var res = grcWhereClause(search);

	params.setCurrent(null);
	feedProps.clear(); 	// clear out the feed props for each new entry

	selectConnectorEntries({
		urlPath : res.path,
		whereClause : res.where,
		selectClause: res.query
	});

	if (resultSet.size() == 1) {
		var e = resultSet.next();
		entry.merge(e);
		result.setStatus(1);
		params.setCurrent(e);
	} else
	if (resultSet.size() > 1) {
		while (resultSet.hasNext()) {
			connector.addFindEntry(resultSet.next());
		}
		result.setStatus(1);
	} else {
		result.setStatus(0);
	}
}

function deleteEntry() {
	ensureInitialized();

	try {
		makeRequest({"verb" : "DELETE",
			"url" : "/contents/" + params.current.getString("Resource ID"),
			"ctype" : "application/json",
			"where" : "deleteEntry"});
	}
	catch (ex) {
		logmsg("ERROR", "Unable to delete existing object; an exception occured in the " +
			"OpenPages server: " + ex);
	}
}

function querySchema(objectType) {
	ensureInitialized();

	if (typeof objectType === "undefined" || objectType == null) {
		objectType = params.object;
	}

	if (objectType.toLowerCase().startsWith("file")) { // EH hardcoding for "file"
		var fields = [
			{ name: "name", type: "String (f.ex. document.docx)" },
			{ name: "extension", type: "String (f.ex. docx)" },
			{ name: "type", type: "String (f.ex. word)" },
			{ name: "description", type: "String" },
			{ name: "content", type: "String or Byte Array" },
			{ name: "primaryParentId", type: "Integer" } 
		];
		for (var i = 0; i < fields.length; i++) {
			var e = system.newEntry();
			var field = fields[i];
			e.addAttributeValue("name", field.name);
			e.addAttributeValue("syntax", field.type);
			list.add(e);
		}	
	} else {
		var fieldDefs = params.getFieldDefinitions(objectType);
		var keys = fieldDefs.keySet().toArray();
		java.util.Arrays.sort(keys);
	
		for (var key in keys) {
			list.add(newSchemaEntry(key, fieldDefs));
		}
	
		for (var i = grcSystemFieldNames.length-1; i > 0; i--) {
			list.add(newSchemaEntry(grcSystemFieldNames[i], grcSystemFieldTypes[i]));
		}
	
		list.add(newSchemaEntry("$grcObject", "JavaScript Object"));
		list.add(newSchemaEntry("$grcObjectType", "String"));
		list.add(newSchemaEntry("$grcObjectJSON", "JSON"));
	}

	result.setStatus(1);
}

function newSchemaEntry(key, fieldDefs) {
	var e = new com.ibm.di.entry.Entry();

	if (typeof fieldDefs === "string" || typeof fieldDefs[key] === "string") {
		e.addAttributeValue("name", key);
		e.addAttributeValue("syntax", fieldDefs);
	} else {
		e.addAttributeValue("name", fieldDefs[key].name);
		e.addAttributeValue("syntax", getSchemaType(fieldDefs, key));
	}

	return e;
}

function grcWhereClause(search) {
	var where = "";
	var path = null;
	var query = null;
	var critList = search.getCriteria();
	var type = params.object;
	var boolOp = "AND";
	if (search.getType() == search.SEARCH_OR) {
		boolOp = "OR";
	}

	for (var crit in critList) {
		var fieldDef = params.getFieldDefinition(crit.name);
		if (fieldDef == null) {
			throw "The link criteria of the OpenPages connector specifies a field name (" + crit.name + ") that does not belong " +
				"to the chosen OpenPages object type (" + type + ").  Either the link criteria or the chosen OpenPages object " +
				"has changed and is out of sync with the other.  Check both settings and try again.";
		}

		if ("Resource ID".equalsIgnoreCase(fieldDef.name)
			&& crit.match == search.EXACT
			&& search.getType() == search.SEARCH_AND) {
			path = "contents/" + crit.value;
			query = null;
			where = null;
			break;
		}
		where += (where.length == 0) ? "" : " " + boolOp + " ";
		where += "[" + type + "].[" + fieldDef.name + "]";
		where += grcClause(crit, fieldDef);
	}

	return {where: " WHERE " + where, path: path, query: query};
}

function grcClause(criteria, fieldDef) {
	var match = criteria.match;
	var value = criteria.value;

	if (!"INTEGER_TYPE".equals(fieldDef.dataType)
		&& !"CURRENCY_TYPE".equals(fieldDef.dataType)) {
		value = "'" + criteria.value + "'";
	}

	if (match == com.ibm.di.server.SearchCriteria.EXACT
		|| match == com.ibm.di.server.SearchCriteria.EXCACT) {
		return " = " + value;
	} else
	if (match == com.ibm.di.server.SearchCriteria.FINAL_STRING) {
		return " LIKE '%" + criteria.value + "'"
	} else
	if (match == com.ibm.di.server.SearchCriteria.GREATER_THAN) {
		return " > " + value;
	} else
	if (match == com.ibm.di.server.SearchCriteria.GREATER_THAN_OR_EQUAL) {
		return " >= " + value;
	} else
	if (match == com.ibm.di.server.SearchCriteria.INITIAL_STRING) {
		return " LIKE '" + criteria.value + "%'"
	} else
	if (match == com.ibm.di.server.SearchCriteria.LESS_THAN) {
		return " < " + value;
	} else
	if (match == com.ibm.di.server.SearchCriteria.LESS_THAN_OR_EQUAL) {
		return " <= " + value;
	} else
	if (match == com.ibm.di.server.SearchCriteria.SUBSTRING) {
		return " LIKE '%" + criteria.value + "%'"
	} else {
		throw "Unknown match type: " + match;
	}
}

function getSchemaType(fieldDefs, key) {
	var type = "?undefined " + key + "?";
	var fieldDef = fieldDefs[key];
	if (typeof fieldDef !== "undefined" || fieldDef != null) {
		var fieldType = schemaType[fieldDef.dataType];
		if (fieldType != null) {
			type = fieldType;
			if ("true".equalsIgnoreCase(fieldDef.readOnly)) {
				type += " (read only)";
			} else
			if ("true".equalsIgnoreCase(fieldDef.required)) {
				type += " (required)";
			}
		}
	}
	return type;
}

function fixTypeObj(ext) {
	ext = ext || "txt";
	switch (ext) {
		case "xls": 	return {type: "application/vnd.ms-excel", id: 46, ext: ext};
		case "xlsx": 	return {type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", id: 53, ext: ext};
		case "docx":	return {type: "application/vnd.openxmlformats-officedocument.wordprocessingml.document", id: 73, ext: ext};
		case "rtf":		return {type: "text/richtext", id: 13, ext: ext};
		case "txt":		return {type: "text/plain", id: 9, ext: ext};
		case "html":	return {type: "text/html", id: 1, ext: ext};
		case "htm":		return {type: "text/html", id: 2, ext: ext};
		case "pdf":		return {type: "application/pdf", id: 44, ext: ext};
		case "ppt": 	return {type: "application/vnd.ms-powerpoint", id: 56, ext: ext};
		case "doc":		return {type: "application/msword", id: 70, ext: ext};
		default: return {type: "application/msword", id: 70, ext: ext};
	}
}

// Funcion to add file details to a SOXDocument
function addFileDetails(grcObj, entry) {
	var name = entry.getString("name");
	var p = name.lastIndexOf(".");
	var ext = entry.getString("extension") || ((p > 0) ? name.substring(p+1) : "txt");
	if (p > 0) {
		name = name.substring(0,p);
	}

	var type = entry.getString("type");
	
	var encode = true;
	typeobj = fixTypeObj(ext);
	
	var content = entry.getObject("content");
	if (encode) {
		if (typeof content != "[B") { // If not a byte array, then the request is wrong
			var errormsg = "The content Attribute must be a Byte Array for this type of file";
			logmsg("ERROR", "Error writing file object - " + errormsg);
			throw errormsg;
		}
		content = system.base64Encode(content);
	}	
	
	grcObj.contentDefinition = {
	        attribute: {
	        	type: typeobj.type
	        },
	        children: content
    };
	grcObj.fileTypeDefinition = {
	        id: typeobj.id,
	        mimeType: typeobj.type,
	        fileExtension: typeobj.ext
    };
    
    return grcObj;
}

function entryToGrcObject(entry, creatingNew) {
	if (typeof creatingNew === "undefined") { creatingNew = true; }

	var i, length;
	var grcObj = entry.getObject("$grcObject");

	// Place holder for future use (ucf_integration_control)
	var grcObjType = entry.getObject("$grcObjectType");
	if(grcObjType != null) {
		params.object = grcObjType;
		var thisType = params.getTypeByName(grcObjType);
		if (thisType != null) {
			params.objectId = thisType.id;
		}
	}

	params.getObjectType(entry);

	if (grcObj == null || typeof grcObj !== "object") {
		var readOnly = [];
		var required = [];

		if (params.object.toLowerCase().startsWith("file")) {
			var mandatoryFields = ["name", "content"];
			for (var i = 0; i < mandatoryFields.length; i++) {
				if (entry[mandatoryFields[i]] == null) {
					required.push(mandatoryFields[i]);
				}
			}
			
			if (required.length > 0) {
				var errmsg = "Required Attributes are missing from the output map: " + required.join(", ");
				logmsg("ERROR", errmsg);
				throw errmsg;
			} else {
				var name = entry.getString("name");
				var p = name.lastIndexOf(".");
				var ext = entry.getString("extension") || ((p > 0) ? name.substring(p+1) : "txt");
				if (p > 0) {
					name = name.substring(0,p);
				}
			
				var type = entry.getString("type");
				
				var encode = true;
				typeobj = fixTypeObj(ext);
				
				var content = entry.getObject("content");
				if (encode) {
					if (typeof content != "[B") { // If not a byte array, then the request is wrong
						var errormsg = "The content Attribute must be a Byte Array for this type of file";
						logmsg("ERROR", "Error writing file object - " + errormsg);
						throw errormsg;
					}
					content = system.base64Encode(content);
				}	
				
				grcObj = {
					name: name,
				    contentDefinition: {
				        attribute: {
				        	type: typeobj.type
				        },
				        children: content
				    },
				    fileTypeDefinition: {
				        id: typeobj.id,
				        mimeType: typeobj.type,
				        fileExtension: typeobj.ext
				    },
				    fields: {},
				    typeDefinitionId: "4"
				};
				
				var optionalFields = ["description", "primaryParentId"];
				for (var i = 0; i < optionalFields.length; i++) {
					var fieldName = optionalFields[i];
					if (entry[fieldName] != null) {
						grcObj[fieldName] = entry.getObject(fieldName);
					}
				}
			}
		} else {
			grcObj = {fields : {field : []}};
	
			var fieldDefs = params.getFieldDefinitions(entry);
			var templates = params.getTemplate(entry);
			
			var objectType = fieldDefs.get("$grcObjectType");
	
			grcObj.typeDefinitionId = params.getTypeByName(objectType).id;
	
			// It is possible that the system field value for primaryParentId may not be specified.
			// If it is it will be used. If it is not, there may be feed-provided values for
			// "parentType" and "parentLocation" that can be used to derive the primaryParentId.
			// Obtain the static (or dynamically derived) value of the primaryParentId from the
			// feed now so that addGrcSystemField() can use the proper value.
			feedProps.obtainPrimaryParentIdFromFeed(entry);
	
			for (i = 0, length = grcSystemFieldNames.length; i < length; i++){
				addGrcSystemField(grcObj, grcSystemFieldNames[i], entry);
			}
	
			var keys = templates.keySet().toArray();
			java.util.Arrays.sort(keys);
	
			for (var key in keys) {
				if (key.startsWith("$")) {
					continue;
				}
				var fieldDef = fieldDefs.get(key);
				var att = entry.getAttribute(fieldDef.name);
	
				if (fieldDef.readOnly && att != null){
					readOnly.push(fieldDef);
				} else
				if (fieldDef.required && att == null && creatingNew) {
					if (!fieldDef.readOnly) {
						required.push(fieldDef);
					}
				}
				else if (att !== null) {
					addGrcField(grcObj, att, fieldDef);
				}
			}

			var fields;
			if (required.length > 0) {
				fields = [];
				for (i = 0; i < required.length; i++) {
					fields.push(required[i].name);
				}
				throwException(message["The following fields are required"] + ": " + fields.join(", "));
			}
	
			if (readOnly.length > 0) {
				fields = "";
				for (i = 0; i < readOnly.length; i++) {
					fields += (fields.length == 0 ? "" : ", ") + readOnly[i].name;
				}
				logmsg("WARN", message["The following fields are readOnly and cannot be written"] + ": " + fields);
			}
			
			if (entry.primaryParentId) {
				grcObj.primaryParentId = entry.getObject("primaryParentId");
			}
			
			if (objectType.equalsIgnoreCase("SOXDocument")) {
				grcObj = addFileDetails(grcObj, entry);
			}
		}
	}

	return grcObj;
}

// This function is for use when setting an entry's primaryParentId
function setGrcPrimaryParentIdFromFeedPropsOrDefault(grcObj, name) {

	// If a valid primaryParentId was included in the feed for this entry then use it
	if (feedProps.staticPrimaryParentId !== null) {
		grcObj[name] = feedProps.staticPrimaryParentId;
		logmsg("INFO", "Using the static primaryParentId value '" + feedProps.staticPrimaryParentId +
			"' supplied in the feed.");
	}

	// otherwise if a primaryParentId was derived from the feed properties then use it
	else if (feedProps.derivedPrimaryParentId !== null) {
		grcObj[name] = feedProps.derivedPrimaryParentId;
		logmsg("INFO", "Using the primaryParentId value '" + feedProps.derivedPrimaryParentId +
			"' derived from the feed's parentType and parentLocation values.");
	}

	// otherwise use the default parent object ID (if any)
	else {
		var defaultPrimaryParentObjectId = params.getDefaultPrimaryParentObjectId();

		if (defaultPrimaryParentObjectId) {
			grcObj[name] = defaultPrimaryParentObjectId;

			logmsg("INFO", "A primaryParentId was not supplied in or derived from the feed; using " +
				"the default primaryParentId value '" + defaultPrimaryParentObjectId +
				"' derived from the op_parentType and op_parentLoc properties. ");
		}
		else {
			logmsg("WARN", "A primaryParentId was not supplied in or derived from the feed, " +
				"and a default primaryParentId is not defined.");
		}
	}
}

function addGrcSystemField(grcObj, name, entry) {
	var att = entry[name];

	// Special handling is required for the "typeDefinitionId" and "primaryParentId" system fields
	if (att == null) {
		if ("typeDefinitionId".equalsIgnoreCase(name)) {
			grcObj[name] = params.objectId || grcObj.typeDefinitionId;
		}
		else if ("primaryParentId".equalsIgnoreCase(name)) {
			setGrcPrimaryParentIdFromFeedPropsOrDefault(grcObj, name);
		}
	}

	// The attribute value is not null but special handling is needed for "primaryParentId"
	// (the primaryParentId to use is set up via feedProps.obtainPrimaryParentIdFromFeed)
	else if ("primaryParentId".equalsIgnoreCase(name)) {
		setGrcPrimaryParentIdFromFeedPropsOrDefault(grcObj, name);
	}

	// no special handling needed for this field, just set it
	else {
		grcObj[name] = att.getValue();
	}
}

function truncateStringForGrcField(stringValue, maxAllowedLength) {
	var truncatedStr = stringValue;
	if (stringValue.length >= maxAllowedLength) {
		truncatedStr = stringValue.substring(0, Math.min(stringValue.length(), maxAllowedLength-5));
		if (stringValue.length >= maxAllowedLength-4) {
			truncatedStr += "...";
		}
	}
	return truncatedStr;
}

function addGrcField(grcObj, att, fieldDef) {
	var grcField = {dataType : fieldDef.dataType, id : fieldDef.id, name : fieldDef.name};
	var inError = [];
	var attValue = null;
	var field = grcObj.fields.field;
	var addedValue = false;
	var message = "";
	var truncatedStr, eval;

	if (params.deBug) logmsg("DEBUG", "--> Attempting to add " + att.toString() + "   field: " + fieldDef.id);

	if (att !== null && att.size() > 0) {
		attValue = att.getValue(0);
	}

	if (attValue != null) {
		try {
			switch(fieldDef.dataType) {
				case "STRING_TYPE": // string length limited to 4000 chars
					truncatedStr = truncateStringForGrcField(attValue, 4000);
					grcField.value = truncatedStr;
					addedValue = true;
					break;
				case "MEDIUM_STRING_TYPE": // string length limited to 32000 chars
					truncatedStr = truncateStringForGrcField(attValue, 32000);
					grcField.value = truncatedStr;
					addedValue = true;
					grcField.dataType = "STRING_TYPE";//nan -  OP server doesn't recognize MEDIUM_STRING_TYPE
					break;
				case "LARGE_STRING_TYPE": // string length limited to OP registry setting for largeStringMaxSize
					truncatedStr = truncateStringForGrcField(attValue, params.largeStringMaxSize);
					grcField.value = truncatedStr;
					addedValue = true;
					break;
				case "ID_TYPE":
				case "BOOLEAN_TYPE":
				case "FLOAT_TYPE":
					grcField.value = attValue;
					addedValue = true;
					break;
				case "INTEGER_TYPE":
					grcField.value = attValue;
					addedValue = true;
					break;
				case "ENUM_TYPE":
					eval = enumValue(attValue, fieldDef);
					if (eval != null) {
						grcField.enumValue = enumValue(attValue, fieldDef);
						addedValue = true;
					}
					else {
						message = "Attempt to add value of '" + attValue +
							"' to enumerated field definition '" + fieldDef.name +
							"' was not allowed to object type '" + params.object + "'." +
							" The assembly line mapping will need to be modified.";
						logmsg("WARN", message);
						sendEmailNotification(message);
					}
					break;
				case "MULTI_VALUE_ENUM":
					grcField.enumValue = [];
					for (var i = 0; i < att.size(); i++) {
						eval = enumValue(att.getValue(i), fieldDef);
						if (eval != null) {
							grcField.enumValue.push(eval);
							addedValue = true;
						}
						else {
							message = "Attempt to add value of '" + attValue +
								"' to multi-enumerated field definition '" + fieldDef.name +
								"' was not allowed to object type '" + params.object + "'." +
								" The assembly line mapping will need to be modified.";
							logmsg("WARN", message);
							sendEmailNotification(message);
						}
					}
					break;
				case "DATE_TYPE":
					var dateValue;
					if (attValue instanceof java.util.Date) {
						dateValue = attValue;
					} else {
						dateValue = parseDateValue(attValue);
					}
					if (dateValue !== null) {
						// "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" // works but TZ is not accurate

						// TDI 7.1.1 uses Java 6, so we cannot use format string "yyyy-MM-dd'T'HH:mm:ss.SSSXXX"
						// (which *is* supported in Java 7 and newer). So, we are using format string
						// "yyyy-MM-dd'T'HH:mm:ss.SSSZ" and are manually inserting the colon into place at the
						// end of the string in the 4 digits that follow the last "-" or "+" character, and
						// (if present) we remove the ':' directly in front of the 'T'.
						// Example: convert 2013-10-07T07:36:13.000-0400 to 2013-10-07T07:36:13.000-04:00
						// Example: convert 2013-10-07:T07:36:13.000-0400 to 2013-10-07T07:36:13.000-04:00

						var sdf = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
						var timeDate = sdf.format(dateValue);
						timeDate = timeDate.replace(":T", "T");

						var timeDateStr = new java.lang.String(timeDate);
						var insertColonPos = timeDateStr.length()-2;
						var firstPart = timeDateStr.substring(0, insertColonPos);
						var lastPart = timeDateStr.substring(insertColonPos, timeDateStr.length());

						grcField.value = new java.lang.String(firstPart + ":" + lastPart);
						addedValue = true;
					}
					break;
				case "CURRENCY_TYPE":
					// Mapping format required for a currency value in the feed must follow this example:
					//      "123.45|AUD"
					// If no ISO code is supplied then the OP Base ISO code is used.

					var valueStr = new java.lang.String(attValue.trim());
					if (valueStr == "") {
						break;
					}

					var separatorIndex = valueStr.indexOf("|");
					var amount = "";
					var doubleVal = null;
					var isoCode = "";

					// parse out the amount and the ISO code from the provided attValue string
					if (separatorIndex !== -1) {
						amount = valueStr.substring(0, separatorIndex).trim();
						isoCode = valueStr.substring(separatorIndex+1).trim();
					}
					else {
						amount = valueStr.trim();
					}

					// ensure that the amount is a valid double value
					try {
						doubleVal = java.lang.Double.parseDouble(amount);
					} catch (ex) {
						logmsg("ERROR", "Detected missing or invalid amount '" + amount + "' in the value "
							+ "specified from the feed for CURRENCY_TYPE field '" + fieldDef.name
							+ "'. Skipping this currency value.");
						break;
					}

					// ensure that the ISO code is not empty
					if (separatorIndex === -1 || isoCode === null || isoCode === "") {
						isoCode = params.defaultCurrencyIsoCode;
						logmsg("WARN", "Detected missing or invalid ISO code in the value "
							+ "specified from the feed for CURRENCY_TYPE field '" + fieldDef.name
							+ "'. Using the OpenPages default ISO code of '" + isoCode + "'.");
					}

					grcField.baseAmount = amount;
					grcField.localAmount = amount;

					// keep track of this field's ISO code for use when creating the JSON for OP
					feedProps.currencyIsoCodes.putIfAbsent(fieldDef.id, isoCode);

					addedValue = true;
					break;
			}
		} catch (ex) {
			inError.push(message["Error creating GRC field"] + " - " + ex + " --> " + att.toString());
		}
	}

	if (inError.length > 0) {
		throwException(toJson(inError));
	}

	if (addedValue) {
		field[field.length] = grcField;
	}

	return grcField;
}

function enumValue(attValue, fieldDef) {
	var enumValues = fieldDef.enumValues.enumValue;
	if (attValue == null) {
		return null;
	}

	attValue = attValue.trim();
	for (var i = enumValues.length-1; i >= 0; i--) {
		var thisValue = enumValues[i];
		if (attValue.equalsIgnoreCase(thisValue.name) ||
			attValue.equalsIgnoreCase(thisValue.localizedLabel ||
				attValue.equalsIgnoreCase(thisValue.index))) {
			return {index: thisValue.index,
				hidden: thisValue.hidden,
				name: thisValue.name,
				id: thisValue.id,
				localizedLabel: thisValue.localizedLabel};
		}
	}

	return null;
}

function parseDateValue(attValue) {
	if (typeof attValue === "undefined" || attValue == null) {
		return null;
	}

	var dt = system.parseDate(attValue, "EEE MMM dd HH:mm:ss z yyyy");

	if (dt == null) {
		dt = system.parseDate(attValue, ISOdateMask1);
	}
	if (dt == null) {
		dt = system.parseDate(attValue, ISOdateMask2);
	}
	if (dt == null) {
		try {
			var df = java.text.DateFormat.getDateInstance();
			dt = df.parse(attValue);
		} catch (ex) {
			dt = null;
		}
	}

	return dt;
}

// requests the client cert from the service and installs it into the SDI keystore
function getCertificate () {
	com.ibm.di.security.GetSSLCertificate.installCertificateFrom(params.url, 443);
}

// examine the reply from OpenPages for any errors returned
function verifyResponse(replyEntry, url) {
	var respCode = replyEntry.getString("http.responseCode");
	if (respCode == "404") {
		// ignore NOT FOUND
	} else
	if (!respCode.startsWith("2")) {
		throwException(message["Error from"]
			+ " OpenPages server - code: " + respCode
			+ "  message: " + replyEntry.getString("http.responseMsg")
			+ "\nURL: " + url
			+ "\nHTTP Body returned: " + replyEntry.getString("http.bodyAsString"));
	}
}

// Replaces \/ with /
function fixBody(body) {
	return String(body).replace(/\\\//g, "/");
}

// workhorse function that handles all comms with OpenPages. It accepts a single
// argument that is a Javascript object containing the properties set in the first
// lines of the function. Note that many of these properties are optional and that
// default values are set by the script is not specified.
//
function makeRequest(args) {
	var verb = args.verb;	// HTTP method, e.g. GET, POST, PUT, ...
	var url = args.url;		// url for the request. May be partial (only the path & query string params)
	var body = args.body;	// HTTP body to be passed for the request
	var ctype = args.ctype;	// Content-Type of the HTTP body
	var where = args.where;	// where this method is called from - for debugging purposes

	// set default values for missing params/properties
	if (verb == null) { verb = "GET"; }
	if (url == null) { url = ""; }
	if (ctype == null) { ctype = "application/json"; }
	if (where == null) { where = ""; }

	// prepend the base url if not found in the url passed to the function
	if (url.toLowerCase().indexOf(params.url.toLowerCase()) < 0) {
		url = params.url + params.fixPath(url);
	}

	requestEntry.removeAllAttributes();

	if (typeof body !== "undefined" && body !== null && body.trim().length > 0) {
		requestEntry["http.body"] = fixBody(body);
	}

	// set Connector parameters
	params.getHttp().setParam("method", verb.toUpperCase());
	params.getHttp().setParam("url", url);

	// prepare the request Entry (used for POST/PUT calls)
	requestEntry["http.Content-Type"] = ctype;
	requestEntry["http.Accept"] = "application/json";
	requestEntry["http.Connection"] = "keep-alive";
	requestEntry["http.remote_user"] = params.username;
	requestEntry["http.remote_pass"] = params.password;

// the following are not used for now:
//
//	requestEntry["http.Accept-Encoding"] = "gzip, deflate";
//	requestEntry["http.Accept-Language"] = "en-US,en;q=0.5";
//	requestEntry["http.User-Agent"] = "IBM Security Directory Integrator";
//	requestEntry["http.Authorization"] = "BASIC " + system.base64Encode(String(user + ":" + password).getBytes());

	// add any cookies received on previous calls
	if (cookies.size() > 0) {
//		requestEntry["X-CouchDB-WWW-Authenticate"] = "Cookie";
		requestEntry.merge(cookies);
	}

	// if Detailed Log is enabled then write request details to the log
	if (params.deBug) {
		logDetails({msg : message["Request to"] + " OpenPages",
			obj : requestEntry,
			url : url,
			verb : verb,
			ctype : ctype,
			where : where});
	}

	var retry = 0;
	var maxRetry = 2;
	var retEntry = null;

	// this loop makes the actual request. If an SSL handshake error occurs, attempt to retrieve
	// and import the client certificate and inform the user that TDI must be restarted.
	//
	do {
		try {
			retEntry = params.getHttp().queryReply(requestEntry);
		} catch (ex) {
			if (ex instanceof javax.net.ssl.SSLHandshakeException && false) {
				if (retry == 0) {
					getCertificate();
				} else {
					throwException(message["You must restart the SDI server in order for the imported certificate to be trusted."])
				}
			} else {
				throw ex;
			}
		}
/*	
		// For some object types , template queries are different	
		var code = retEntry.getString("http.responseCode");
		var msg = retEntry.getString("http.responseMsg");
		var p = url.indexOf("/template?typeId=");
		var body = retEntry.getString("http.bodyAsString");
		if(code == "400" 
		 	&& body.contains("Bad Request - Document object template requires fileTypeId to be set.")
		 	&& p > 0 ){
		 	 var p2 = url.lastIndexOf("=");	
			 url = url.substring(0,p) + "/" + url.substring(p2+1);
			 params.getHttp().setParam("url", url);
			 retEntry = null;
		}
*/
		retry++;
	} while (retEntry === null && retry < maxRetry);

	// if Detailed Log is enabled, write reply details to the log
	if (params.deBug) {
		logDetails({"msg" : message["Response from"] + " OpenPages",
			"entry" : retEntry});
	}

	verifyResponse(retEntry, url);

	// parse the reply from OpenPages
	return parseReply(retEntry);
}

function parseReply(replyEntry) {
	var body = replyEntry.getString("http.bodyAsString");
	var code = replyEntry.getString("http.resultCode");

	if (body == null || body.trim().length == 0 || "404".equals(code)) {
		return;
	}

	try {
//		if (params.deBug) logmsg("DEBUG", "body: " + body);
		var jobj = fromJson(body);

		// save any cookies passed back
		var setCookie = replyEntry.getAttribute("http.Set-Cookie");
		if (setCookie !== null) {
			for (var i = 0; i < setCookie.size(); i++) {
				var thisCookie = setCookie.getValue(i);
				var p = thisCookie.indexOf("=");
				if (p > 0) {
					cookies["http." + thisCookie.substring(0,p)] = thisCookie.substring(p+1);
				}
			}
		}
	} catch (ex) {
		throwException(message["Unable to parse JSON return from"] + " OpenPages - " + ex);
	}

	return jobj;
}

// wrapper function for throwing exceptions. Otherwise exceptions thrown will be 'script' exceptions
function throwException(msg) {
	logmsg("ERROR", msg); // will also send an email notification
	throw new java.lang.IllegalArgumentException(msg);
}

// wrapper function for writing log messages
function logmsg(lvl, msg) {
	if (typeof lvl === "undefined") { lvl = ""; }
	if (typeof msg === "undefined") {
		msg = lvl;
		lvl = "INFO";
	}

	// if Detailed Log is enabled then log output is also sent to the stdout
	if (params.deBug) {
		java.lang.System.out.println(msg);
	}

	try {
		task.logmsg(lvl, msg);
	} catch (ex) {
		main.logmsg(lvl, msg);
	}

	// send an email notification
	if (lvl === "ERROR") {
		sendEmailNotification(msg);
	}
}

// write request or reply details to the log
function logDetails(params) {
	var msg = params.msg;
	var obj = params.obj;
	var url = params.url;
	var verb = params.verb;
	var ctype = params.ctype;
	var where = params.where;

	if (msg == null) {
		msg = message["Unnamed entry"];
	}

	var s = new java.lang.StringBuffer();

	if (where != null) {
		s.append("\n@@@------> (" + where + ") " + msg);
	} else {
		s.append("\n---------> " + msg);
	}


	if (verb != null) { s.append("   " + verb.toUpperCase()); }
	if (ctype != null) { s.append("   " + ctype); }
	if (url != null) { s.append("   " + url); }
	s.append("\n");

	if (obj != null) {
		if (obj instanceof com.ibm.di.entry.Entry) {
			var attNames = obj.getAttributeNames();
			for (var a in attNames) {
				// include all "http.*" attributes, except bodyAsBytes
				if (a.indexOf("http.") >= 0
					&& !"http.bodyAsBytes".equalsIgnoreCase(a)
					&& !"http.remote_pass".equalsIgnoreCase(a) ) {
					s += " " + a + ": " + obj[a] + "\n";
				}
			}
		} else {
			s.append(obj.toString());
		}
	}
	logmsg(s.toString());
}

function notInitializedError() {
	throwException("The OpenPages Connector must be initialized before use.");
}

/**
 * @return {null}
 */
function GrcObjectToEntry(jobj) {
	var entry = system.newEntry();
	var inError = [];
	var i;

	try {
		var type = null;

		var links = jobj.links;
		if (typeof links !== "undefined") {
			for (i = 0; i < links.length; i++) {
				if ("describedby".equals(links[i].rel.toLowerCase().trim())) {
					type = links[i].href.substring(9);
					var p = type.indexOf("?");
					type = type.substring(0, p);
				}
			}
			if (type !== null) {
				entry["$grcObjectType"] = type;
			}
		}

		var fields = jobj.fields.field;
		if (fields !== "undefined") {
			for (i = 0; i < fields.length; i++) {
				addGrcAttribute(entry, fields[i]);
			}
		}

		if (entry.size() > 0) {
			entry["$grcObject"] = jobj;
			entry["$grcObjectJSON"] = makeJson(jobj);
		}
	} catch (ex) {
		inError.push(message["Error parsing json from OpenPages"] + " - " + ex + "  -> " + makeJson(jobj));
	}

	if (inError.length > 0) {
		throwException(toJson(inError));
	}

	if (entry.size() === 0) {
		return null;
	} else {
		return entry;
	}
}

function addGrcAttribute(entry, field) {
	if (typeof field === "undefined" || field == null) { return; }

	var fieldName = field.name;
	var fieldValue = field.value;

	if (typeof fieldName !== "undefined" && fieldName != null && fieldName.trim().length > 0) {

		fieldName = fieldName.trim();

		try {
			switch(field.dataType) {
				case "STRING_TYPE":
				case "MEDIUM_STRING_TYPE":
				case "LARGE_STRING_TYPE":
				case "ID_TYPE":
				case "BOOLEAN_TYPE":
					if (fieldValue) {
						addAttributeValue(entry, fieldName, fieldValue);
					}
					break;
				case "FLOAT_TYPE": // Handles any floating point decimal value as a double value
					if (fieldValue) {
						var doubleVal = 0.0;
						try {
							doubleVal = java.lang.Double.parseDouble(fieldValue);
						} catch (ex) {
							doubleVal = "Error parsing floating point value: " + fieldValue;
						}
						addAttributeValue(entry, fieldName, doubleVal);
					}
					break;
				case "INTEGER_TYPE":
					if (fieldValue) {
						var intValue = 0;
						try {
							intValue = system.toInt(fieldValue);
						} catch(ex) {
							intValue = "Error parsing integer value: " + fieldValue;
						}
						addAttributeValue(entry, fieldName, intValue);
					} else {
						entry[fieldName] = null;
					}
					break;
				case "ENUM_TYPE":
					if (field.enumValue) {
						if (typeof field.enumValue.name !== "undefined") {
							addAttributeValue(entry, fieldName, field.enumValue.name);
						}

						if (field.enumValue.index){
							addAttributeValue(entry, fieldName + "_index", field.enumValue.index);
						}
					}
					break;
				case "MULTI_VALUE_ENUM":
					if (typeof field.multiEnumValue !== "undefined") {
						var enums = field.multiEnumValue.enumValue;
						if (typeof enums !== "undefined" && enums.length > 0) {
							for (var i = 0; i < enums.length; i++) {
								addAttributeValue(entry, fieldName, enums[i].name, false);
							}
						}
					}
					break;
				case "DATE_TYPE":
					if (fieldValue) {
						if (fieldValue && fieldValue.endsWith("Z")) {
							fieldValue = fieldValue.substr(0, fieldValue.length-1);
						}
						var dateValue = system.parseDate(fieldValue,
							"yyyy-MM-dd'T'HH:mm:ss.SSS");

						if (dateValue == null) {
							logmsg("WARN", message["Unable to parse DATE_TYPE value for"] + " " + fieldName + ": " + fieldValue);
						}
						addAttributeValue(entry, fieldName, dateValue);
					}
					break;
				case "CURRENCY_TYPE":
					addAmount(entry, fieldName, "", field.baseAmount, field.baseCurrency);
					addAmount(entry, fieldName, "_localAmount", field.localAmount, field.localCurrency);
					break;
			}
		} catch (ex) {
			if (params.deBug) logmsg("DEBUG", "--!!--> Error parsing GRC field: " + toJson(field) + " - " + ex);
		}
	}
}

function addAttributeValue(entry, attName, attValue, replace) {
	if (typeof attName === "undefined" || attName == null) { return; }

	if (typeof replace === "undefined" || !"false".equalsIgnoreCase(replace)) { replace = true; }

	if (typeof attValue === "undefined" || attValue == null) {
		entry[attName] = entry.returnJavaNull;
	} else if (replace) {
		entry.setAttribute(attName, attValue);
	} else {
		entry.addAttributeValue(attName, attValue);
	}
}

function addAmount(entry, attName, attSuffix, attValue, currency) {
	if (typeof attName === "undefined" || attName == null) { return; }

	var doubleVal;
	try {
		doubleVal = java.lang.Double.parseDouble(attValue);
	} catch (ex) {
		doubleVal = "Error parsing amount: " + attValue + " - " + ex;
	}

	addAttributeValue(entry, attName + attSuffix, doubleVal);

	if (typeof currency !== "undefined" && typeof currency.isoCode !== "undefined") {
		addAttributeValue(entry, attName + attSuffix + "_currency", currency.isoCode);
	}
}

function nl(pad) {
	if (params.deBug) {
		return "\n                                            ".substring(0, (pad*4)+1);
	} else {
		return "";
	}
}

function makeEnumJson(enumVal) {
	var json = new java.lang.StringBuffer();

	json.append(nl(6) + '{"index" : ' + enumVal.index + ','
		+ nl(6) + '"hidden" : ' + enumVal.hidden + ','
		+ nl(6) + '"id" : "' + enumVal.id + '",'
		+ nl(6) + '"name" : "' + enumVal.name + '",'
		+ nl(6) + '"localizedLabel" : "' + enumVal.localizedLabel + '"}');

	return json.toString();
}

function makeCurrencyJson(field, prop) {
	var json = new java.lang.StringBuffer();

	// The baseCurrency and localCurrency properties contain properties of
	// their own; special handling is performed here
	if (prop == "baseCurrency" || prop == "localCurrency") {
		var thisField = field[prop];

		json.append('"' + prop + '" :'
			+ nl(6) + '{"isoCode" : "' + thisField.isoCode + '",'
			+ nl(6) + '"name" : "' + thisField.name + '",'
			+ nl(6) + '"symbol" : "' + thisField.symbol + '",'
			+ nl(6) + '"precision" : ' + thisField.precision + ','
			+ nl(6) + '"isBaseCurrency" : ' + thisField.isBaseCurrency + ','
			+ nl(6) + '"isEnabled" : ' + thisField.isEnabled + ','
			+ nl(6) + '"id" : "' + thisField.id + '"}');

		return json.toString();
	}
	else {
		// Ensure that the localAmount has a localCurrency, which is
		// required for setting or updating a currency amount in OP. It
		// gets added here automatically since the currency field definition
		// does not specify any metadata for the ISO code.
		var isoCode = feedProps.currencyIsoCodes.get(field.id);

		if (prop == "localAmount" && isoCode !== null) {

			json.append('"' + prop + '" : ' + field[prop] + ','
				+ nl(4) + '"localCurrency" : '
				+ nl(6) + '{"isoCode" : "' + isoCode + '"},');

			return json.toString();
		}
		else {
			// all other currency properties are 'simple'
			return '"' + prop + '" : ' + field[prop];
		}
	}
}

function makeValueJson(field, prop) {
	var json = new java.lang.StringBuffer();
	var thisField = field[prop];
	if ("MULTI_VALUE_ENUM".equals(field.dataType)) {
		json.append(nl(4) + '"multiEnumValue" : {'
			+ nl(5) + '"enumValue" : [');
		for (var i = 0; i < thisField.length; i++) {
			json.append(makeEnumJson(thisField[i]) + ",");
		}
		json.setLength(json.length()-1);
		json.append(nl(5) + "]" + nl(4) + "}");
	}
	else if ("ENUM_TYPE".equals(field.dataType)) {
		json.append(nl(4) + '"enumValue" : ' + makeEnumJson(thisField));
	}
	else if ("CURRENCY_TYPE".equals(field.dataType)) {
		json.append(nl(4) + makeCurrencyJson(field, prop));
	}
	else {
		json.append(nl(4) + '"value" : ' + toJson(thisField));
	}

	return json.toString();
}

function makeFieldsJson(fields) {
	var json = new java.lang.StringBuffer();

	for (var i = 0; i < fields.length; i++) {
		var field = fields[i];
		json.append(nl(3) + "{"
			+ nl(4) + '"dataType" : "' + field.dataType + '",'
			+ nl(4) + '"id" : "' + field.id + '",'
			+ nl(4) + '"name" : "' + field.name + '",'
		);
		for (var prop in field) {
			if (!"dataType".equals(prop)
				&& !"id".equals(prop)
				&& !"name".equals(prop)) {
				json.append(makeValueJson(field, prop) + ",")
			}
		}
		json.setLength(json.length()-1);
		json.append(nl(3) + "},");
	}

	if (json.length()>0) {
		json.setLength(json.length()-1);
	}
	return json.toString();
}

function makeJson(jobj) {
	if (connector.getParam("object").startsWith("file")) {
		return toJson(jobj);
	}
	
	return toJson(jobj); // EH I have short-circuited the logic of this function
	
	var trueJSON = toJson(jobj);
	
	// EH the code below looks crappy to me
	
	var json = new java.lang.StringBuffer("{");
	for (var prop in jobj) {
		if (typeof jobj[prop] !== "object") {
			json.append(nl(1) + '"' + prop + '" : "' + jobj[prop] + '",');
		}
	}

	json.append(nl(1) + '"fields" : { ' + nl(2) + '"field" : [');

	json.append(makeFieldsJson(jobj.fields.field));

	json.append(nl(2) + "]" + nl(1) + "}" + nl(0) + "}");

	var thisJSON = json.toString();
	
	//logmsg()
	
	return thisJSON;
}

function isPrimaryParentIdValid(id) {
	var isValid = false;
	var typeDefnId = null;
	var reply = null;

	if (params.deBug) logmsg("DEBUG", "Verifying that the specified parent id is valid: " + id);

	if (!id || id === "" || params.invalidPrimaryParentIds.contains(id)) {
		return false;
	}
	if (params.validPrimaryParentIds.contains(id)) {
		return true;
	}

	// the id must be a number
	try {
		system.toInt(id);
	}
	catch (e0) {
		params.invalidPrimaryParentIds.add(id);
		return false;
	}

	// The specified id is not yet known to the connector; try getting it to ensure it exists
	try {
		reply = makeRequest({	"verb" : "GET",
			url : "/contents/" + id,
			where : "isPrimaryParentIdValid"});
		typeDefnId = reply.typeDefinitionId;
	}
	catch (e1) {
		reply = null;
		if (params.deBug) logmsg("DEBUG", "Exception occurred; details:\n" + e1);
	}

	if (reply === null || typeof reply.id === "undefined" || reply.id !== id) {
		isValid = false;
	}

	// Verify the object is a parent 'type' based on its typeDefinitionId and associations
	else {
		try {
			reply = makeRequest({	"verb" : "GET",
				url : "/types/" + params.object + "/associations/parents",
				where : "isPrimaryParentIdValid"});
		}
		catch (e2) {
			reply = null;
			isValid = false;
			if (params.deBug) logmsg("DEBUG", "Exception occurred; details:\n" + e2);
		}

		// The entry with the matching id must have a relationship of "Parent"
		for (var i = 0; reply !== null && i < reply.length; i++) {
			if (reply[i].id === typeDefnId && reply[i].relationship.trim().toLowerCase() === "parent") {
				isValid = true;
				break;
			}
		}
	}

	if (isValid === true) {
		params.validPrimaryParentIds.add(id);
	} else {
		params.invalidPrimaryParentIds.add(id);
	}

	return isValid;
}

// Send an email if mail has been configured
function sendEmailNotification(error) {
	var didSend = false;
	var alreadySent = mailSettings.notificationsSent.contains(error);

	if (mailSettings.smtpHost != "" && alreadySent === false) {
		didSend = system.sendMail(mailSettings.mailFrom, mailSettings.mailTo,
			mailSettings.mailSubject,
			"Additional instances of this error will not be reported via email for the " +
			"current scheduled run.\n\nReported Issue:\n\n" + error,
			null);

		// remember this error to avoid mailing duplicates for this assembly line run
		mailSettings.notificationsSent.add(error);
		java.lang.Thread.sleep(100); // avoids overwhelming the SMTP server

		if (didSend !== null) {
			logmsg("WARN", "Attempt to send email was not successful for message [" + error + "]\n\tReason: " + didSend);
		}
	}
}]]></parameter>
                <parameter name="smtpPort">25</parameter>
                <parameter name="url">@SUBSTITUTE{property.POC_MVP:op.url}</parameter>
                <parameter name="user"/>
                <parameter name="username">@SUBSTITUTE{property.POC_MVP:op.username}</parameter>
                <parameter name="view"/>
            </Configuration>
            <ComputeChanges>false</ComputeChanges>
            <Parser>
                <InheritFrom>[parent]</InheritFrom>
            </Parser>
            <AttributeMap name="Input">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <AttributeMap name="Output">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <DeltaSettings>
                <WhenToCommit>After every database operation</WhenToCommit>
                <RowLocking>SERIALIZABLE</RowLocking>
                <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
            </DeltaSettings>
            <Schema name="Input">
                <InheritFrom>[parent]</InheritFrom>
            </Schema>
            <Schema name="Output">
                <InheritFrom>[parent]</InheritFrom>
            </Schema>
            <LinkCriteria>
                <InheritFrom>[parent]</InheritFrom>
            </LinkCriteria>
            <Hooks>
                <InheritFrom>[parent]</InheritFrom>
                <Hook name="default_fail">
                    <InheritFrom>/Scripts/Hook_Default_On_Error</InheritFrom>
                    <Name>default_fail</Name>
                    <Enabled>true</Enabled>
                </Hook>
                <Hook name="initialize_fail">
                    <InheritFrom>/Scripts/Hook_On_Error</InheritFrom>
                    <Name>initialize_fail</Name>
                    <Enabled>true</Enabled>
                </Hook>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <Reconnect>
                <InheritFrom>[parent]</InheritFrom>
                <parameter name="autoreconnect">false</parameter>
                <parameter name="numberOfRetries">10</parameter>
                <parameter name="retryDelay">5</parameter>
                <ReconnectRules/>
            </Reconnect>
            <Operations/>
            <PoolDefinition>
                <InheritFrom>[parent]</InheritFrom>
                <Enabled>false</Enabled>
                <MinPoolSize>0</MinPoolSize>
                <MaxPoolSize>0</MaxPoolSize>
                <PurgeInterval>0</PurgeInterval>
                <InitializeAttempts>1</InitializeAttempts>
                <InitializeSleepInterval>0</InitializeSleepInterval>
            </PoolDefinition>
            <PoolInstance/>
        </Connector>
    <Connector name="TestDataConnector">
            <InheritFrom>system:/Connectors/ibmdi.FormEntryConnector</InheritFrom>
            <ModTime>1594564423952</ModTime>
            <ConnectorMode>Iterator</ConnectorMode>
            <ConnectorState>Enabled</ConnectorState>
            <Configuration>
                <InheritFrom>[parent]</InheritFrom>
                <parameter name="entryRawData"><![CDATA[id:1
first:John
last:Smith
age:42
mail:jsmith@gmail.com
.
id:2
first:Jane
last:Doe
age:21
mail:jane.doe@doe.org
.]]></parameter>
            </Configuration>
            <Parser>
                <InheritFrom>[parent]</InheritFrom>
            </Parser>
            <AttributeMap name="Input">
                <InheritFrom>[parent]</InheritFrom>
                <AttributeMapItem>
                    <Name>*</Name>
                    <Type>simple</Type>
                    <Simple>*</Simple>
                </AttributeMapItem>
            </AttributeMap>
            <AttributeMap name="Output">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <DeltaSettings>
                <WhenToCommit>After every database operation</WhenToCommit>
                <RowLocking>SERIALIZABLE</RowLocking>
                <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
            </DeltaSettings>
            <Schema name="Input">
                <InheritFrom>[parent]</InheritFrom>
            </Schema>
            <Schema name="Output">
                <InheritFrom>[parent]</InheritFrom>
            </Schema>
            <LinkCriteria>
                <InheritFrom>[parent]</InheritFrom>
            </LinkCriteria>
            <Hooks>
                <InheritFrom>[parent]</InheritFrom>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <Reconnect>
                <InheritFrom>[parent]</InheritFrom>
                <ReconnectRules/>
            </Reconnect>
            <Operations/>
            <PoolDefinition>
                <InheritFrom>[parent]</InheritFrom>
            </PoolDefinition>
            <PoolInstance/>
        </Connector>
    </Folder>
    <Folder name="Parsers"/>
    <Folder name="Scripts">
        
        
        
        
        
        
        
        
        
        
        
        
    <Script name="Hook_On_Error">
            <ModTime>1592419102907</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[log("FATAL","error connecting to OpenPages: "+ error.message);
task.shutdown();]]></parameter>
        </Script>
        <Script name="Hook_Default_On_Error">
            <ModTime>1592419102898</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[log("FATAL", "Error reading from OpenPages: " + error.message);
throw error.getObject("Exception");]]></parameter>
        </Script>
        <Script name="Script_Lib">
            <ModTime>1597862050866</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[//vrs = '20200403 1647'; //First version
//vrs = '20200508 1439'; // Added output to std out
//vrs = "20200605 1419"; // Added loadFileToByteArray
//vrs = "20200805 2244"; // Added padding functions
vrs = "20200819 2024"; // log() now accumulates errors and includes AL name if set as param 'alName'

var _OS = java.lang.System.getProperty("os.name");

function log(level, message) {
	if (typeof level == "undefined") {
		message = "";
		level = "INFO";
	} else
	if (typeof message == "undefined") {
		message = level;
		level = "INFO";
	}
	
	var alName = task.getParam("alName");
	var useALName = (alName == null) ? "" : "<" + alName + "> ";
	
	java.lang.System.out.println(level + " : " + useALName + message);
	task.logmsg(level, useALName + message);
	
	if (level == "ERROR"
		&& typeof _errors != "undefined" 
		&& _errors instanceof Array) {
		_errors.push(message);
	}
	if (level == "WARN"
		&& typeof _warnings != "undefined" 
		&& _warnings instanceof Array) {
		_warnings.push(message);
	}
}

log("Script_Lib v" + vrs);

// These global variables are used by the padding functions below
_gblPadStr = ["", ""];
for (_i = 0; _i < 50; _i++) {
	_gblPadStr[0] += "  ";
	_gblPadStr[1] += " .";
}

// Array used for Hex conversions
_hexChars = "0123456789ABCDEF";

//
// function LJ( str, len )				// left-justifies str in a string with length = len
// function RJ( str, len )				// right-justifies str in a string with length = len
// function CJ( str, len )				// center-justifies str in a string with length = len

// Pad out a string to the right - e.g. left-justify str in len spaces
//
function LJ(str, len, lineCnt) 
{
	lineCnt = lineCnt || 0;
	var usePad = _gblPadStr[lineCnt++ % 2];	
	str = String(str); // Cast to JS String object, just in case
	if (len <= str.length)
		return str
	else {
		var padlen = len - str.length;
		var padding = usePad.substring(usePad.length-padlen); 
		return (str + padding);
	}
}


// Pad out a string to the left with spaces - e.g. right-justify str in len spaces
//
function RJ( str, len, lineCnt ) 
{
	lineCnt = lineCnt || 0;
	var usePad = _gblPadStr[lineCnt++ % 2];	
	var str = String(str); // Cast to JS String object, just in case
	if (len <= str.length)
		return str
	else {
		var padlen = len - str.length;
		var padding = usePad.substring(0,padlen); 
		return (padding + str);
	}
}


// Pad out a string on both sides to length (parameter = len) - e.g. centers str in len spaces
//
function CJ( str, len, lineCnt ) 
{
	lineCnt = lineCnt || 0;
	var usePad = _gblPadStr[lineCnt++ % 2];	
	var str = String(str); // Cast to JS String object, just in case
	if ( len <= str.length )
		return str
	else
	{
		var _rightPad = Math.floor((len-str.length) / 2);
		var _leftPad = (len-str.length) - _rightPad;
		return padR( "", _leftPad, usePad ) + str + padR( "", _rightPad );
	}
}

// Error reply back to client
function replyError(code, msg, additionalMsg){
    additionalMsg = additionalMsg || "";
    work.removeAllAttributes();
    work["http.Content-Type"] = "application/json";
    work["http.status"] = code;
    work["http.responseCode"] = code;
    work["http.responseMsg"] = msg;
    work["http.errorMsg"] = additionalMsg || msg;
    work["http.body"] = toJson({
        responseCode: code,
        responseMsg: msg,
        errorMsg: additionalMsg || msg
    });
    log("exiting flow from replyError");
    system.exitFlow(false);
}

// Split filename into name and extension
function getFilenameParts(name) {
	var parts = {
		filename: name,
		extension: "txt"
	}

	var p = name.lastIndexOf(".");

	if (p > 0 && p >= (name.length-5)) {
		parts.extension = name.substring(p+1);
		parts.filename = name.substring(0, p);
	} 

	return parts;
}

// Read file into an Entry object
function fileToEntry(filePath)
{
	var entry = system.newEntry();
	var file = system.openFileForInput(filePath);
	var line;
	while((line = file.readLine()) != null)
	{
		line = line.trim();
		if(line == "")
		{
			continue;
		}
		entry[line] = true;
	}
	file.close();
	return entry;
}

function fileToAttribute(filePath, attributeName)
{
	var attribute = system.newAttribute(attributeName);
	var file = system.openFileForInput(filePath);
	var line;
	while((line = file.readLine()) != null)
	{
		line = line.trim();
		if(line == "")
		{
			continue;
		}
		attribute.addValue(line);
	}
	file.close();
	return attribute;
}

function stackTrace(ex) {
	var sw
	var pw
	if (ex == null) {
		return ""
	}
	try {
		sw = java.io.StringWriter();
		pw = java.io.PrintWriter(sw);
		ex.printStackTrace(pw);
		pw.close();
	} catch (ex2) {
		var sw = ex
	}
	return sw.toString();
}

function loadFileToByteArray(filepath) {
	var file = new java.io.File(filepath);
	var fis = new java.io.FileInputStream(file);
	var bytes = java.util.Arrays.copyOf("".getBytes(), file.length());
	fis.read(bytes); //read file into bytes[]
	fis.close();
	return bytes;
}

function loadFileToString(filepath) {
	var sb = new java.lang.StringBuilder();
	var file = system.openFileForInput(filepath);
	var line;
	while ((line = file.readLine()) != null) {
		sb.append(line + "\n");
	}
	return sb.toString();
}

function loadFileToArray(filepath, delimiter) {
	delimiter = delimiter || "\n";
	
	var sb = new java.lang.StringBuilder();
	var file = system.openFileForInput(filepath);
	var line;
	while ((line = file.readLine()) != null) {
		sb.append(line + "\n");
	}
	var str = sb.toString();
	return system.splitString(str, delimiter)
}

function mapStatus(status) {
	if (status instanceof com.ibm.di.entry.Attribute) {
		status = status.getValue();
	}
	
	if (status == null) {
		return null;
	}
	
	switch (status) {
		case "IBM_Approved": return "Client Approval";
		case "Draft": return "Draft";
		case "In_Review": return "In Progress";
		case "IBM_Approval_Pending": return "DPE Approval";
		case "Customer_Approved": return "Published";
		case "Production": return "Published";
		case "Obsolete": return "Retired";
		default: 
			var errmsg = "Cannot convert status: " + status;
			log("ERROR", errmsg);
			throw errmsg;
	}
}]]></parameter>
        </Script>
    
    
        
    <Script name="SCP">
            <ModTime>1596458004335</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[var SCP = function (hostname, username, password, hostkey, cmdPath)
{
//	this.vrs = "20200508 1553"; // making it support linux as well
//	this.vrs = "20200511 1248"; // works for linux (scp) & windows (winscp)
//	this.vrs = "20200511 1348"; // made it work for windows again
	this.vrs = "20200519 1247"; // updated scp for Centos based on Shikhas recommendation
	
	this.cmdPath = cmdPath || null;
	this.hostname = hostname;
	this.username = username;
	this.password = password;
	this.hostkey = hostkey;
	this.os = java.lang.System.getProperty("os.name").toLowerCase();
	
	this.isLinux = function() {
		return this.os == "linux";
	} 
	
	this.log = function(lvl, msg) {
		if (typeof lvl == "undefined") {
			msg = "";
			lvl = "INFO";
		} else
		if (typeof msg == "undefined") {
			msg = lvl;
			lvl = "INFO";
		}
		
		log(lvl, "[SCP] " + msg);
	}
	
	this.put = function (filepath, tofolder)
	{
		if (this.os == "linux") {
			var args = [
						"-i",
						"POC_MVP/id_rsa",
						filepath, 
						this.username + "@" + this.hostname + ":" + tofolder
						];
			log(" --> executing command: scp " + args.join(" "));
			var exstmt = system.shellCommand("scp", args);
		} else {
			var cmdfilepath = this.createCommandFile(filepath, tofolder);
			var batchFilepath = this.createBatchFile(cmdfilepath);		
			var exstmt = system.shellCommand(batchFilepath);
		}
		if(exstmt.getExitValue() != 0)
		{
			var errmsg = "Error executing command line: " 
							+ exstmt.getExitValue() + " - "
							+ exstmt.getError() + " - "
							+ exstmt.getOutputBuffer();
			log("ERROR", errmsg);
			throw errmsg;
		}
	}
	
	this.createCommandFile = function(filepath, tofolder) 
	{
		var fileName = "POC_MVP/scp.txt";
		var file = system.openFileForOutput(fileName);
		
		file.write("option confirm off");
		file.newLine();
		file.write("open sftp://"
					+ this.username
					+ ":" + this.password
					+ "@" + this.hostname
					+ ' -hostkey="' + this.hostkey + '"');
		file.newLine();
		file.write("put "
					+ (new java.io.File(filepath).getAbsolutePath())
					+ " " + tofolder);
		file.newLine();
		file.write("exit");
		file.newLine();
		
		file.close();	
		return (new java.io.File(fileName)).getAbsolutePath();	
	}
	
	this.createBatchFile = function(cmdfilepath) 
	{
		var fileName = "POC_MVP/winscp.bat";
		var file = system.openFileForOutput(fileName);
		file.write('"' + this.cmdPath + '"'
					+ " /ini=nul /script="
					+ '"' + cmdfilepath + '"');
		file.newLine();
		file.close();
		return (new java.io.File(fileName)).getAbsolutePath();
	}
	

	// Initialization code below
	this.log("SCP v" + this.vrs);
	
	if (!this.cmdPath) {
		if (this.os == "linux") {
			this.cmdPath = "scp";
		} else {
			this.cmdPath = "C:\\Program Files (x86)\\WinSCP\\WinSCP.com";
		}
	}
	
	
		
	return this;
}]]></parameter>
        </Script>
    <Script name="ExcelSheet">
            <ModTime>1597499825672</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[// The args properties are optional and include:
//
//    	sheetFileName: filepath for the Excel Sheet used by write() method, default is "$TDI_SOLDIR/_ExcelSheet.xlsx
//						NOTE: may contain eval tokens in curly braces - support javascript
//		columnsFileName: filepath to the text file with ordered names of Sheet columns, one per line
//		entry: Entry that the sheetFileName evaluation should use for eval tokens - i.e. {attribute-name}
//
var ExcelSheet = function (args)
{
	//this.vrs = "20200602 1725"; // First version
	//this.vrs = "20200603 1345"; // Finally working
	//this.vrs = "20200603 2232"; // Corrected filename generation
	//this.vrs = "20200703 2000"; // .generate() can return ByteArray
	//this.vrs = "20200705 1408" // Removed POC_MVP/ as default path for files
	//this.vrs = "20200711 1839" // Added support for multiple entries with .addRow() and .writeSheet()
	//this.vrs = "20200712 1658"; // Added .getBytes() method
	//this.vrs = "20200810 1905"; // Removed debug code for sheetname
	this.vrs = "20200815 1556"; // Removed hardcoded sheetname

	args = args || {};

	this.filenameTemplate = typeof(args) == "string" ? args : (args.sheetFileName || "_ExcelSheet.xlsx");
	this.filename = "_ExcelSheet";
	this.sheetname = args.sheetname || "data";
	this.entry = args.entr || system.newEntry();
	this.map = new Mapper();
	this.columns = null;
	this.columnsFileName = args.columnsFileName || null;
	
	this.workbook = null;
	this.spreadsheet = null;
	this.rowCount = 0;
	
	this.log = function(lvl, msg, throwit) {
		throwit = throwit || false;
		
		if (typeof lvl == "undefined") {
			msg = "";
			lvl = "INFO";
		} else
		if (typeof msg == "undefined") {
			msg = lvl;
			lvl = "INFO";
		}
		
		log(lvl, "[ExcelSheet] " + msg);
		
		if (throwit) throw "[ExcelSheet] " + msg;
	}
	
	this.generateOLD = function(entry, returnByteArray) {
		returnByteArray = returnByteArray || false;
		
		//Blank Document
		this.workbook = new org.apache.poi.xssf.usermodel.XSSFWorkbook;
		this.spreadsheet = workbook.createSheet(this.sheetname);
		
		for (var rowid = 0; rowid < 2; rowid++) {
			var row = spreadsheet.createRow(rowid);
			for (var cellid = 0; cellid < this.columns.length; cellid++) {
				var name = this.columns[cellid];
				var attValue = entry.getString(name);
				if (rowid == 0) {
					row.createCell(cellid).setCellValue(name);
				} else {
					row.createCell(cellid).setCellValue(attValue);
				}
			}
		}
		
		if(returnByteArray)
		{
			//Write to a byteArray
			fos = new java.io.ByteArrayOutputStream();			
		}
		else
		{
			//Write the Document in file system
			//fos = new java.io.ByteArrayOutputStream();
			fos = new java.io.FileOutputStream(new java.io.File(this.filename));
		}

		workbook.write(fos);
		fos.close();
		
		if (fos instanceof java.io.ByteArrayOutputStream) {
			return fos.toByteArray();
		}
	}
	
	this.writeSheet = function() {
		var fos = new java.io.FileOutputStream(new java.io.File(this.filename));
		this.workbook.write(fos);
		fos.close();
	}
	
	this.getBytes = function() {
		var fos = new java.io.ByteArrayOutputStream();
		this.workbook.write(fos);
		fos.close();
		
		return fos.toByteArray();
	}
	
	this.addRow = function(entry) {
		var row;
		if (this.workbook == null) {
			//Blank Document
			this.workbook = new org.apache.poi.xssf.usermodel.XSSFWorkbook;
			this.spreadsheet = this.workbook.createSheet(this.sheetname);
			this.rowCount = 0;
		}
		if (this.rowCount == 0) {
			if (this.columns == null) {
				this.columns = entry.getAttributeNames();
			}
			row = this.spreadsheet.createRow(this.rowCount);
			for (var cell = 0; cell < this.columns.length; cell++) {
				var name = this.columns[cell];
				row.createCell(cell).setCellValue(name);
			}
			this.rowCount++;
		}
		
		row = this.spreadsheet.createRow(this.rowCount);
		for (var cell = 0; cell <= this.columns.length; cell++) {
			var name = this.columns[cell];
			var value = entry.getString(name);
			row.createCell(cell).setCellValue(value);
		}

		this.rowCount++;
	}
	
	this.initialize = function() {
		this.log(" v" + this.vrs);
		
		if (this.columnsFileName) {
			var file = new java.io.File(this.columnsFileName) 
			if (!file.exists()) {
				this.log("FATAL", "Columns file name does not exist: " + this.columnsFileName, true);
			}
			
			this.columns = loadFileToArray(this.columnsFileName);
		}	

		if (String(this.filenameTemplate).trim() != "") {
			this.filename = this.map.evaluate("Excel sheet filename", this.filenameTemplate, this.entry);
			this.log("Generating Excel sheet: " + this.filename);
		}
	}	
	
	// Initialization code below here
	
	this.initialize();
	
	return this;
}]]></parameter>
        </Script>
        <Script name="Mapper">
            <ModTime>1597661049904</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[var Mapper = function (filePath)
{
	//this.vrs = "20200602 20:03"; // First version
	//this.vrs = "20200603 1301"; // Updated to handle templating (e.g. WordDoc object)
	//this.vrs = "20200603 1354"; // Added version log output
	//this.vrs = "20200623 1443"; // Added map() support for an array of Entries
	//this.vrs = "20200627 1205"; // Fixed evaluate to handle non-string map results
	//this.vrs = "20200703 1907";  // triming attribute names
	//this.vrs = "20200803 1624";  // triming mapping rules
	//this.vrs = "20200804 1501";  // triming mapping rules
	this.vrs = "20200817 1243";  // Fixed evaluateItem which only return string values
	
	this.filePath = filePath || "";
	this.rules = [];
	
	this.log = function(lvl, msg) {
		if (typeof lvl == "undefined") {
			msg = "";
			lvl = "INFO";
		} else
		if (typeof msg == "undefined") {
			msg = lvl;
			lvl = "INFO";
		}
		
		log(lvl, "[Mapper] " + msg);
	}
	
	this.initialize = function() {
		this.log(" v" + this.vrs);
		
		if (this.filePath != "") {
			var rulesArray = loadFileToArray(filePath);
			var rules = java.util.ArrayList();
			
			// Now to correct for multi-line mapping scripts

			var ruleIndex = 0;			
			while (ruleIndex < rulesArray.length) {
				var rule = rulesArray[ruleIndex++];
				// If this line continues, then read the next one
				while (rule.endsWith("\\") && ruleIndex < rulesArray.length) {
					rule = rule.substring(0, rule.length-1) + "\n" + rulesArray[ruleIndex++];
				}
				rules.add(rule);
			}			
			
			this.rules = rules.toArray();
		}
	}
	
	// Local eval function that limits access to privileged script beans (like main and session)
	this.eval = function(evalStr, entry) {
		//this.prepareGlobalState();
		var exceptn = null;
		try {
			var result = eval(evalStr);
			return result;
		} catch (ex) {
			exceptn = ex;
		} finally {
			//this.restoreGlobalState();
		}
		
		if (exceptn != null) {
			throw exceptn;
		}
	}

	
	this.evaluateItem = function(attrName, evalStr, entryOrArray) {
		var entries = entryOrArray;
		if (entryOrArray instanceof com.ibm.di.entry.Entry) {
			entries = [entryOrArray];
		}
		
		var evalError = "";
		//check if it's an attribute in the entry
		for (i = 0; i < entries.length; i++) {
			var entry = entries[i];
			if (entry == null) {
				log("WARN", "Entry #" + i + " passed to map() is null");
				continue;
			} else
			if (entry && entry[evalStr]) {
				return entry[evalStr].getValue(0); // TODO handles only a single value
			} else {
				try {
					evalValue = this.eval(evalStr, entry);
				} catch (e) {
					evalValue = null;
				}
	
				if (evalValue != null) {
					return evalValue;
				} else {
					// We only want to return null at this point IF we have checked all entries in the array
					if (i >= entries.length) {
						return null;				
					}
	/*
						this.addMappingError("evaluateItem(" + evalStr + ") for "
												+ attrName
												+ " returned null. " 
												+ evalError, 
											 entry.getString(srcUniqueId));
	*/										 
				}
			}
		}
	}


	this.evaluate = function(attrName, rule, entryOrArray) {
		var elem = [];
		var eval = false;
		var evalStr;
		var bracketDepth = 0;
		var rule = rule.replaceAll("\n", "_NEWLINE_");
		var st = new java.util.StringTokenizer(rule, "{}", true);
		var bracketDepth = 0;
		while (st.hasMoreTokens()) {
			var token = st.nextToken();
			if (token == "{") {
				if (bracketDepth++ == 0) {
					eval = true;
					evalStr = "";
				} else {
					evalStr += "{";
				}
			} else if (token == "}") {
				if (--bracketDepth == 0) {
					eval = false;
					var evalValue = this.evaluateItem(attrName, evalStr, entryOrArray);
					if (typeof evalValue != "undefined" && evalValue != null) {
						elem.push(evalValue);
					}
				} else {
					evalStr += "}";
				}
			} else if (eval) {
				evalStr += token;
			} else {
				elem.push(token);
			}
		}

		if (bracketDepth > 0) {
			var errmsg = "Assignment of " 
							+ attrName 
							+ " is missing a closing curly brace: " 
							+ rule;
			this.log("ERROR", errmsg);
			throw errmsg;
		}

		if (elem.length == 1) {
			var item = elem[0];
			if (typeof item == "string") {
				return item.replaceAll("_NEWLINE_", "\n");
			} else {
				return item;
			}
		} else 
		if (elem.length == 0) {
			return null;
		} else {
			return elem.join("").replaceAll("_NEWLINE_", "\n");
		}
	}

	this.map = function(entryOrArray, useRule) {
		var entries = entryOrArray;
		if (entryOrArray instanceof com.ibm.di.entry.Entry) {
			entries = [entryOrArray];
		}
		
		// First check if useRule is passed, in which case simply return this mapping result
		if (typeof useRule != "undefined") {
			var rule = useRule;
			var p = rule.indexOf("=");
			if (p < 0) { continue; }
			
			var name = rule.substring(0, p).trim();
			rule = rule.substring(p+1);
			
			return {name: name, value: this.evaluate(name, rule, entryOrArray)};
		}
		
		// Otherwise apply rules to map the entire entryOrArray, returning a mappedEntry
		var mappedEntry = system.newEntry();
		
		for (var i = 0; i < this.rules.length; i++) {
			var rule = String(this.rules[i]).trim();
			var p = rule.indexOf("=");
			if (p < 0) { continue; }
			
			var name = rule.substring(0, p);
			rule = rule.substring(p+1);
			
			var evalValue = this.evaluate(name, rule, entryOrArray);
			if (evalValue != null) {
				mappedEntry[name] = evalValue;
			}
		}
		
		return mappedEntry;
	}

	// Initialization code below here

	this.initialize();
	
	return this;
}]]></parameter>
        </Script>
        
        <Script name="WordDoc">
            <ModTime>1592419103109</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[var WordDoc = function (filenameTemplate)
{
	//this.vrs = "20200602 1725"; // First version
	//this.vrs = "20200603 1345"; // Updated to handle templating
	this.vrs = "20200603 2232"; // Corrected filename generation

	this.filenameTemplate = filenameTemplate;
	this.map = new Mapper();
	
	this.log = function(lvl, msg) {
		if (typeof lvl == "undefined") {
			msg = "";
			lvl = "INFO";
		} else
		if (typeof msg == "undefined") {
			msg = lvl;
			lvl = "INFO";
		}
		
		log(lvl, "[WordDoc] " + msg);
	}
	
	this.generate = function(entry) {
		// Get filename
		filename = this.map.evaluate("Word doc filename", this.filenameTemplate, entry);
		this.log("Generating Word doc: " + filename);
		
		//Blank Document
		var document = new org.apache.poi.xwpf.usermodel.XWPFDocument();
		  
		//Write the Document in file system
		//fos = new java.io.ByteArrayOutputStream();
		fos = new java.io.FileOutputStream(new java.io.File("POC_MVP/" + filename));

		// First create the Abstract
		var paragraph = document.createParagraph();
		var run = paragraph.createRun();
		run.setBold(true);
		run.setFontSize(12);
		
		var contents = entry.getString("contents");
		var lines = system.splitString(contents, "\n");
		
		for (var line in lines) {
			run.setText(line);
			run.addBreak();
		}

		document.write(fos);
		fos.close();
		
		if (fos instanceof java.io.ByteArrayOutputStream) {
			return fos.toByteArray();
		}
	}
	
	this.initialize = function() {
		this.log(" v" + this.vrs);
	}	
	
	// Initialization code below here
	
	this.initialize();
	
	return this;
}]]></parameter>
        </Script>
        <Script name="fileTypes">
            <ModTime>1592419102606</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[{
    "fileTypes": {
        "fileType": [{
            "fileExtension": "html",
            "mimeType": "text/html",
            "id": "1"
        }, {
            "fileExtension": "htm",
            "mimeType": "text/html",
            "id": "2"
        }, {
            "fileExtension": "txt",
            "mimeType": "text/plain",
            "id": "9"
        }, {
            "fileExtension": "rtf",
            "mimeType": "text/richtext",
            "id": "13"
        }, {
            "fileExtension": "bmp",
            "mimeType": "image/bmp",
            "id": "35"
        }, {
            "fileExtension": "gif",
            "mimeType": "image/gif",
            "id": "37"
        }, {
            "fileExtension": "jpe",
            "mimeType": "image/jpeg",
            "id": "38"
        }, {
            "fileExtension": "jpg",
            "mimeType": "image/jpeg",
            "id": "39"
        }, {
            "fileExtension": "jpeg",
            "mimeType": "image/jpeg",
            "id": "40"
        }, {
            "fileExtension": "png",
            "mimeType": "image/png",
            "id": "41"
        }, {
            "fileExtension": "tiff",
            "mimeType": "image/tiff",
            "id": "42"
        }, {
            "fileExtension": "tif",
            "mimeType": "image/tiff",
            "id": "43"
        }, {
            "fileExtension": "pdf",
            "mimeType": "application/pdf",
            "id": "44"
        }, {
            "fileExtension": "xls",
            "mimeType": "application/vnd.ms-excel",
            "id": "46"
        }, {
            "fileExtension": "xlw",
            "mimeType": "application/vnd.ms-excel",
            "id": "47"
        }, {
            "fileExtension": "xla",
            "mimeType": "application/vnd.ms-excel",
            "id": "48"
        }, {
            "fileExtension": "xlt",
            "mimeType": "application/vnd.ms-excel",
            "id": "49"
        }, {
            "fileExtension": "xlam",
            "mimeType": "application/vnd.ms-excel.addin.macroEnabled.12",
            "id": "50"
        }, {
            "fileExtension": "xlsb",
            "mimeType": "application/vnd.ms-excel.sheet.binary.macroEnabled.12",
            "id": "51"
        }, {
            "fileExtension": "xlsm",
            "mimeType": "application/vnd.ms-excel.sheet.macroEnabled.12",
            "id": "52"
        }, {
            "fileExtension": "xlsx",
            "mimeType": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            "id": "53"
        }, {
            "fileExtension": "xltm",
            "mimeType": "application/vnd.ms-excel.template.macroEnabled.12",
            "id": "54"
        }, {
            "fileExtension": "xltx",
            "mimeType": "application/vnd.openxmlformats-officedocument.spreadsheetml.template",
            "id": "55"
        }, {
            "fileExtension": "ppt",
            "mimeType": "application/vnd.ms-powerpoint",
            "id": "56"
        }, {
            "fileExtension": "pot",
            "mimeType": "application/vnd.ms-powerpoint",
            "id": "57"
        }, {
            "fileExtension": "ppa",
            "mimeType": "application/vnd.ms-powerpoint",
            "id": "58"
        }, {
            "fileExtension": "pps",
            "mimeType": "application/vnd.ms-powerpoint",
            "id": "59"
        }, {
            "fileExtension": "potm",
            "mimeType": "application/vnd.ms-powerpoint.template.macroEnabled.12",
            "id": "60"
        }, {
            "fileExtension": "potx",
            "mimeType": "application/vnd.openxmlformats-officedocument.presentationml.template",
            "id": "61"
        }, {
            "fileExtension": "ppam",
            "mimeType": "application/vnd.ms-powerpoint.addin.macroEnabled.12",
            "id": "62"
        }, {
            "fileExtension": "ppsm",
            "mimeType": "application/vnd.ms-powerpoint.slideshow.macroEnabled.12",
            "id": "63"
        }, {
            "fileExtension": "ppsx",
            "mimeType": "application/vnd.openxmlformats-officedocument.presentationml.slideshow",
            "id": "64"
        }, {
            "fileExtension": "pptm",
            "mimeType": "application/vnd.ms-powerpoint.presentation.macroEnabled.12",
            "id": "65"
        }, {
            "fileExtension": "pptx",
            "mimeType": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
            "id": "66"
        }, {
            "fileExtension": "sldm",
            "mimeType": "application/vnd.ms-powerpoint.slide.macroEnabled.12",
            "id": "67"
        }, {
            "fileExtension": "sldx",
            "mimeType": "application/vnd.openxmlformatsofficedocument.presentationml.slide",
            "id": "68"
        }, {
            "fileExtension": "mpp",
            "mimeType": "application/vnd.ms-project",
            "id": "69"
        }, {
            "fileExtension": "doc",
            "mimeType": "application/msword",
            "id": "70"
        }, {
            "fileExtension": "dot",
            "mimeType": "application/msword",
            "id": "71"
        }, {
            "fileExtension": "docm",
            "mimeType": "application/vnd.ms-word.document.macroEnabled.12",
            "id": "72"
        }, {
            "fileExtension": "docx",
            "mimeType": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            "id": "73"
        }, {
            "fileExtension": "dotm",
            "mimeType": "application/vnd.ms-word.template.macroEnabled.12",
            "id": "74"
        }, {
            "fileExtension": "dotx",
            "mimeType": "application/vnd.openxmlformats-officedocument.wordprocessingml.template",
            "id": "75"
        }, {
            "fileExtension": "eml",
            "mimeType": "message/rfc822",
            "id": "76"
        }, {
            "fileExtension": "msg",
            "mimeType": "message/rfc822",
            "id": "77"
        }, {
            "fileExtension": "zip",
            "mimeType": "application/octet-stream",
            "id": "102"
        }, {
            "fileExtension": "gz",
            "mimeType": "application/octet-stream",
            "id": "103"
        }, {
            "fileExtension": "gzip",
            "mimeType": "application/octet-stream",
            "id": "104"
        }, {
            "fileExtension": "mdb",
            "mimeType": "application/x-msaccess",
            "id": "105"
        }, {
            "fileExtension": "mp3",
            "mimeType": "audio/mpeg",
            "id": "135"
        }, {
            "fileExtension": "wmv",
            "mimeType": "video/x-ms-wmv",
            "id": "142"
        }, {
            "fileExtension": "xps",
            "mimeType": "application/vnd.ms-xpsdocument",
            "id": "145"
        }, {
            "fileExtension": "vsd",
            "mimeType": "application/ms-visio",
            "id": "151"
        }]
    }
}]]></parameter>
        </Script>
        <Script name="OpenPagesObj">
            <ModTime>1597659950331</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[var OpenPagesObj = function (opconnector) {
	//this.vrs = "20200603 1354"; // Initial version
	//this.vrs = "20200605 1404"; // add() returns newly created object in Entry form
	//this.vrs = "20200609 18:57"; // added queryReply function which handles both Entry and JS Object argument
	//this.vrs = "20200609 18:57"; // made add() function accept JS Object as argument
	//this.vrs = "20200610 2019"; // added find(), saveParams(), restoreParams() and findAccount
	//this.vrs = "20200617 2110"; // fixed problem with add() method. Adding file does not return object from OP call
	//this.vrs = "20200625 1225"; // corrected error in selectEntries() - defined default value for objectType
	//this.vrs = "20200626 1543"; // improved saveParams and restoreParams
	//this.vrs = "20200629 1603"; // restoreParams when debug is true
	//this.vrs = "20200630 1204"; // Added findParents() and findChildren() methods
	
	//this.vrs = "20200701 1908"; // .add() method Supports 'parentId'
	//this.vrs = "20200729 1840"; // Started on .modify{}
	//this.vrs = "20200731 1706"; // .add() correctly returns new object
	//this.vrs = "20200731 2335"; // completed .update() method (renamed from .modify)
	//this.vrs = "20200802 1545"; // corrected .update() and now it also calls .add if entry not found to modify
	this.vrs = "20200805 2241"; // added timings
	
	this.ctr = null;
	this.opconnector = opconnector || null;
	this.savedParams = [];
	this.typesById = null;
	this.typesByName = null;
	this.fieldDefinitions = new java.util.HashMap();
	
	this.timer = typeof timer != "undefined" ? timer : {start: function() {}, stop: function() {}, timers: function() {return {} }};
	
	this.log = function(lvl, msg, throwit) {
		throwit = throwit || false;
		if (typeof lvl == "undefined") {
			msg = "";
			lvl = "INFO";
		} else
		if (typeof msg == "undefined") {
			msg = lvl;
			lvl = "INFO";
		}
		
		log(lvl, "[OpenPagesObj] " + msg);
		if (throwit) throw "[OpenPagesObj] " + msg;
	}
	
	// Call the Iterator mode selectEntries(), passing an optional query
	this.selectEntries = function(objectType, query) {
		this.timer.start("querying OpenPagesObj");
		objectType = objectType || this.ctr.getParam("object");
		query = query || null;
		
		this.saveParams();
		
		if (query != null) {
			this.ctr.setParam("query", query);
		}
		
		this.ctr.setParam("object", objectType);
		
		var cmdEntry = system.newEntry();
		cmdEntry.operation = "select";
		this.ctr.queryReply(cmdEntry);
		
		this.restoreParams();
		this.timer.stop("querying OpenPagesObj");
	}
	
	// Return the next entry from the selected result set of selectEntries()
	this.getNextEntry = function() {
		return this.ctr.getNextEntry();
	}
	
	// Search function
	this.find = function(fieldName, fieldValue, args) {
		args = args || {};
		var objectType = args.objectType || this.ctr.getParam("object");
		
		var query = "select * from [" + objectType + "] where [" + objectType + "].[" + fieldName + "]=" + this.quotes(fieldValue);
		
		return this.query(query);
	}
	
	// Find an account, searching for either Name or GTS-Account:AccAlias
	this.findAccount = function(accountName, args) {
		args = args || {};
		var res = this.find("Name", accountName, args);
		if (res.length == 0) {
			res = this.find("GTS-Account:AccAlias", accountName, args);
		}
		return res;
	}
	
	// Quote a value if it is a string
	this.quotes = function(value) {
		if (typeof value == "string") {
			return "'" + value + "'";
		} else {
			return value;
		}
	}
	
	// Request the Connector for the object definitions
	this.getTypes = function() {
		if (this.typesById == null || this.typesByName == null) {
			var result = this.queryReply({operation: "get_types"});
			var types = result.getObject("types");
			this.typesById = types.typesById;
			this.typesByName = types.typesByName;
		}
	}
	
	this.getFieldDefinitions = function(objectType) {
		this.timer.start("getting field defs for OpenPagesObj");
		var objectTypeLC = objectType.toLowerCase(); // Since this is how fieldDefinitions are keyed in the OP Connector
		
		if (this.fieldDefinitions.get(objectTypeLC) == null) {
			var entry = this.distillEntry({objectType: objectType});
			entry.operation = "get_fielddefinitions";
			var result = this.queryReply(entry);
			var fieldDef = result.getObject("field_definitions").get(objectTypeLC);
			this.fieldDefinitions.put(objectTypeLC, fieldDef);
			this.timer.stop("getting field defs for OpenPagesObj");
			return fieldDef;
		}

		this.timer.stop("getting field defs for OpenPagesObj");
		return this.fieldDefinitions.get(objectTypeLC)
	}

	this.getTypeById = function(typeId) {
		if (this.typesById == null) {
			this.getTypes();
		}
		return this.typesById.get(typeId);
	}
	
	this.getTypeByName = function(objectType) {
		if (this.typesByName == null) {
			this.getTypes();
		}
		return this.typesByName.get(objectType);
	}
	
	// Returns the type for either a type id or an object name
	this.getType = function(idOrName) {
		if (typeof idOrName == "number" ||
			(typeof idOrName == "string" && system.isValidInt(idOrName))) {
			var id = system.toInt(String(idOrName));
			return this.getTypeById(id);
		} else {
			return this.getTypeByName(idOrName);
		}
	}
	
	// Return list of all fields for an object type
	this.getFieldList = function(idOrName) {
		var fieldListMaxLength = 40;
		
		var type = this.getType(idOrName);
		var fieldDefs = this.getFieldDefinitions(type.name);
		var fieldNames = fieldDefs.keySet().toArray();
		//java.util.Arrays.sort(fieldNames);
		
		var fieldList = new java.util.ArrayList();
		var foundId = false;
		var foundName = false;
		for (var name in fieldNames) {
			if (name.startsWith("$")) continue;
			
			var fieldDef = fieldDefs.get(name)
			fieldList.add("[" + type.name + "].[" + fieldDef.name + "]");

			if ("Resource ID".equalsIgnoreCase(fieldDef.name)) {
				foundId = true;
			} else
			if ("Name".equalsIgnoreCase(fieldDef.name)) {
				foundName = true;
			}
			
			if (fieldListMaxLength-- <= 0) {
				break;
			}
		}
		
		if (!foundId) {
			fieldList.add("[" + type.name + "].[Resource ID]");
		}
		if (!foundName) {
			fieldList.add("[" + type.name + "].[Name]");
		}
		
		return fieldList.toArray();
	}
	
	// Find parents
	this.findParents = function(mainType, resourceID, kinType) {
		if (typeof kinType == "undefined") {
			this.log("ERROR", "findParents() must be passed the type of parent as the second parameter");
			return list.toArray();
		}
		return this.findKin(mainType, resourceID, kinType, "PARENT");
	}
	
	// Find children
	this.findChildren = function(mainType, resourceID, kinType) {
		if (typeof kinType == "undefined") {
			this.log("ERROR", "findChildren() must be passed the type of child as the second parameter");
			return list.toArray();
		}
		return this.findKin(mainType, resourceID, kinType, "CHILD");
	}
	
	// Find kin (children or parents) for the mainType passed
	this.findKin = function(mainType, resourceID, kinType, childOrParent) {
		childOrParent = childOrParent || "PARENT";
		
		if (typeof kinType == "undefined") {
			this.log("ERROR", "findKin() must be passed the type of kin (e.g. SOXAccount, Policy, etc) as the second parameter");
			return list.toArray();
		}
		
		var fieldList = this.getFieldList(kinType);

		var query = "select " + fieldList.join(", \n")
				+ "\n from [" + kinType + "]"
				+ " join [" + mainType + "] on " + childOrParent.toUpperCase() + "([" + kinType + "])"
				+ " where [" + mainType + "].[Resource ID]='" + resourceID + "';"
		//this.log("Query:\n" + query);
		
		var entries = this.query(query);
		
		return entries;
	}
	
	// Return an Array with entries based on a query
	this.query = function(query) {
		var list = new java.util.ArrayList();
		
		this.saveParams();
		
		this.ctr.setParam("query", query);
		this.selectEntries();
		
		var entry;
		while ((entry = this.getNextEntry()) != null) {
			list.add(entry);
		}
		
		this.restoreParams();
		return list.toArray();
	}
	
	// Add an object to OpenPages
	// Parameters:
	//     newObject - 	Is either an Entry, a JS Object (with Attributes for properties) or JSON
	//					This is the object to add.
	//					It can contain any of these optional, special attributes:
	//					$grcObjectType - overrides the Object Type parameter of the Connector - type created
	//					primaryParentType - type of OP Object of the Parent
	//					primaryParentId - Resource ID of the parent for this new object
	//		args	-	Optional second parameter which is either a String, in which it is the type of
	//					object to be written (like $grcObjectType attribute for newObject)
	//					Or, it is a JS Object with can hold any of the following properties:
	//						objectType - sets the type of object to create (like $grcObjectType above)
	//						parentType - defines the type of the parent object
	//						parentId - the Resource ID of the parent of this new object
	this.add = function(newObject, args) {
		args = args || {};
		
		this.timer.start("adding OpenPagesObj");
		if (typeof args == "string") {
			args = { objectType: args }; 
		}
		
		var debug = args.debug || false;
		var objectType, parentType, parentID;
		
		// If entry passed is a JS Object, then convert to an Entry. If its a string, the assume its JSON
		var entry = this.distillEntry(newObject);
		
		var objectType = args.objectType || entry.getString("$grcObjectType") || this.ctr.getParam("object");
		var parentType = args.parentType || entry.getString("parentType") || this.ctr.getParam("parentType");
		var parentID = String(args.primaryParentId || args.parentID || args.parentId
							|| entry.getObject("primaryParentId") 
							|| entry.getObject("parentId")).trim();
		
		this.saveParams();

		entry["$grcObjectType"] = objectType;
		this.ctr.setParam("object" , objectType);
		
		if (parentType != null) {
			log("Setting parent type to: " + parentType);
			this.ctr.setParam("parentType", parentType);
		}
		
		if (typeof parentID != "undefined") {
			try {
				log("Setting primary parent Id as: " + parentID)
				var parentID = system.toInt(parentID);
				entry["primaryParentId"] = parentID;
			} catch (ex) {
				this.log("ERROR", "parentID must be a number and reference the Resource Id of the parent object", true);
			}
		}
		
		if (debug) {
			entry["Resource ID"] = "42";
			this.restoreParams();
			this.timer.stop("adding OpenPagesObj");
			return entry;
		}
		
		this.ctr.putEntry(entry);
		
		// get newly created object 
		var requestEntry = system.newEntry();
		requestEntry.operation = "get_conn";

		var newObjectEntry = this.ctr.queryReply(requestEntry);

		this.restoreParams();
		
		// re-read to get full object
		newObjectEntry = this.find("Resource ID" , newObjectEntry.getString("Resource ID") , args)[0];
		
		this.timer.stop("adding OpenPagesObj");
		return newObjectEntry;
	}
	
	
	// Update an object to OpenPages, which means if no Resource ID is passed, it becomes an Add operation, otheriwse a Modify
	// Parameters:
	//     modObject - 	Is either an Entry, a JS Object (with Attributes for properties) or JSON
	//					This is the object to add.
	//					It can contain any of these optional, special attributes:
	//					$grcObjectType - overrides the Object Type parameter of the Connector - type created
	//					primaryParentType - type of OP Object of the Parent
	//					primaryParentId - Resource ID of the parent for this new object
	//		args	-	Optional second parameter which is either a String, in which it is the type of
	//					object to be written (like $grcObjectType attribute for newObject)
	//					Or, it is a JS Object with can hold any of the following properties:
	//						objectType - sets the type of object to create (like $grcObjectType above)
	//						parentType - defines the type of the parent object
	//						parentId - the Resource ID of the parent of this new object
	//						linkCriteria - the Link Criteria (name & value properties, optionally match as well) used to find the entry to modify
	//									   NOTE: if Resource ID is part of the entry, this is not used.
	this.update = function(passedObject, args) {
		args = args || {};
		
		this.timer.start("updating OpenPagesObj");
		if (typeof args == "string") {
			args = { objectType: args }; 
		}
		
		var debug = args.debug || false;
		var objectType, parentType, parentID;
		
		// If entry passed is a JS Object, then convert to an Entry. If its a string, the assume its JSON
		var entry = this.distillEntry(passedObject);
		
		var objectType = args.objectType || entry.getString("$grcObjectType") || this.ctr.getParam("object");
		var parentType = args.parentType || entry.getString("parentType") || this.ctr.getParam("parentType");
		var parentID = String(args.primaryParentId || args.parentID || args.parentId
							|| entry.getObject("primaryParentId") 
							|| entry.getObject("parentId")).trim();
		var linkCriteria = args.linkCriteria || args.linkcriteria || args.link_criteria;
		var resourceID = args.ID || args.id || args.Id || entry.getString("Resource ID");

		if (resourceID == null) {
			if (typeof linkCriteria != "undefined") {
				var findList = this.find(linkCriteria.name,
												linkCriteria.match || com.ibm.di.server.SearchCriteria.EXACT,
												linkCriteria.value);
				if (findList.length == 0) {
					// Since the object is not found, this is an Add operation
					
					return this.add(passedObject, args);
				} else 
				if (findList.length > 1) {
					// This means the search criteria did not narrow down to a single object
					
					this.log("ERROR", "The linkCriteria passed did not single out a single Object to modify", true);
				}
				
				// Otherwise a single Object has been found in OpenPages so continue to the code below
				resourceID = findList[0].getString("Resource ID");
			} else {
				this.log("ERROR", "The Object passed did not have a Resource ID and no args.linkCriteria was given to find it.", true);
			}
		} else {
			// Set the internal params.current property in the OpenPages Connector
			var requestEntry = system.newEntry();
			requestEntry.operation = "set_current";
			entry["Resource ID"] = resourceID;
			requestEntry.current = entry;
	
			this.ctr.queryReply(requestEntry);
			
		}
		
		this.saveParams();

		entry["$grcObjectType"] = objectType;
		this.ctr.setParam("object" , objectType);
		
		if (parentType != null) {
			log("Setting parent type to: " + parentType);
			this.ctr.setParam("parentType", parentType);
		}
		
		if (typeof parentID != "undefined") {
			try {
				log("Setting primary parent Id as: " + parentID)
				var parentID = system.toInt(parentID);
				entry["primaryParentId"] = parentID;
			} catch (ex) {
				entry.removeAttribute("primaryParentId");
			}
		}
		
		if (debug) {
			this.restoreParams();
			this.timer.stop("updating OpenPagesObj");
			return entry;
		}
		
		var searchCrit = system.newSearchCriteria();
		searchCrit.addCriteria("Resource ID", searchCrit.EXACT, resourceID);
		
		this.ctr.modEntry(entry, searchCrit);
				
		// re-read to get full object
		var updatedEntry = this.find("Resource ID" , passedObject.getString("Resource ID") , args)[0];
		
		this.timer.stop("updating OpenPagesObj");
		return updatedEntry;
	}
	
	// Distills an Entry object from either an Entry, a JS Object or JSON
	this.distillEntry = function(newObject) {
		if (typeof newObject == "string") {
			var entry = com.ibm.di.entry.Entry.toJSON(newObject);
		} else
		if (!(newObject instanceof com.ibm.di.entry.Entry)) {
			if (typeof newObject == "object") {
				var entry = this.jsObj2Entry(newObject, system.newEntry());
			} else {
				this.log("ERROR", "Unable to handle entry passed to add() function: " + entry);
			}
		} else {
			var entry = newObject;
		}
		
		return entry;
	}
	
	// List of params to save/restore
	this.paramsList = ["url", "username", "password", "object", "parentType", "parentLoc", "query"];
	
	// Save parameters for the OP Connector
	this.saveParams = function() {
		var params = {};
		for (var i = 0; i < this.paramsList.length; i++) {
			var pname = this.paramsList[i];
			params[pname] = this.ctr.getParam(pname);
		}
		this.savedParams.push(params);
	}
	
	// Restore saved parameters for the OP Connector
	this.restoreParams = function() {
		if (this.savedParams.length == 0) {
			return;
		}
		
		var params = this.savedParams.pop();
		this.savedParams = this.savedParams.slice(0, this.savedParams.length);
		
		for (var i = 0; i < this.paramsList.length; i++) {
			var pname = this.paramsList[i];
			this.ctr.setParam(pname, params[pname]);
		}
	}
	
	// Call the queryReply function which is used to handle all sorts of requests:
	// Although for compliance sake, the function accepts an Entry as its argument.
	// Note that you can also pass a JS object with properties. These properties are
	// turned into attributes in a requestEntry that is set up and passed to the
	// underlying CI method queryReply() which expects an Entry.
	// 
	// Setting the operation attribute controls behavior:
	//
	//	'get_conn'		Returns the last conn Entry. The conn Entry contains
	//					the newly created object after an add() operation, 
	//					including its Resource ID.
	this.queryReply = function(arg) {
		arg = arg || {};
		
		if (arg instanceof com.ibm.di.entry.Entry) {
			var requestEntry = arg;
		} else {
			var requestEntry = system.newEntry();

			if (typeof arg == "object") {
				requestEntry = this.jsObj2Entry(arg, system.newEntry());
			}			
		}
		
		var responseEntry = this.ctr.queryReply(requestEntry);
		
		return responseEntry;
	}
	
	// Turns a JS Object into an Entry with Attributes for the objects properties
	this.jsObj2Entry = function(jsObj, useEntry) {
		useEntry = useEntry || system.newEntry();
		useEntry.removeAllAttributes();
		
		for (var pname in jsObj) {
			if (pname.startsWith("_")) {
				useEntry[pname.substring(1)] = jsObj[pname];
			} else {
				useEntry[pname] = jsObj[pname];
			}
		}
		
		return useEntry;
	}
	
	// Load and initialize ePolicy_db Connector from Resources > Connectors
	this.initialize = function() {
		this.log(" v" + this.vrs);
		
		this.timer.start("initializing OpenPagesObj");
		if(this.opconnector != null){
			this.ctr = opconnector;
		}else{
			this.ctr = system.getConnector("OpenPages Connector");
			if (this.ctr == null) this.log("ERROR", "Could not find Resources/Connectors/OpenPages Connector", true);
			this.ctr.initialize(null);
		}
		this.timer.stop("initializing OpenPagesObj");
	}
	
	
	// Initialization code below here
	
	this.initialize();
	
	return this;
}]]></parameter>
        </Script>
        <Script name="_csdFields">
            <ModTime>1592419102735</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[{
  "TEMPLATE_ID": 3364,
  "TEMPLATE_TYPE_ID": 2,
  "ACCOUNT_ID": 8862,
  "TEMPLATE_TYPE_NAME": "Base Policy",
  "ACCOUNT_NUMBER_TYPE_NAME": null,
  "STATUS": "IBM_Approval_Pending",
  "DELETED_TS": null,
  "LOCKED_FLAG": "N",
  "FULL_NAME": "United States of America",
  "NAME": "Customer Security Document_V2.1.4",
  "POLICY_TYPE_ID": 24,
  "ID": 17396,
  "REVISION": 1,
  "FILE_NAME": "",
  "IMPORTED_FLAG": "N",
  "TEMPLATE_POLICYTYPE_NAME": "CSD",
  "LOCATION_ID": 245,
  "LOCKED_BY": null,
  "REVISION_COUNT": 1,
  "STATUS_ID": 4,
  "ENVIRONMENT": "",
  "TEMPLATE_POLICYTYPE_ID": 24,
  "NOTES_MAIL": "Disha Singh019/India/IBM",
  "UPDATED_TS": "2020-06-01 15:19:18.455545",
  "POLICY_TYPE_NAME": "CSD",
  "LOCKED_TS": null,
  "TEMPLATE_VERSION": "2.1.4                    ",
  "FORMAT": "DOCX",
  "POLICY_ID": 13309,
  "SHORTNAME": "WHU",
  "ACCOUNT_NUMBER": "",
  "HISTORY_FLAG": "N"
}]]></parameter>
        </Script>
        
    <Script name="ePolicyObj">
            <ModTime>1597659962212</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[var ePolicyObj = function()
{
	//this.vrs = "20200603 2008"; // Initial version
	//this.vrs = "20200630 1522"; // Beefed up .query() method to accept existing Array of entries
	this.vrs = "20200805 2241"; // added timings

	this.ctr = null;
	this.map = new Mapper();

	this.timer = typeof timer != "undefined" ? timer : {start: function() {}, stop: function() {}, timers: function() {return {} }};
	
	this.log = function(lvl, msg, throwit) {
		throwit = throwit || false;
		if (typeof lvl == "undefined") {
			msg = "";
			lvl = "INFO";
		} else
		if (typeof msg == "undefined") {
			msg = lvl;
			lvl = "INFO";
		}
		
		log(lvl, "[ePolicyDB] " + msg);
		if (throwit) throw "[ePolicyDB] " + msg;
	}
	
	// Load and initialize ePolicy_db Connector from Resources > Connectors
	this.initialize = function() {
		this.log(" v" + this.vrs);

		this.timer.start("initializing ePolicyObj");
		this.ctr = system.getConnector("ePolicy_db");
		if (this.ctr == null) this.log("ERROR", "Could not find Resources/Connectors/ePolicy_db Connector", true);
		
		this.ctr.initialize(null);
		this.timer.stop("initializing ePolicyObj");
	}
	
	// Add single quotes around value if of type string
	this.quote = function(value) {
		if (typeof value == "string") {
			return "'" + value + "'"
		} else {
			return value;
		}
	}
	
	// Find an Account based on an Column
	this.find = function(tableName, columnName, searchValue, operator) {
		this.timer.start("finding ePolicyObj");
		
		operator = operator || "=";
		
		if (searchValue instanceof com.ibm.di.entry.Attribute) {
			searchValue = searchValue.getValue(0);
		}
		
		var select = "select * from " + tableName
						+ " where " + columnName 
						+ operator + this.quote(searchValue);
		
		this.timer.stop("finding ePolicyObj");
		return this.select(select);
	}
	
	// Perform a select and return the Array of Entries
	this.select = function(select) {
		this.timer.start("selecting ePolicyObj");
		var result = this.ctr.execSQLSelect(select);
		if (result) {
			this.timer.stop("selecting ePolicyObj");
			this.log("ERROR", "Error making selection: " + select + " - " + result, true);
		}
		
		var list = new java.util.ArrayList();
		var entry;
		while ((entry = this.ctr.getNextSQLSelectEntry()) != null) {
			list.add(entry);
		}
		
		this.timer.stop("selecting ePolicyObj");
		return list.toArray();
	}
	
	
	//Read query from file , apply evaluation and perfrom select
	
	this.query = function(queryName , entry, addToResult){
		addToResult = addToResult || new java.util.ArrayList().toArray();
		
		this.timer.start("querying ePolicyObj");

		var select = loadFileToString("POC_MVP/query_" + queryName + ".txt" );
		select = this.map.evaluate("epolicydb.query" , select , entry);
		var resultArray = this.select(select);
		
		if (addToResult.length > 0) {
			var result = new java.util.ArrayList();
			for (var entry in resultArray) {
				result.add(entry);
			}
			for (var entry in addToResult) {
				result.add(entry);
			}
			resultArray = result.toArray();
		}
		
		this.timer.stop("querying ePolicyObj");
		return resultArray;
	}
	// Initialization code below here
	
	this.initialize();
	
	return this;
}]]></parameter>
        </Script>
    
        
        
        <Script name="ClauseControlObj">
            <ModTime>1597668036875</ModTime>
            <parameter name="enabled">true</parameter>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[var ClauseControlObj = function(args) {
//	this.vrs = "20200701 1049"; // Initial version
    //this.vrs = "20200701 1817"; // Finding latest published policy template
	//this.vrs = "20200702 1538"; // Storing Templace Clauses in a map and providing getTemplateClause() method
	//this.vrs = "20200805 2241"; // added timings
	this.vrs = "20200817 1440"; // added debug property to args to cause object to NOT read in template policy and clauses
    
    this.debug = false;
	
	this.timer = typeof timer != "undefined" ? timer : {start: function() {}, stop: function() {}, timers: function() {return {} }};

	this.op = args.openPagesObj ? args.openPagesObj : args;
	this.debug = args.debug || false;

	this.ccMap = new java.util.HashMap();
	this.clauseMap = new java.util.HashMap();
	this.templatePolicy = null;
	this.mandatoryClauses = [
							"Introduction", 
							"Scope", 
							"Processes used in this document",
							"Document structure",
							"Appendices"
							//"Technical Specifications"
						    ];
	

	this.log = function(lvl, msg, throwit) {
		throwit = throwit || false;
		if (typeof lvl == "undefined") {
			msg = "";
			lvl = "INFO";
		} else
		if (typeof msg == "undefined") {
			msg = lvl;
			lvl = "INFO";
		}
		
		log(lvl, "[ClauseControlObj] " + msg);
		if (throwit) throw "[ClauseControlObj] " + msg;
	}
	
	this.findClauseControl = function(code) {
		return this.ccMap.get(code);
	}
	
	this.getTemplateClause = function(clause) {
		return this.clauseMap.get(String(clause || "").toLowerCase());
	}
	
	this.initialize = function() {
		this.log(" v" + this.vrs);
		
		var useTemplate = system.getTDIProperty("policy.template");
		log("Using Policy Template: " + useTemplate);
		
		if (debug) {
			return;
		}
		
		//if (this.readCache(useTemplate)) {
		//	return;
		//}

		this.timer.start("initializing ClauseControlObj");
		var list = op.query("select * from [GTSLibPolicy]");
		var templatePolicy = null;
		var lastVersion = '';
		
		for(var temp in list)
		{
			//this.log(temp);
			// Commented out this as we need to use POLT-50 for testing
//			if("Published".equalsIgnoreCase(temp.getString("GTS-LibPolicy:Status")))
//			{
//				var version = temp.getString("GTS-LibPolicy:Version");
//				if(version > lastVersion)
//				{
//					templatePolicy = temp;
//					lastVersion = version;
//				}
//			}
         // Hard-coding for now 
         if(useTemplate.equalsIgnoreCase(temp.getString("Name"))){
         	var version = temp.getString("GTS-LibPolicy:Version");
			if(version > lastVersion)
			 {
			  templatePolicy = temp;
			  lastVersion = version;
			}
         } 
		}
		
		if(templatePolicy == null)
		{
			this.log("FATAL","Could not find published policy template in OpenPages",true);
		}
		
		
		log("Found Template Policy: " + templatePolicy.name + " - " + templatePolicy["Resource ID"]);
		this.templatePolicy = templatePolicy;
		
		var templateClauses = op.findChildren("GTSLibPolicy",
											templatePolicy.getString("Resource ID"),
											"GTSLibClause");
		for (var tc in templateClauses) {
			log("Found Template Clause: " + tc.description);
			if (this.debug) this.log("----- Found Template Clause: " + tc.name + " - " + tc["Resource ID"] + " - " + tc.description);
			
			var description = tc.getString("description") || "*no_template_clause_description_found*";
			var p = description.indexOf(" ");
			var procedureIndex = -1;
			if (p > 0 && p < 4) {
				var indexStr = description.substring(0,p).trim();
				if (system.isValidInt(indexStr)) {
					procedureIndex = system.toInt(indexStr);
					description = description.substring(p+1).trim().toLowerCase();
				}
			}
			if (procedureIndex == -1) {
				if (description.substring(1,2) == ".") {
					procedureIndex = description.substring(0, 1);
					description = description.substring(2).trim().toLowerCase();
				} else {
					description = description.trim().toLowerCase();
				}
			}
			this.clauseMap.put(description, tc);
			
			var controlTopics = op.findChildren("GTSLibClause",
											tc.getString("Resource ID"),
											"GTSCtlTopic");
											
			for (var ct in controlTopics) {
				//log("     Found Control Topic: " + ct);
				if (this.debug) this.log("           Found Control Topic: " + ct.Name + " - " + ct["Resource ID"]);
				
				var templateClauseControls = op.findChildren("GTSCtlTopic",
															ct.getString("Resource ID"),
															"GTSLibClauseCtl");
				for (var tcc in templateClauseControls) {
					//log("                Found Template Clause Controls: " + tcc);
					if (this.debug) this.log("                  Found Template Clause Control: " + tcc.description);
					var tccId = tcc.getString("description");
					tcc.controlTopic = ct;
					tcc.templateClause = tc;
					tcc.templatePolicy = templatePolicy;
					
					this.ccMap.put(tccId, tcc);
				}
			}
		}
		
		// Check that mandatory clauses are defined for the Policy Template
		var missingClauses = [];
		for (var clauseIndex in this.mandatoryClauses) {
			var mandatoryClause = this.mandatoryClauses[clauseIndex];
			
			var templateClause = this.getTemplateClause(mandatoryClause);
				
			if (templateClause == null) {
				missingClauses.push(mandatoryClause);
			}
		}
		if (missingClauses.length > 0) {
			this.log("FATAL", "The following mandatory clause(s) are missing from the Policy Template: " + missingClauses.join(", "), true);
		}
		
		//this.saveCache(useTemplate);
		
		this.timer.stop("initializing ClauseControlObj");
	}
	
	// Commits read Clause Control data to file
	this.saveCache = function(templateName) {
		var file = new java.io.File("POC_MVP/cache");
		if (!file.exists()) {
			if (!file.mkdir()) {
				this.log("WARN", "Unable to create cache subfolder");
				return;
			}
		}
		
		var stateObj = {
			ccMap: {},
			clauseMap: {}
		};
		for (var cc in this.ccMap) {
			stateObj.ccMap[cc] = this.ccMap.get(cc).toJSON();
		}
		for (var desc in this.clauseMap) {
			stateObj.clauseMap[desc] = this.clauseMap[desc].toJSON();
		}
		
		file = system.openFileForOutput("POC_MVP/cache/ClauseControlObj_" + templateName + ".cache");
		file.write(toJson(stateObj));
		file.close();
		
		this.log("Clause Control templates cached");
	}
	
	// Reads the cache, returning true if successful
	this.readCache = function(templateName) {
		var file;
		try {
			file = new java.io.File("POC_MVP/cache/ClauseControlObj_" + templateName + ".cache");
			if (!file.exists()) {
				return false;
			}
			
			this.log("Restoring Policy Template from cached file");
			var json = loadFileToString(file.getAbsolutePath());
			var stateObj = fromJson(json);
			
			this.ccMap = new java.util.HashMap();
			for (var cc in stateObj.ccMap) {
				var e = com.ibm.di.entry.Entry.fromJSON(stateObj.ccMap[cc]);
				this.ccMap[cc] = e;
			}
			
			this.clauseMap = new java.util.HashMap();
			for (var desc in stateObj.clauseMap) {
				var e = com.ibm.di.entry.Entry.fromJSON(stateObj.clauseMap[desc]);
				this.clauseMap.put(desc, e);
			}

			return true;
		} catch (ex) {
			return false;
		}
	}
	
	
	// ------ initialization code below
	
	this.initialize();
	
	return this;
}]]></parameter>
        </Script>
    <Script name="Timer">
            <ModTime>1597860482083</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[var Timer = function() {
	this.vrs = "20200804 1048"; // initial version
	this._timers = {};
	this._times = {};
	
	this.log = function(lvl, msg) {
		if (typeof lvl == "undefined") {
			msg = "";
			lvl = "INFO";
		} else
		if (typeof msg == "undefined") {
			msg = lvl;
			lvl = "INFO";
		}
		
		log(lvl, "[Timer] " + msg);
	}
	
	this.initialize = function() {
		this.log(" v" + this.vrs);
	}	
	
	// ------- Timing functions
	
	this.start = function(name) {
		if (this._times[name]) {
			this.log("WARN", "Restarting timer for " + name);
		}
		this._times[name] = java.lang.System.currentTimeMillis();
	}
	
	this.stop = function(name) {
		if (typeof this._times[name] != "number") {
			this.log("WARN", "No start time found for " + name);
		} else {
			var diff = java.lang.System.currentTimeMillis() - this._times[name];
			var newVal = (this._timers[name] || 0) + diff;
			this._timers[name] = newVal;
		}
		
		delete this._times[name];
	}
	
	this.timers = function() {
		var t;
		var stillOpen = [];
		for (t in this._times) {
			stillOpen.push(t);
		}
		if (stillOpen.length > 0) {
			log("WARN", "The following timers are still open: " + stillOpen.join(", "));
		}
		return this._timers;
	}
		
	// ------- Initialization code below
	
	this.initialize();
	
	return this;
}]]></parameter>
        </Script>
    <Script name="RequestObj">
            <ModTime>1597152849350</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[var RequestObj = function(requestEntry) {
	this.vrs = "20200806 1755"; // initial version
    
    this.requestEntry = requestEntry || system.newEntry();
    
    this.requestDetails = {};
    // These properties are now in 'props'
	//    this.auth = null; // Authorization header
	//    this.base = null; // Full HTTP base, f.ex. /validate
	//    this.path = null; // Just the path without forward-slash, f.ex. validate
	//    this.body = null; // HTTP body passed in the request
    
    this.debug = false; // not in use yet
 	
	this.log = function(lvl, msg, throwit) {
		throwit = throwit || false;
		if (typeof lvl == "undefined") {
			msg = "";
			lvl = "INFO";
		} else
		if (typeof msg == "undefined") {
			msg = lvl;
			lvl = "INFO";
		}
		
		log(lvl, "[RequestObj] " + msg);
		if (throwit) throw "[RequestObj] " + msg;
	}

	this.operation = function() {
		if (!this.requestDetails || !this.requestDetails.path) {
			return "Invalid - Request not being processed";
		}
		return this.requestDetails.path.toLowerCase();
	}
	
	this.accounts = function() {
		return this.requestDetails.accounts;
	}
	
	this.parseRequest = function() {
		var entry = this.requestEntry;
		
		this.requestDetails = {};
		this.requestDetails.auth = entry.getString("http.Authorization");
		this.requestDetails.base = entry.getString("http.base");
		var parts = this.requestDetails.base.split("/");
		this.requestDetails.path = (parts.length = 2) ? parts[1].toLowerCase() : "";
		this.requestDetails.body = entry.getString("http.bodyAsString") || "";
		this.requestDetails.method = entry.getString("http.method");

		// Now parse the HTTP body and assign to local settings
		try {
			var obj = fromJson(this.requestDetails.body);
			this.requestDetails.accounts = obj.accounts;
		} catch (ex) {
			this.setResult({
				resultCode: "400",
				resultMsg: "Bad Request - invalid JSON payload recieved in body: " + this.requestDetails.body
			});
			this.requestDetails.accounts = [];
		}
	}

	this.processRequest = function() {
		if (!"POST".equalsIgnoreCase(this.requestDetails.method)) {
			this.setResult({
				resultCode: "400",
				resultMsg: "Bad Request - unsupported HTTP verb: " + String(this.requestDetails.method).toUpperCase()
			})
		}

		if (!this.authenticated(this.requestDetails.auth)) {
			this.setResult({
				resultCode: "401",
				resultMsg: "Unauthorized"
			});
			return;
		}
		
		switch (this.requestDetails.path) {
			case "validate":
				this.validate();
				break;
			case "migrate":
				this.migrate();
				break;
			default: this.setResult({
				resultCode: "400",
				resultMsg: "Bad Requst - Invalid Path: " + path
			})
		}
	}
	
	this.authenticated = function(auth) {
		auth = auth || "";
		if (auth == "" || auth == null) {
			return false;
		}
		
		return true;
	}
	
	this.setResult = function(args){
		var code 					= args.resultCode || args.resultcode || "200";
		work["http.resultCode"] = code;
		work["http.resultMsg"] 		= args.resultMsg || args.resultmsg || "Ok";
		work["http.Content-Type"] 	= args.contentType || args.contenttype || "application/json";
		work["http.body"] 			= args.body || '{"message" : "No results"}';
		
		switch (code){
			case "200": 
				log("Request completed successfully");
				break;
			default:
				log("ERROR",
					work.getString("http.resultMsg")
					+ " (" + work.getString("http.resultCode") + ")"
					+ " return body: " + work.getString("http.body"));
		}
		 
	}
	
	this.validate = function() {
		this.setResult({
			resultCode: "200",
			resultMsg: "Ok - Migration completed successfully",
			body: loadFileToString("POC_MVP/mockup/validate.json")
		});
	}
	
	this.migrate = function() {
		this.setResult({
			resultCode: "200",
			resultMsg: "Ok - Migration completed successfully",
			body: loadFileToString("POC_MVP/mockup/migrate.json")
		});
	}
	
	this.initialize = function() {
		this.log("v" + this.vrs);

		this.parseRequest();
	}
	
	
	// ------ initialization code below
	
	this.initialize();
	
	return this;
}]]></parameter>
        </Script>
    <Script name="evidenceAndLogs">
            <ModTime>1597864500117</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[function addEvidenceAndLogs(args) {
	// Now to find Evidences for this CSD

	var parentEntry = args.parentEntry;
	var parentType = args.parentType;
	var parentId = args.parentId;
	var entryForQuery = args.entryForQuery;
	var templatePolicy = args.templatePolicy || system.newEntry();
	var document_version = args.document_version;
	var debug = args.debug || false
	var doMigration = args.doMigration || false;
	var namePrefix = args.namePrefix || "";
	
	parentEntry.document_version = document_version;
	parentEntry.namePrefix = namePrefix;

	var EVList = db.query("evidence", entryForQuery);

	for (evidence in EVList) {
		log("Found evidence: " + evidence.toJSON());

		// Set up attributes for later mapping

		evidence.Evidence_filename = evidence.NAME;
		evidence.document_version = document_version;

		// Prepare to add evidence documents by mapping the details

		var map = new Mapper("POC_MVP/map_evidence.map");
		var evidenceDetails = map.map([evidence, 
										parentEntry, 
										ePolicyAccount, 
										newPolicy, 
										opAccount, 
										CSD]);

		log("Preparing to log evidence attachments for: " + evidenceDetails.toJSON());

		// Find attachment for evidence

		var EVAttachList = db.query("evidence_attachment", evidence);

		//break; log("\n\n\n****** debug short-circuit at line 140 ****\n\n\n");

		for (var EVAttachDoc in EVAttachList) {
			// Add the doc as child of the policy
			log("Attaching evidence doc to OpenPages Policy");
			
			var map = new Mapper("POC_MVP/map_evidencedoc.map");
			var evDoc = map.map([EVAttachDoc, 
									evidenceDetails, 
									parentEntry, 
									ePolicyAccount, 
									newPolicy, 
									opAccount, 
									CSD]);
									
			evDoc.content = EVAttachDoc.getObject("DATA");
			var name = EVAttachDoc.getString("Name");
			var nameParts = getFilenameParts(name);
			
			evDoc.Name = nameParts.filename;
			evDoc.extension = nameParts.extension;


			var opEVDoc = op.add(evDoc, {
				objectType: "SOXDocument",
				parentType: parentType,
				primaryParentId: parentId,
				debug: debug || !doMigration
			});
			
			if (doMigration) {
				log("Created evidence attachment: " + opEVDoc.toJSON());
	
				// Add to the creation metric info
				saveCreationDetails(accountNameWithCode, "SOXDocument", opEVDoc, policyChildren);
			}
		}
	}


	// Now to find validation logs for this CSD
	var vLogmap = new Mapper("POC_MVP/map_validationlog.map");
	var vLogDocmap = new Mapper("POC_MVP/map_validationlogdoc.map");

	var VLList = db.query("validation_log", entryForQuery);

	// Set up the Template Policy name for mapping below
	templatePolicy.template_name = templatePolicy.name;

	var excel = null;
	var vLog = null;
	for (var vLog in VLList) {
		log("Migrating Validation Log: " + vLog.toJSON());

		// Map VLog Entry for Excel spread sheet
		var vlEntry = vLogmap.map([vLog, 
									parentEntry, 
									ePolicyAccount, 
									templatePolicy, 
									CSD, 
									opAccount, 
									newPolicy]);

		log("Mapped Validation Log to: " + vlEntry.toJSON());

		// generate Excel sheet
		if (excel == null) {
			excel = new ExcelSheet({
				sheetFileName: vlEntry.getString("File name"),
				sheetname: "Validation Log",
				columnsFileName: "POC_MVP/fields_validationlog.txt"
			});
		}
		excel.addRow(vlEntry);
	}

	if (vLog != null) {
		// Map VLog attachement
		var vlDoc = vLogDocmap.map([vLog, 
									parentEntry, 
									ePolicyAccount, 
									newPolicy, 
									opAccount, 
									CSD]);

		// Now set the content and name of the attachment
		vlDoc.content = excel.getBytes();
		vlDoc.extension = "xlsx";

		// Create Policy attachment
		var opVLDoc = op.add(vlDoc, {
			objectType: "SOXDocument",
			parentType: parentType,
			primaryParentId: parentId,
			debug: debug || !doMigration
		});
		
		if (doMigration) {
			log("Created validation log file : " + opVLDoc.toJSON());
	
			// Add to the creation metric info
			saveCreationDetails(accountNameWithCode, "SOXDocument", opVLDoc, policyChildren);
		}
	}

	// Now to find evidence logs for this CSD
	var eLogmap = new Mapper("POC_MVP/map_evidencelog.map");
	var eLogDocmap = new Mapper("POC_MVP/map_evidencelogdoc.map");

	var ELList = db.query("evidence_log", entryForQuery);
	
	// Set up the Template Policy name for mapping below
	templatePolicy.template_name = templatePolicy.name;

	excel = null;
	var eLog = null;
	for (eLog in ELList) {
		log("Migrating Evidence Log: " + eLog.toJSON());

		// Map ELog Entry for Excel spread sheet
		var elEntry = eLogmap.map([eLog, 
									parentEntry, 
									ePolicyAccount, 
									templatePolicy, 
									CSD, 
									opAccount, 
									newPolicy]);

		log("Mapped Evidence Log to: " + elEntry.toJSON());

		// generate Excel sheet
		if (excel == null) {
			excel = new ExcelSheet({
				sheetFileName: elEntry.getString("File name"),
				sheetname:"Evidence Log",
				columnsFileName: "POC_MVP/fields_evidencelog.txt"
			});
		}
		excel.addRow(elEntry);
	}

	if (eLog != null) {
		// Map ELog attachement
		var elDoc = eLogDocmap.map([eLog, 
									parentEntry, 
									ePolicyAccount, 
									newPolicy, 
									opAccount, 
									CSD, 
									newPolicy]);

		// Now set the content and name of the attachment
		elDoc.content = excel.getBytes();
		elDoc.extension = "xlsx";

		// Create Policy attachment
		var opELDoc = op.add(elDoc, {
			objectType: "SOXDocument",
			parentType: parentType,
			primaryParentId: parentId,
			debug: debug || !doMigration
		});
		
		if (doMigration) {
			log("Created evidence log file : " + opELDoc.toJSON());
	
			// Add to the creation metric info
			saveCreationDetails(accountNameWithCode, "SOXDocument", opELDoc, policyChildren);
		}
	}


	// Now to find History logs for this CSD
	var hLogmap = new Mapper("POC_MVP/map_historylog.map");
	var hLogDocmap = new Mapper("POC_MVP/map_historylogdoc.map");

	var HLList = db.query("history_log", entryForQuery);

	excel = null;
	var hLog = null;
	for (hLog in HLList) {
		log("Migrating History Log: " + hLog.toJSON());
		
		// Map hLog Entry for Excel spread sheet
		var hlEntry = hLogmap.map([hLog, 
									parentEntry, 
									ePolicyAccount, 
									templatePolicy, 
									CSD, 
									opAccount, 
									newPolicy]);

		log("Mapped History Log to: " + hlEntry.toJSON());
		
		// generate Excel sheet
		if (excel == null) {
			excel = new ExcelSheet({
				sheetFileName: hlEntry.getString("File name"),
				sheetname:"History Log",
				columnsFileName: "POC_MVP/fields_historylog.txt"
			});
		}
		excel.addRow(hlEntry);
	}

	if (hLog != null) {
		// Map VLog attachement
		var hlDoc = hLogDocmap.map([hLog, 
									parentEntry, 
									ePolicyAccount, 
									newPolicy, 
									opAccount, 
									CSD, 
									newPolicy]);

		// Now set the content and name of the attachment
		hlDoc.content = excel.getBytes();
		hlDoc.extension = "xlsx";

		// write to openpages
		var opHLDoc = op.add(hlDoc, {
			objectType: "SOXDocument",
			parentType: parentType,
			primaryParentId: parentId,
			debug: debug || !doMigration
		});
		
		if (doMigration) {
			log("Created History log file : " + opHLDoc.toJSON());
	
			// Add to the creation metric info
			saveCreationDetails(accountNameWithCode, "SOXDocument", opHLDoc, policyChildren);
		}
	}
}]]></parameter>
        </Script>
        <Script name="TDIEnvironmentAccessor">
            <ModTime>1597750767506</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[//////////////////////////////////////////////////////////////////////////////
//
//  Licensed Materials - Property of IBM
//
//  5725-D51
//
//  (C) Copyright IBM Corporation 2017.  All Rights Reserved.
//
//  US Government Users Restricted Rights - Use, duplication or
//  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//
//////////////////////////////////////////////////////////////////////////////
var TDIEnvironmentAccessor = function() {
    return {
        get : function(parmValue) {
            try {
                if (typeof parmValue !== "undefined" && task && task.getCurrentWork()) {
                    var value = task.getCurrentWork()[parmValue];
                    if (value) {
                        return value[0];
                    }
                }
            } catch (e) {
            }
        }
    };
};
//noinspection JSAnnotator
return TDIEnvironmentAccessor;]]></parameter>
        </Script>
        <Script name="PolyFills">
            <ModTime>1597750806272</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[//////////////////////////////////////////////////////////////////////////////
//
//  Licensed Materials - Property of IBM
//
//  5725-D51
//
//  (C) Copyright IBM Corporation 2017.  All Rights Reserved.
//
//  US Government Users Restricted Rights - Use, duplication or
//  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//
//  Polyfill methods for javascript functions not supported by TDI 7.1.1.
//
//  The methods polyfilled here are:
//
//  1) Array.indexOf
//  2) Array.map
//  3) Array.forEach
//  4) String.split --  however, instead of replacing String.split, String.prototype.splitPolyfilled is added, since
//                      there are issues with the TDI environment where this is converned.  This method is only
//                      needed currently to split a string using a regular expression.  Splitting on a string works
//                      in TDI.  This is also the only polyfill here that doesn't come from developer.mozilla.org.
//
//////////////////////////////////////////////////////////////////////////////
/**
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Polyfill
 */
if (! Array.prototype.indexOf) {
    Array.prototype.indexOf = function (searchElement, fromIndex) {
        var k;
        // 1. Let o be the result of calling ToObject passing
        //    the this value as the argument.
        if (this == null) {
            throw new TypeError('"this" is null or not defined');
        }
        var o = Object(this);
        // 2. Let lenValue be the result of calling the Get
        //    internal method of o with the argument "length".
        // 3. Let len be ToUint32(lenValue).
        var len = o.length >>> 0;
        // 4. If len is 0, return -1.
        if (len === 0) {
            return -1;
        }
        // 5. If argument fromIndex was passed let n be
        //    ToInteger(fromIndex); else let n be 0.
        var n = fromIndex | 0;
        // 6. If n >= len, return -1.
        if (n >= len) {
            return -1;
        }
        // 7. If n >= 0, then Let k be n.
        // 8. Else, n<0, Let k be len - abs(n).
        //    If k is less than 0, then let k be 0.
        k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);
        // 9. Repeat, while k < len
        while (k < len) {
            // a. Let Pk be ToString(k).
            //   This is implicit for LHS operands of the in operator
            // b. Let kPresent be the result of calling the
            //    HasProperty internal method of o with argument Pk.
            //   This step can be combined with c
            // c. If kPresent is true, then
            //    i.  Let elementK be the result of calling the Get
            //        internal method of o with the argument ToString(k).
            //   ii.  Let same be the result of applying the
            //        Strict Equality Comparison Algorithm to
            //        searchElement and elementK.
            //  iii.  If same is true, return k.
            if (k in o && o[k] === searchElement) {
                return k;
            }
            k++;
        }
        return -1;
    };
}
/**
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Polyfill
 */
if (! Array.prototype.map) {
    Array.prototype.map = function (callback/*, thisArg*/) {
        var T, A, k;
        if (this == null) {
            throw new TypeError('this is null or not defined');
        }
        // 1. Let O be the result of calling ToObject passing the |this|
        //    value as the argument.
        var O = Object(this);
        // 2. Let lenValue be the result of calling the Get internal
        //    method of O with the argument "length".
        // 3. Let len be ToUint32(lenValue).
        var len = O.length >>> 0;
        // 4. If IsCallable(callback) is false, throw a TypeError exception.
        // See: http://es5.github.com/#x9.11
        if (typeof callback !== 'function') {
            throw new TypeError(callback + ' is not a function');
        }
        // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.
        if (arguments.length > 1) {
            T = arguments[1];
        }
        // 6. Let A be a new array created as if by the expression new Array(len)
        //    where Array is the standard built-in constructor with that name and
        //    len is the value of len.
        A = new Array(len);
        // 7. Let k be 0
        k = 0;
        // 8. Repeat, while k < len
        while (k < len) {
            var kValue, mappedValue;
            // a. Let Pk be ToString(k).
            //   This is implicit for LHS operands of the in operator
            // b. Let kPresent be the result of calling the HasProperty internal
            //    method of O with argument Pk.
            //   This step can be combined with c
            // c. If kPresent is true, then
            if (k in O) {
                // i. Let kValue be the result of calling the Get internal
                //    method of O with argument Pk.
                kValue = O[k];
                // ii. Let mappedValue be the result of calling the Call internal
                //     method of callback with T as the this value and argument
                //     list containing kValue, k, and O.
                mappedValue = callback.call(T, kValue, k, O);
                // iii. Call the DefineOwnProperty internal method of A with arguments
                // Pk, Property Descriptor
                // { Value: mappedValue,
                //   Writable: true,
                //   Enumerable: true,
                //   Configurable: true },
                // and false.
                // In browsers that support Object.defineProperty, use the following:
                // Object.defineProperty(A, k, {
                //   value: mappedValue,
                //   writable: true,
                //   enumerable: true,
                //   configurable: true
                // });
                // For best browser support, use the following:
                A[k] = mappedValue;
            }
            // d. Increase k by 1.
            k++;
        }
        // 9. return A
        return A;
    };
}
/**
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Polyfill
 */
if (! Array.prototype.forEach) {
    Array.prototype.forEach = function(callback/*, thisArg*/) {
        var T, k;
        if (this == null) {
            throw new TypeError('this is null or not defined');
        }
        // 1. Let O be the result of calling toObject() passing the
        // |this| value as the argument.
        var O = Object(this);
        // 2. Let lenValue be the result of calling the Get() internal
        // method of O with the argument "length".
        // 3. Let len be toUint32(lenValue).
        var len = O.length >>> 0;
        // 4. If isCallable(callback) is false, throw a TypeError exception.
        // See: http://es5.github.com/#x9.11
        if (typeof callback !== 'function') {
            throw new TypeError(callback + ' is not a function');
        }
        // 5. If thisArg was supplied, let T be thisArg; else let
        // T be undefined.
        if (arguments.length > 1) {
            T = arguments[1];
        }
        // 6. Let k be 0
        k = 0;
        // 7. Repeat, while k < len
        while (k < len) {
            var kValue;
            // a. Let Pk be ToString(k).
            //    This is implicit for LHS operands of the in operator
            // b. Let kPresent be the result of calling the HasProperty
            //    internal method of O with argument Pk.
            //    This step can be combined with c
            // c. If kPresent is true, then
            if (k in O) {
                // i. Let kValue be the result of calling the Get internal
                // method of O with argument Pk.
                kValue = O[k];
                // ii. Call the Call internal method of callback with T as
                // the this value and argument list containing kValue, k, and O.
                callback.call(T, kValue, k, O);
            }
            // d. Increase k by 1.
            k++;
        }
        // 8. return undefined
    };
}
/**
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Polyfill
 */
if (!Array.prototype.filter) {
    Array.prototype.filter = function(fun/*, thisArg*/) {
        'use strict';
        if (this === void 0 || this === null) {
            throw new TypeError();
        }
        var t = Object(this);
        var len = t.length >>> 0;
        if (typeof fun !== 'function') {
            throw new TypeError();
        }
        var res = [];
        var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
        for (var i = 0; i < len; i++) {
            if (i in t) {
                var val = t[i];
                // NOTE: Technically this should Object.defineProperty at
                //       the next index, as push can be affected by
                //       properties on Object.prototype and Array.prototype.
                //       But that method's new, and collisions should be
                //       rare, so use the more-compatible alternative.
                if (fun.call(thisArg, val, i, t)) {
                    res.push(val);
                }
            }
        }
        return res;
    };
}
/*!
 * Cross-Browser Split 1.1.1
 * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>
 * Available under the MIT License
 * ECMAScript compliant, uniform cross-browser split method
 */
/**
 * Splits a string into an array of strings using a regex or string separator. Matches of the
 * separator are not included in the result array. However, if `separator` is a regex that contains
 * capturing groups, backreferences are spliced into the result each time `separator` is matched.
 * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably
 * cross-browser.
 * @param {String} str String to split.
 * @param {RegExp|String} separator Regex or string to use for separating the string.
 * @param {Number} [limit] Maximum number of items to include in the result array.
 * @returns {Array} Array of substrings.
 * @example
 *
 * // Basic use
 * split('a b c d', ' ');
 * // -> ['a', 'b', 'c', 'd']
 *
 * // With limit
 * split('a b c d', ' ', 2);
 * // -> ['a', 'b']
 *
 * // Backreferences in result array
 * split('..word1 word2..', /([a-z]+)(\d+)/i);
 * // -> ['..', 'word', '1', ' ', 'word', '2', '..']
 */
// Avoid running twice; that would break the `nativeSplit` reference
var splitPolyfilled = splitPolyfilled || function (undef) {
    var compliantExecNpcg = /()??/.exec("")[1] === undef, // NPCG: nonparticipating capturing group
        self;
    self = function (str, separator, limit) {
        var output = [],
            flags = (separator.ignoreCase ? "i" : "") +
                (separator.multiline ? "m" : "") +
                (separator.extended ? "x" : "") + // Proposed for ES6
                (separator.sticky ? "y" : ""), // Firefox 3+
            lastLastIndex = 0,
        // Make `global` and avoid `lastIndex` issues by working with a copy
            separator = new RegExp(separator.source, flags + "g"),
            separator2, match, lastIndex, lastLength;
        str += ""; // Type-convert
        if (!compliantExecNpcg) {
            // Doesn't need flags gy, but they don't hurt
            separator2 = new RegExp("^" + separator.source + "$(?!\\s)", flags);
        }
        /* Values for `limit`, per the spec:
         * If undefined: 4294967295 // Math.pow(2, 32) - 1
         * If 0, Infinity, or NaN: 0
         * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
         * If negative number: 4294967296 - Math.floor(Math.abs(limit))
         * If other: Type-convert, then use the above rules
         */
        limit = limit === undef ?
        -1 >>> 0 : // Math.pow(2, 32) - 1
        limit >>> 0; // ToUint32(limit)
        while (match = separator.exec(str)) {
            // `separator.lastIndex` is not reliable cross-browser
            lastIndex = match.index + match[0].length;
            if (lastIndex > lastLastIndex) {
                output.push(str.slice(lastLastIndex, match.index));
                // Fix browsers whose `exec` methods don't consistently return `undefined` for
                // nonparticipating capturing groups
                if (!compliantExecNpcg && match.length > 1) {
                    match[0].replace(separator2, function () {
                        for (var i = 1; i < arguments.length - 2; i++) {
                            if (arguments[i] === undef) {
                                match[i] = undef;
                            }
                        }
                    });
                }
                if (match.length > 1 && match.index < str.length) {
                    output.push(match.slice(1));
                }
                lastLength = match[0].length;
                lastLastIndex = lastIndex;
                if (output.length >= limit) {
                    break;
                }
            }
            if (separator.lastIndex === match.index) {
                separator.lastIndex++; // Avoid an infinite loop
            }
        }
        if (lastLastIndex === str.length) {
            if (lastLength || !separator.test("")) {
                output.push("");
            }
        } else {
            output.push(str.slice(lastLastIndex));
        }
        return output.length > limit ? output.slice(0, limit) : output;
    };
    // For convenience
    String.prototype.splitPolyfilled = function (separator, limit) {
        return self(this, separator, limit);
    };
    return self;
}();
var JSON = JSON || {
    parse: function(sJSON) { return eval('(' + sJSON + ')'); },
    stringify: (function () {
        var toString = Object.prototype.toString;
        var isArray = Array.isArray || function (a) { return toString.call(a) === '[object Array]'; };
        var escMap = {'"': '\\"', '\\': '\\\\', '\b': '\\b', '\f': '\\f', '\n': '\\n', '\r': '\\r', '\t': '\\t'};
        var escFunc = function (m) { return escMap[m] || '\\u' + (m.charCodeAt(0) + 0x10000).toString(16).substr(1); };
        var escRE = /[\\"\u0000-\u001F\u2028\u2029]/g;
        return function stringify(value) {
            if (value == null) {
                return 'null';
            } else if (typeof value === 'number') {
                return isFinite(value) ? value.toString() : 'null';
            } else if (typeof value === 'boolean') {
                return value.toString();
            } else if (typeof value === 'object') {
                if (typeof value.toJSON === 'function') {
                    return stringify(value.toJSON());
                } else if (isArray(value)) {
                    var res = '[';
                    for (var i = 0; i < value.length; i++)
                        res += (i ? ', ' : '') + stringify(value[i]);
                    return res + ']';
                } else if (toString.call(value) === '[object Object]') {
                    var tmp = [];
                    for (var k in value) {
                        if (value.hasOwnProperty(k))
                            tmp.push(stringify(k) + ': ' + stringify(value[k]));
                    }
                    return '{' + tmp.join(', ') + '}';
                }
            }
            return '"' + value.toString().replace(escRE, escFunc) + '"';
        };
    })()
};]]></parameter>
        </Script>
        <Script name="OpenPagesApiClient">
            <ModTime>1597750856173</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[//////////////////////////////////////////////////////////////////////////////
//
//  Licensed Materials - Property of IBM
//
//  5725-D51
//
//  (C) Copyright IBM Corporation 2017.  All Rights Reserved.
//
//  US Government Users Restricted Rights - Use, duplication or
//  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//
//////////////////////////////////////////////////////////////////////////////
var OpenPagesApiClient = function () {
	return {
		initialized : false,
		requestEntry : null,
		cookies : null,
		isoDateMask1 : null,
		isoDateMask2 : null,
		message : {
			"Required parameter not set" : "Required parameter not set",
			"Response from" : "Response from",
			"Request to" : "Request to",
			"Error from" : "Error from",
			"You must restart the SDI server in order for the imported certificate to be trusted." : "You must restart the SDI server in order for the imported certificate to be trusted.",
			"Unable to parse JSON return from" : "Unable to parse JSON return from",
			"Invalid format for URL parameter" : "Invalid format for URL parameter",
			"No field definitions returned for GRC object type" : "No field definitions returned for GRC object type",
			"GRC Object type" : "GRC Object type",
			"has no field defintion for attribute" : "has no field defintion for attribute",
			"The following field is readOnly and cannot be written to" : "The following field is readOnly and cannot be written to",
			"No types returned by OpenPages" : "No types returned by OpenPages",
			"The following fields are readOnly and cannot be written" : "The following fields are readOnly and cannot be written",
			"The following fields are required" : "The following fields are required",
			"Unable to parse DATE_TYPE value for" : "Unable to parse DATE_TYPE value for"
		},
		grcSystemFieldNames : ["name", "description", "primaryParentId", "typeDefinitionId", "parentFolderId"],
		grcSystemFieldTypes : ["String", "String", "Integer (Id)", "Integer (Id)", "Integer (Id)" ],
		schemaType : {
			"DATE_TYPE" : "Date",
			"INTEGER_TYPE" : "Integer",
			"ID_TYPE" : "Integer (Id)",
			"STRING_TYPE" : "String (limited to 4000 characters)",
			"MEDIUM_STRING_TYPE" : "Medium size String (limited to 32000 characters)",
			"LARGE_STRING_TYPE" : "Large size String (limited to configured maximum)",
			"ENUM_TYPE" : "String",
			"MULTI_VALUE_ENUM" : "String (multi-valued)",
			"CURRENCY_TYPE" : "Number (value in default currency)",
			"BOOLEAN_TYPE" : "Boolean (true or false)",
			"FLOAT_TYPE" : "Floating point decimal"
		},
		state : null,
		http : null,
		mailer : null,
		feedProps : null,
		resultSet : null,
		json : null,
		resourceCache : null,
		requirementCache : null,
		initialize : function() {
			return this;
		},
		initializeConnector : function (args) {
			if (this.initialized) {
				this.terminate();
			}
			this.json = new JsonUtil();
			this.requestEntry = system.newEntry();
			this.cookies = system.newEntry();
			this.isoDateMask1 = "yyyy-MM-dd'T'HH:mm:ss.SSZ";
			this.isoDateMask2 = "yyyy-MM-dd'T'HH:mm:ss.SSSZ";
			this.http = system.getConnector("ibmdi.HTTPClient");
			this.http.initialize(null);
			this.mailer = new OPMailProvider().initialize({
				client : this
			});
			this.feedProps = new OPClientFeedProps().initialize({
				client : this
			});
			this.resultSet = new OPResultSet().initialize({
				client : this
			});
			this.state = new OPClientState().initialize({
				client : this,
				opConnectSettings : args.opConnectSettings
			});
			this.initialized = true;
			this.state.initializeOPServerConnection();
			return this;
		},
		terminate : function() {
			this.initialized = false;
			this.http.terminate();
		},
		getGrcObject : function(args) {
			var resp = this.makeRequest({
				verb : "GET",
				ctype : "application/json;charset=utf-8",
				url : this.formatFindObjectQuery(args) + "&caseInsensitive=true"
			});
			return this.grcObjectToEntry(resp);
		},
		executeGrcObjectQuery : function(queryPath, ignoreCache) {
			return this.makeRequest({
				ignoreCache : ignoreCache,
				verb : "GET",
				ctype : "application/json;charset=utf-8",
				url : "/query?q=" + queryPath.replace(" ", "+") + "&caseInsensitive=true",
				where : "executeGrcObjectSetQuery"
			});
		},
		executeGrcObjectSetQuery : function(queryPath) {
			this.resultSet.getResultSet({
				verb : "GET",
				ctype : "application/json;charset=utf-8",
				url : "/query?q=" + queryPath.replace(" ", "+") + "&caseInsensitive=true",
				where : "executeGrcObjectSetQuery"
			});
		},
		getGrcObjectContents : function(resourceId) {
			try {
				return this.makeRequest({
					verb : "GET",
					url : "/contents/" + resourceId,
					where : "getGrcObjectContents"
				});
			} catch (e) {
				if (this.state.isDebug()) {
					this.logDebug("Exception occurred; details:\n" + e);
				}
			}
		},
		getObjectParentAssociations : function(objectType) {
			try {
				return this.makeRequest({
					"verb" : "GET",
					url : "/types/" + objectType + "/associations/parents",
					where : "getObjectParentAssociations",
					ignoreCache : true
				});
			} catch (e) {
				if (this.state.isDebug())
					this.logmsg("DEBUG", "Exception occurred; details:\n" + e);
			}
		},
		/**
		 * Call to OpenPages API for a single entity using the provided path
		 * @param grcEntityPath - a resource path for a single OpenPages entity
		 * @returns {*}
		 */
		executeGrcEntityPath : function(grcEntityPath) {
			return this.makeRequest({
				verb : "GET",
				ctype : "application/json;charset=utf-8",
				url : grcEntityPath,
				where : "executeGrcEntityPath"
			});
		},
		executeGrcObjectSetPath : function(grcObjectSetPath) {
			this.resultSet.getResultSet({
				verb : "GET",
				ctype : "application/json;charset=utf-8",
				url : grcObjectSetPath,
				where : "executeGrcObjectSetPath"
			});
		},
		/**
		 * Creates a new grc object.
		 *
		 * @param grcObj - A javascript object whose properties are the field names.  The properties of an object type
		 * 				   can be retrieved from the OP Rest API via this call:
		 * 				   http://<opserver>:<opport>/grc/api/types/<Type Name>, where <Type Name> is for example:
		 * 				   Submandate, Mandate, Requirement, etc.  Want to know what all the valid types are?  Leave
		 * 				   out the type name in the above example and you get all types in return.
		 */
		postGrcObject : function(grcObj) {
			var grcObjectResponse = this.makeRequest({
				"verb" : "POST",
				"url" : "/contents",
				"ctype" : "application/json;charset=utf-8",
				"where" : "putEntry",
				"body" : this.makeJson(grcObj)
			});
			var statusMsg = "Added GRC object " + grcObj.name;
			var processingStep = this.getCurrentWorkValue("processingStep");
			if (processingStep) {
				this.logmsg("INFO", processingStep + ": " + statusMsg);
			} else {
				this.logmsg("INFO", statusMsg);
			}
			return grcObjectResponse;
		},
		/**
		 * Updates an existing grc object
		 *
		 * @param grcObj - a javascript object whose properties are the field names of the object to update
		 * @param resourceID - the object resource id to update; FYI: the object can be found via the OP Rest Api
		 * 					   call http://<opserver>:<opport>/grc/api/contents/<Resource ID>.
		 */
		putGrcObject : function(grcObj, resourceID) {
			this.clearResourceReferencesFromCache(resourceID);
			// this.logmsg("INFO", "Putting (updating) grcObject: " + this.makeJson(grcObj));
			this.makeRequest({
				verb : "PUT",
				url : "/contents/" + resourceID,
				ctype : "application/json;charset=utf-8",
				where : "modEntry",
				body : this.makeJson(grcObj)
			});
			var statusMsg = "Updated GRC object " + grcObj.name + " with resource id " + resourceID;
			var processingStep = this.getCurrentWorkValue("processingStep");
			if (processingStep) {
				this.logmsg("INFO", processingStep + ": " + statusMsg);
			} else {
				this.logmsg("INFO", statusMsg);
			}
		},
		/**
		 * Sets the child resource as a secondary child of the parent resource.
		 *
		 * @param parentResourceId - the grc resource id of the parent grc object
		 * @param childResourceId - the grc resource id of the child grc object
		 */
		setSecondaryParentAssociationFromResourceIds : function(parentResourceId, childResourceId) {
			var parentResource = this.getGrcObjectContents(parentResourceId);
			if (! parentResource) {
				throw "Parent resource " + parentResourceId + " not found.  Secondary parent association cannot be made";
			}
			var childResource = this.getGrcObjectContents(childResourceId);
			if (! childResource) {
				throw "Child resource " + childResourceId + " not found.  Secondary parent association cannot be made";
			}
			this.setSecondaryParentAssociation({
				parentResourceId : parentResourceId,
				parentTypeId : parentResource.typeDefinitionId,
				parentPath : parentResource.path,
				childResourceId : childResourceId,
				childTypeId : childResource.typeDefinitionId
			});
		},
		/**
		 * Sets the child resource as a secondary child of the parent resource.
		 *
		 * @param args - parentResourceId 	- the Resource Id of the parent grc object
		 * 				 parentTypeId	  	- the resource type id
		 * 				 parentPath 		- the path of the parent resource
		 * 				 childResourceId	- the Resource Id of the child grc object
		 * 				 childTypeId		- the type id of the child grc object
		 */
		setSecondaryParentAssociation : function(args) {
			//
			// Make sure the secondary parent relationship isn't already set
			//
			var existingParents = this.getSecondaryParentAssociations(args.childResourceId);
			if (! existingParents || ! existingParents.length || ! this.findPropertyInObjectList(existingParents, "id", args.parentResourceId)) {
				this.makeRequest({
					verb: "POST",
					url: "/contents/" + args.childResourceId + "/associations/parents",
					ctype: "application/json;charset=utf-8",
					where: "setSecondaryParentAssociation",
					body: toJson([{
						id: args.parentResourceId,
						typeDefinitionId: args.parentTypeId,
						path: args.parentPath,
						associationDefinitionId: args.childTypeId,
						type: "PARENT"
					}])
				});
			}
		},
		getSecondaryParentAssociations : function(childResourceId) {
			return this.makeRequest({
				verb : "GET",
				url : "/contents/" + childResourceId + "/associations/parents",
				ctype : "application/json;charset=utf-8",
				where : "getSecondaryParentAssocations",
				ignoreCache : true
			});
		},
		//
		// Gets the resource id for a particular entity
		//
		getMandateByUcfId : function(ucfId) {
			var resp = this.makeRequest({
				verb : "GET",
				ctype : "application/json;charset=utf-8",
				grcObjectType : "Mandate",
				fields : "*",
				keyField : "UCF-Mand:UCFID",
				keyValue : ucfId
			});
			return this.grcObjectToEntry(resp);
		},
		//
		// Gets the resource id for a particular entity
		//
		getSubMandateByUcfId : function(ucfId) {
			var resp = this.makeRequest({
				verb : "GET",
				ctype : "application/json;charset=utf-8",
				grcObjectType : "Submandate",
				fields : "*",
				keyField : "UCF-SubMand:UCF ID",
				keyValue : ucfId
			});
			return this.grcObjectToEntry(resp);
		},
		//
		// Find a grc object by a specified key field
		//
		// args:
		// 	grcObjectName - The object name, eg "Mandate"
		// 	fields - a comma delimited list of fields to query; defaults to "*" which indicates to get all fields
		// 	keyField - the name of the field that serves as the key, eg "UCF-Mand:UCFID"
		// 	keyValue - the value of the key field to search on, eg "0000010"
		//
		formatFindObjectQuery : function(args) {
			return this.formatQueryPath({
				grcObjectType : args.grcObjectType,
				fields : (args.fields ? args.fields : null),
				whereClause : "[" + args.keyField + "] = '" + args.keyValue + "'"
			})
		},
		//
		// args:
		//		grcObjectType - the grc object type name to look up
		//		fields - a comma delimited list of fields to query; defaults to "*" which indicates to get all fields
		//		whereClause - the where clause to narrow the result set
		//
		formatQueryPath : function(args) {
			var queryPath = "SELECT " +
				(args.fields ? args.fields : "*" ) +
				" from [" +
				args.grcObjectType +
				"]" +
				(args.whereClause ? (" WHERE " + args.whereClause) : "");
			return "/query?q=" + queryPath.replace(" ", "+");
			// java.net.URLEncoder.encode(queryPath.replace(" ", "+"), "UTF-8");
		},
		selectEntries : function() {
		},
		selectConnectorEntries : function(args) {
			if (! this.initialized) {
				this.throwNotInitializedError();
			}
			var urlPath = "/query?q=";
			var selectClause, whereClause, query;
			var url;
			if (args) {
				urlPath = (args.urlPath) ? args.urlPath : urlPath;
				selectClause = args.selectClause;
				whereClause = args.whereClause;
			}
			if (! selectClause) {
				selectClause = "SELECT * from [" + this.state.getGrcObjectType() + "]";
				if (this.state.hasQuery()) {
					selectClause = this.state.getQuery();
				}
			}
			url = urlPath;
			if (url.equalsIgnoreCase("/query?q=")) {
				query = selectClause;
				if (whereClause && query.indexOf(" WHERE ") < 0) {
					query += whereClause;
				}
				url += java.net.URLEncoder.encode(query, "UTF-8");
			}
			this.resultSet.getResultSet({
				verb : "GET",
				url : url,
				ctype : "application/json;charset=utf-8",
				where : "selectConnectorEntries"
			});
		},
		ensureInitialized : function(args) {
			if (! this.initialized) {
				this.initializeConnector(args);
				this.selectConnectorEntries();
			}
		},
		getNextEntry : function() {
			this.ensureInitialized();
			var e = this.resultSet.next();
			if (e) {
				entry.merge(e);
				result.setStatus(1);
			} else {
				result.setStatus(0);
			}
			return entry;
		},
		/**
		 * Add a new grcObject to OpenPages
		 */
		putEntry : function() {
			if (! this.initialized) {
				this.initializeConnector();
			}
			var grcObj = this.entryToGrcObject(entry, true /* creating new */);
			var objName = (! grcObj.name || grcObj.name === "" ? "<no name provided>"
				: grcObj.name);
			if (this.state.isDebug())
				this.logmsg("--->\n" + this.makeJson(grcObj));
			var grcObjectResponse = this.postGrcObject(grcObj);
			//
			// todo: Figure out a better way to perform conditional logic when putting grc objects that doesn't involve
			// switching in a generic method common to all assembly lines that put grc object data.
			// For now, this is an expedience due to time constraints.
			//
			if (this.state.getGrcObjectType() == "Requirement") {
				//
				// Cache the requirement now as it could turn up again in the same assembly line because it can be
				// shared across authority documents and even citations in the same authority document.
				//
				this.cacheRequirement(objName, grcObjectResponse);
				this.setSecondaryRequirementParentAssociations(this.getResourceIDFromGrcObject(grcObjectResponse));
			}
		},
		setSecondaryRequirementParentAssociations : function(requirementResourceID) {
			//
			// Assembly line collects these citation ids in preparation for this process to pick up and set
			// as secondary parents
			//
			var secondaryParentCitationIDs = entry["citations"];
			if (secondaryParentCitationIDs) {
				var numCitations = secondaryParentCitationIDs.size();
				for (var i=0; i < numCitations; i++) {
					var secondaryParentCitationID = secondaryParentCitationIDs[i];
					var submandateName = "UCF-CIT-" + new java.text.DecimalFormat("0000000").format(
							parseInt(secondaryParentCitationID , 10));
					try {
						var submandateObj = this.executeGrcObjectQuery(
							"SELECT [Resource ID] FROM [Submandate] where [Name] = '" + submandateName + "'");
						var submandateResourceID = this.getResourceIDFromGrcObject(submandateObj);
						if (submandateResourceID) {
							this.setSecondaryParentAssociationFromResourceIds(submandateResourceID, requirementResourceID);
						}
					} catch (e) {
						this.logmsg("ERROR", "Failed to establish seconary parentage from Requirement " +
							requirementResourceID + " to Submandate " + submandateName);
					}
				}
			}
		},
		/**
		 * Extract the named field value from the grcObject.
		 *
		 * @param grcObject - a grc object that has either been queried or lookup up in some fashion from OpenPages
		 * @param fieldPropKey - the name of the property key to search on
		 * @param fieldPropValue - the value of the field identified by fieldPropKey to search for
		 *
         * @returns {*}
         */
		getFieldValueFromGrcObject : function(grcObject, fieldPropKey, fieldPropValue) {
			if (grcObject.rows && grcObject.rows.length) {
				grcObject = grcObject.rows[0];
			}
			if (grcObject && grcObject.fields && grcObject.fields.field) {
				var field = this.findPropertyInObjectList(grcObject.fields.field, fieldPropKey, fieldPropValue);
				return field && field.value;
			}
			return null;
		},
		/**
		 * Find the Resource ID value from a grcObject
		 *
		 * @param grcObject - a grc object that has either been queried or lookup up in some fashion from OpenPages
		 *
         * @returns {*}
         */
		getResourceIDFromGrcObject : function(grcObject) {
			return this.getFieldValueFromGrcObject(grcObject, "name", "Resource ID");
		},
		/**
		 * Finds an object in a list of objects that has a property (identified by propKey) with the value
		 * specified by propValue
		 *
		 * @param objectList - the object list to search
		 * @param propKey - the name of the object property to search on
		 * @param propValue - the value the object property must have to identify the object to return
		 *
         * @returns the object if found, null otherwise
         */
		findPropertyInObjectList : function(objectList, propKey, propValue) {
			for (var i=0; i < objectList.length; i++) {
				var obj = objectList[i];
				if (obj[propKey] && obj[propKey] === propValue) {
					return obj;
				}
			}
		},
		modEntry : function() {
			if (! this.initialized) {
				this.initializeConnector();
			}
			var grcObjectResourceId = this.state.current.getString("Resource ID");
			var existingGrcObject = null;
			var objName = null;
			if (this.state.getGrcObjectType() == "Requirement") {
				objName = entry["name"];
				if (objName && objName.getValue) {
					existingGrcObject = this.getCachedRequirement(objName.getValue());
				}
			}
			//
			// Only update an object that has not already been updated
			//
			if (! existingGrcObject) {
				var grcObj = this.entryToGrcObject(entry, false /* modifying existing */);
				if (this.state.isDebug()) {
					this.logmsg("--->\n" + this.makeJson(grcObj));
				}
				this.putGrcObject(grcObj, grcObjectResourceId);
			}
			if (this.state.getGrcObjectType() == "Requirement") {
				this.setSecondaryRequirementParentAssociations(grcObjectResourceId);
			}
		},
		getNameFromSearchCriteria : function() {
			var critList = search.getCriteria();
			for (var crit in critList) {
				if (crit.name === "Name") {
					return crit.value;
				}
			}
			return null;
		},
		findEntry : function() {
			if (! this.initialized) {
				this.initializeConnector();
			}
			//
			// If this is a requirement object then first look in cache for the requirement by name.
			//
			if (this.state.getGrcObjectType() == "Requirement") {
				var requirementName = this.getNameFromSearchCriteria();
				if (requirementName) {
					var cachedRequirement = this.getCachedRequirement(requirementName);
					if (cachedRequirement) {
						result.setStatus(1);
						var reqEntry = this.grcObjectToEntry(cachedRequirement);
						this.state.setCurrent(reqEntry);
						return reqEntry;
					}
				}
			}
			var res = this.getGrcWhereClause(search);
			this.state.setCurrent(null);
			this.feedProps.clear(); // clear out the feed props for each new entry
			this.selectConnectorEntries({
				urlPath : res.path,
				whereClause : res.where,
				selectClause : res.query
			});
			if (this.resultSet.size() == 1) {
				var e = this.resultSet.next();
				result.setStatus(1);
				this.state.setCurrent(e);
				return e;
			} else if (this.resultSet.size() > 1) {
				while (this.resultSet.hasNext()) {
					connector.addFindEntry(this.resultSet.next());
				}
				result.setStatus(1);
			} else {
				result.setStatus(0);
			}
		},
		deleteEntry : function() {
			if (! this.initialized) {
				this.initializeConnector();
			}
			try {
				//noinspection JSPotentiallyInvalidUsageOfThis
				return this.makeRequest({
					"verb" : "DELETE",
					"url" : "/contents/" + this.state.current.getString("Resource ID"),
					"ctype" : "application/json;charset=utf-8",
					"where" : "deleteEntry"
				});
			} catch (ex) {
				this.logmsg("ERROR",
					"Unable to delete existing object; an exception occured in the OpenPages server: " + ex);
			}
		},
		querySchema : function(objectType) {
			var fieldDefs = this.state.getFieldDefinitions(objectType || this.state.getGrcObjectType());
			var keys = fieldDefs.keySet().toArray();
			java.util.Arrays.sort(keys);
			for (var key in keys) {
				list.add(this.newSchemaEntry(key, fieldDefs));
			}
			for (var i = this.grcSystemFieldNames.length - 1; i > 0; i--) {
				list.add(this.newSchemaEntry(this.grcSystemFieldNames[i], this.grcSystemFieldTypes[i]));
			}
			list.add(this.newSchemaEntry("$grcObject", "JavaScript Object"));
			list.add(this.newSchemaEntry("$grcObjectType", "String"));
			list.add(this.newSchemaEntry("$grcObjectJSON", "JSON"));
			result.setStatus(1);
		},
		newSchemaEntry : function(key, fieldDefs) {
			var e = new com.ibm.di.entry.Entry();
			if (typeof fieldDefs === "string" || typeof fieldDefs[key] === "string") {
				e.addAttributeValue("name", key);
				e.addAttributeValue("syntax", fieldDefs);
			} else {
				e.addAttributeValue("name", fieldDefs[key].name);
				e.addAttributeValue("syntax", this.getSchemaType(fieldDefs, key));
			}
			return e;
		},
		getGrcWhereClause : function(search) {
			var where = "";
			var path = null;
			var query = null;
			var critList = search.getCriteria();
			var type = this.state.getGrcObjectType();
			var boolOp = "AND";
			if (search.getType() == search.SEARCH_OR) {
				boolOp = "OR";
			}
			for (var crit in critList) {
				var fieldDef = this.state.getFieldDefinition(crit.name);
				if (! fieldDef) {
					throw "The link criteria of the OpenPages connector specifies a field name (" + crit.name + ") that does not belong " +
					"to the chosen OpenPages object type (" + type + ").  Either the link criteria or the chosen OpenPages object " +
					"has changed and is out of sync with the other.  Check both settings and try again.";
				}
				if ("Resource ID".equalsIgnoreCase(fieldDef.name) &&
					crit.match == search.EXACT && search.getType() == search.SEARCH_AND) {
					path = "contents/" + crit.value;
					query = null;
					where = null;
					break;
				}
				where += (where.length === 0) ? "" : " " + boolOp + " ";
				where += "[" + fieldDef.name + "]";
				where += this.getGrcClause(crit, fieldDef);
			}
			return {
				where : " WHERE " + where,
				path : path,
				query : query
			};
		},
		getGrcClause : function(criteria, fieldDef) {
			var match = criteria.match;
			var value = criteria.value;
			if (!"INTEGER_TYPE".equals(fieldDef.dataType) && !"CURRENCY_TYPE".equals(fieldDef.dataType)) {
				value = "'" + criteria.value + "'";
			}
			if (match == com.ibm.di.server.SearchCriteria.EXACT || match == com.ibm.di.server.SearchCriteria.EXCACT) {
				return " = " + value;
			} else if (match == com.ibm.di.server.SearchCriteria.FINAL_STRING) {
				return " LIKE '%" + criteria.value + "'";
			} else if (match == com.ibm.di.server.SearchCriteria.GREATER_THAN) {
				return " > " + value;
			} else if (match == com.ibm.di.server.SearchCriteria.GREATER_THAN_OR_EQUAL) {
				return " >= " + value;
			} else if (match == com.ibm.di.server.SearchCriteria.INITIAL_STRING) {
				return " LIKE '" + criteria.value + "%'";
			} else if (match == com.ibm.di.server.SearchCriteria.LESS_THAN) {
				return " < " + value;
			} else if (match == com.ibm.di.server.SearchCriteria.LESS_THAN_OR_EQUAL) {
				return " <= " + value;
			} else if (match == com.ibm.di.server.SearchCriteria.SUBSTRING) {
				return " LIKE '%" + criteria.value + "%'";
			} else {
				throw "Unknown match type: " + match;
			}
		},
		getSchemaType : function(fieldDefs, key) {
			var type = "?undefined " + key + "?";
			var fieldDef = fieldDefs[key];
			if (typeof fieldDef !== "undefined" || fieldDef !== null) {
				var fieldType = this.schemaType[fieldDef.dataType];
				if (fieldType !== null) {
					type = fieldType;
					if ("true".equalsIgnoreCase(fieldDef.readOnly)) {
						type += " (read only)";
					} else if ("true".equalsIgnoreCase(fieldDef.required)) {
						type += " (required)";
					}
				}
			}
			return type;
		},
		entryToGrcObject : function(entry, creatingNew) {
			if (typeof creatingNew === "undefined") {
				creatingNew = true;
			}
			// var grcObj = entry.getObject("$grcObject");
			// Place holder for future use (ucf_integration_control)
			// var grcObjType = entry.getObject("$grcObjectType");
			// if (grcObjType) {
			// 	this.state.setGrcObjectType(grcObjType);
			// 	var thisType = this.state.getTypeByName(grcObjType);
			// 	if (thisType) {
			// 		this.state.setGrcObjectTypeId(thisType.id);
			// 	}
			// }
			var grcObj = {
				fields : {
					field : []
				}
			};
			var fieldDefs = this.state.getFieldDefinitions(entry);
			var templates = this.state.getTemplate(entry);
			var objectType = fieldDefs.get("$grcObjectType");
			var readOnly = [];
			var required = [];
			grcObj.typeDefinitionId = this.state.getTypeByName(objectType).id;
			//
			// It is possible that the system field value for primaryParentId may not be specified.
			// If it is it will be used. If it is not, there may be feed-provided values for
			// "parentType" and "parentLocation" that can be used to derive the primaryParentId.
			// Obtain the static (or dynamically derived) value of the primaryParentId from the
			// feed now so that addGrcSystemField() can use the proper value.
			//
			this.feedProps.obtainPrimaryParentIdFromFeed(entry);
			var i, length;
			for (i = 0, length = this.grcSystemFieldNames.length; i < length; i++) {
				this.addGrcSystemField(grcObj, this.grcSystemFieldNames[i], entry);
			}
			var keys = templates.keySet().toArray();
			java.util.Arrays.sort(keys);
			for (var key in keys) {
				if (key.startsWith("$")) {
					continue;
				}
				var fieldDef = fieldDefs.get(key);
				var att = entry.getAttribute(fieldDef.name);
				if (fieldDef.required && att === null && creatingNew) {
					required.push(fieldDef);
				} else if (fieldDef.readOnly && att !== null) {
					readOnly.push(fieldDef);
				} else if (att !== null) {
					this.addGrcField(grcObj, att, fieldDef);
				}
			}
			var fields;
			if (required.length > 0) {
				fields = "";
				for (i = 0; i < readOnly.length; i++) {
					fields += (fields.length === 0 ? "" : ", ") + readOnly[i].name;
				}
				this.throwException(this.message["The following fields are required"] + ": " + fields);
			}
			if (readOnly.length > 0) {
				fields = "";
				for (i = 0; i < readOnly.length; i++) {
					fields += (fields.length === 0 ? "" : ", ") + readOnly[i].name;
				}
				this.logmsg(
					"WARN",
					this.message["The following fields are readOnly and cannot be written"] + ": " + fields);
			}
			// var ensureFieldValues = [
			// 	{from : "primaryParentId", to : "primaryParentId"},
			// 	{from : "name", to : "Name"},
			// 	{from : "reference", to : "Description"}
			// ];
			//
			// for (i=0; i < ensureFieldValues.length; i++) {
			// 	var field = ensureFieldValues[i];
			// 	if (! grcObj[field.to] && task.getCurrentWork()[field.from]) {
			// 		grcObj[field.to] = task.getCurrentWork()[field.from];
			// 	}
			// }
			return grcObj;
		},
		// This function is for use when setting an entry's primaryParentId
		setGrcPrimaryParentIdFromFeedPropsOrDefault : function(grcObj, name) {
			// If a valid primaryParentId was included in the feed for this entry then
			// use it
			if (this.feedProps.staticPrimaryParentId !== null) {
				grcObj[name] = this.feedProps.staticPrimaryParentId;
				// this.logmsg("INFO", "Using the static primaryParentId value '" + grcObj[name]+ "' supplied in the feed.");
			}
			// otherwise if a primaryParentId was derived from the feed properties then
			// use it
			else if (this.feedProps.derivedPrimaryParentId !== null) {
				grcObj[name] = this.feedProps.derivedPrimaryParentId;
				// this.logmsg("INFO", "Using the primaryParentId value '" + grcObj[name] +
				//    "' derived from the feed's parentType and parentLocation values.");
			}
			// otherwise use the default parent object ID (if any)
			else {
				var defaultPrimaryParentObjectId = this.state.getDefaultPrimaryParentObjectId();
				if (defaultPrimaryParentObjectId !== null) {
					grcObj[name] = defaultPrimaryParentObjectId;
					this.logmsg(
						"INFO",
						"A primaryParentId was not supplied in or derived from the feed; using the default primaryParentId value '" +
						defaultPrimaryParentObjectId +
						"' derived from the op_parentType and op_parentLoc properties. ");
				} else {
					this.logmsg("WARN",
						"A primaryParentId was not supplied in or derived from the feed, and a default primaryParentId is not defined.");
				}
			}
		},
		getCurrentWorkValue : function(key) {
			try {
				return task && task.getCurrentWork() ? task.getCurrentWork()[key] : null;
			} catch (e) {
				return "";
			}
		},
		getCurrentWorkValueString : function(key, required) {
			var value = this.getCurrentWorkValue(key);
			if (value && value.getValue) {
				value = value.getValue();
			}
			if (required && typeof value === "undefined") {
				throw "Required work property " + key + " not found.";
			}
			return value;
		},
		addGrcSystemField : function(grcObj, name, entry) {
			if ("typeDefinitionId".equalsIgnoreCase(name)) {
				grcObj[name] = this.getCurrentWorkValue("grcObjectTypeId");
			} else if ("primaryParentId".equalsIgnoreCase(name)) {
				grcObj["primaryParentId"] = this.getCurrentWorkValue("primaryParentId");
			} else {
				var att = entry[name];
				if (att) {
					// no special handling needed for this field, just set it
					grcObj[name] = att.getValue();
				}
			}
		},
		truncateStringForGrcField : function(stringValue, maxAllowedLength) {
			if (stringValue) {
				if (stringValue.length > maxAllowedLength) {
					stringValue = stringValue.substr(0, maxAllowedLength-50) + "...";
				}
			}
			return stringValue;
		},
		addGrcField : function(grcObj, att, fieldDef) {
			var grcField = {
				dataType : fieldDef.dataType,
				id : fieldDef.id,
				name : fieldDef.name
			};
			var inError = [];
			var attValue = null;
			var field = this.getResultObjectFields(grcObj);
			var addedValue = false;
			var message = "";
			if (this.state.isDebug())
				this.logmsg("DEBUG", "--> Attempting to add " + att.toString() + "   field: " + fieldDef.id);
			if (att !== null && att.size() > 0) {
				attValue = att.getValue(0);
			}
			var value;
			if (attValue !== null) {
				try {
					switch (fieldDef.dataType) {
						case "STRING_TYPE": // string length limited to 4000 chars
							var truncatedStr = this.truncateStringForGrcField(attValue, 4000);
							grcField.value = truncatedStr;
							addedValue = true;
							break;
						case "MEDIUM_STRING_TYPE": // string length limited to 32000 chars
							truncatedStr = this.truncateStringForGrcField(attValue, 32000);
							grcField.value = truncatedStr;
							addedValue = true;
							grcField.dataType = "STRING_TYPE";// nan - OP server doesn't
							// recognize
							// MEDIUM_STRING_TYPE
							break;
						case "LARGE_STRING_TYPE": // string length limited to OP registry
							// setting for largeStringMaxSize
							truncatedStr = this.truncateStringForGrcField(attValue,
								this.state.largeStringMaxSize);
							grcField.value = truncatedStr;
							addedValue = true;
							break;
						case "ID_TYPE":
						case "BOOLEAN_TYPE":
						case "FLOAT_TYPE":
							grcField.value = attValue;
							addedValue = true;
							break;
						case "INTEGER_TYPE":
							grcField.value = attValue;
							addedValue = true;
							break;
						case "ENUM_TYPE":
							value = this.enumValue(attValue, fieldDef);
							if (value !== null) {
								grcField.enumValue = value;
								addedValue = true;
							} else {
								message = "Attempt to add value of '" + attValue +
									"' to enumerated field definition '" +
									fieldDef.name +
									"' was not allowed to object type '" +
									this.state.getGrcObjectType() +
									"'." +
									" The assembly line mapping will need to be modified.";
								this.logmsg("WARN", message);
								this.mailer.sendEmailNotification(message);
							}
							break;
						case "MULTI_VALUE_ENUM":
							grcField.enumValue = [];
							for (var i = 0; i < att.size(); i++) {
								value = this.enumValue(att.getValue(i), fieldDef);
								if (value !== null) {
									grcField.enumValue.push(value);
									addedValue = true;
								} else {
									message = "Attempt to add value of '" + attValue +
										"' to multi-enumerated field definition '" +
										fieldDef.name +
										"' was not allowed to object type '" +
										this.state.getGrcObjectType() +
										"'." +
										" The assembly line mapping will need to be modified.";
									this.logmsg("WARN", message);
									this.mailer.sendEmailNotification(message);
								}
							}
							break;
						case "DATE_TYPE":
							var dateValue = attValue instanceof java.util.Date ? attValue : this.parseDateValue(attValue);
							if (dateValue !== null) {
								// "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" // works but TZ is not
								// accurate
								// TDI 7.1.1 uses Java 6, so we cannot use format string
								// "yyyy-MM-dd'T'HH:mm:ss.SSSXXX"
								// (which *is* supported in Java 7 and newer). So, we are
								// using format string
								// "yyyy-MM-dd'T'HH:mm:ss.SSSZ" and are manually inserting
								// the colon into place at the
								// end of the string in the 4 digits that follow the last
								// "-" or "+" character, and
								// (if present) we remove the ':' directly in front of the
								// 'T'.
								// Example: convert 2013-10-07T07:36:13.000-0400 to
								// 2013-10-07T07:36:13.000-04:00
								// Example: convert 2013-10-07:T07:36:13.000-0400 to
								// 2013-10-07T07:36:13.000-04:00
								var sdf = new java.text.SimpleDateFormat(
									"yyyy-MM-dd'T'HH:mm:ss.SSSZ");
								var timeDate = sdf.format(dateValue);
								timeDate = timeDate.replace(":T", "T");
								var timeDateStr = new java.lang.String(timeDate);
								var insertColonPos = timeDateStr.length - 2;
								var firstPart = timeDateStr.substring(0, insertColonPos);
								var lastPart = timeDateStr.substring(insertColonPos, timeDateStr.length);
								grcField.value = new java.lang.String(firstPart + ":" + lastPart);
								addedValue = true;
							}
							break;
						case "CURRENCY_TYPE":
							// Mapping format required for a currency value in the feed must
							// follow this example:
							// "123.45|AUD"
							// If no ISO code is supplied then the OP Base ISO code is used.
							var valueStr = new java.lang.String(attValue.trim());
							if (valueStr === "") {
								break;
							}
							var separatorIndex = valueStr.indexOf("|");
							var amount = "";
							var doubleVal = null;
							var isoCode = "";
							// parse out the amount and the ISO code from the provided
							// attValue string
							if (separatorIndex !== -1) {
								amount = valueStr.substring(0, separatorIndex).trim();
								isoCode = valueStr.substring(separatorIndex + 1).trim();
							} else {
								amount = valueStr.trim();
							}
							// ensure that the amount is a valid double value
							try {
								doubleVal = java.lang.Double.parseDouble(amount);
							} catch (ex) {
								this.logmsg(
									"ERROR",
									"Detected missing or invalid amount '" +
									amount +
									"' in the value " +
									"specified from the feed for CURRENCY_TYPE field '" +
									fieldDef.name +
									"'. Skipping this currency value.");
								break;
							}
							// ensure that the ISO code is not empty
							if (separatorIndex === -1 || isoCode === null || isoCode === "") {
								isoCode = this.state.defaultCurrencyIsoCode;
								this.logmsg(
									"WARN",
									"Detected missing or invalid ISO code in the value " +
									"specified from the feed for CURRENCY_TYPE field '" +
									fieldDef.name +
									"'. Using the OpenPages default ISO code of '" +
									isoCode + "'.");
							}
							grcField.baseAmount = amount;
							grcField.localAmount = amount;
							// keep track of this field's ISO code for use when creating the
							// JSON for OP
							feedProps.currencyIsoCodes.putIfAbsent(fieldDef.id, isoCode);
							addedValue = true;
							break;
					}
				} catch (ex) {
					inError.push(this.message["Error creating GRC field"] + " - " + ex + " --> " + att.toString());
				}
			}
			if (inError.length > 0) {
				this.throwException(toJson(inError));
			}
			if (addedValue) {
				field[field.length] = grcField;
			}
			return grcField;
		},
		enumValue : function(attValue, fieldDef) {
			var enumValues = fieldDef.enumValues.enumValue;
			if (attValue === null) {
				return null;
			}
			attValue = attValue.trim();
			for (var i = enumValues.length - 1; i >= 0; i--) {
				var thisValue = enumValues[i];
				if (attValue.equalsIgnoreCase(thisValue.name) ||
					attValue.equalsIgnoreCase(thisValue.localizedLabel ||
						attValue.equalsIgnoreCase(thisValue.index))) {
					return {
						index : thisValue.index,
						hidden : thisValue.hidden,
						name : thisValue.name,
						id : thisValue.id,
						localizedLabel : thisValue.localizedLabel
					};
				}
			}
			return null;
		},
		parseDateValue : function(attValue) {
			if (typeof attValue === "undefined" || attValue === null) {
				return null;
			}
			var dt = system.parseDate(attValue, "EEE MMM dd HH:mm:ss z yyyy");
			if (dt === null) {
				dt = system.parseDate(attValue, ISOdateMask1);
			}
			if (dt === null) {
				dt = system.parseDate(attValue, ISOdateMask2);
			}
			if (dt === null) {
				try {
					var df = java.text.DateFormat.getDateInstance();
					dt = df.parse(attValue);
				} catch (ex) {
					dt = null;
				}
			}
			return dt;
		},
		// requests the client cert from the service and installs it into the SDI
		// keystore
		getCertificate : function() {
			return com.ibm.di.security.GetSSLCertificate.installCertificateFrom(
				this.state.connectionProperties.url, 443);
		},
		// examine the reply from OpenPages for any errors returned
		verifyResponse : function(replyEntry) {
			var respCode = replyEntry.getString("http.responseCode");
			if (!respCode.startsWith("2")) {
				this.throwException(this.message["Error from"] + " OpenPages server - code: " +
					respCode + "  message: " +
					replyEntry.getString("http.responseMsg") +
					"\nHTTP Body returned: " +
					replyEntry.getString("http.bodyAsString"));
			}
		},
		_getResourceCache : function() {
			if (! this.resourceCache) {
				var sysProps = java.lang.System.getProperties();
				this.resourceCache = sysProps.get("OPClientResourceCache");
				if (! this.resourceCache) {
					this.resourceCache = new java.util.concurrent.ConcurrentHashMap();
					sysProps.put("OPClientResourceCache", this.resourceCache);
				}
			}
			return this.resourceCache;
		},
		_getRequirementCache : function() {
			if (! this.requirementCache) {
				var sysProps = java.lang.System.getProperties();
				this.requirementCache = sysProps.get("OPClientRequirementCache");
				if (! this.requirementCache) {
					this.requirementCache = new java.util.concurrent.ConcurrentHashMap();
					sysProps.put("OPClientRequirementCache", this.requirementCache);
				}
			}
			return this.requirementCache;
		},
		cacheRequirement : function(name, requirement) {
			this._getRequirementCache().put(name, requirement);
		},
		getCachedRequirement : function(name) {
			return this._getRequirementCache().get(name);
		},
		getCachedResource : function(resourceKey) {
			return this._getResourceCache().get(resourceKey);
		},
		cacheResource : function(resourceKey, resourceObj) {
			this._getResourceCache().put(resourceKey, resourceObj);
		},
		clearResourceReferencesFromCache : function(containsKey) {
			var cache = this._getResourceCache();
			if (typeof cache.keys === "function") {
				var keysToRemove = [];
				cache.keys().forEach(function(key) {
					if (key.contains(containsKey)) {
						keysToRemove.push(key);
					}
				});
				keysToRemove.forEach(function(key) {
					cache.remove(key);
				});
			}
		},
		// workhorse function that handles all comms with OpenPages. It accepts a single
		// argument that is a Javascript object containing the properties set in the
		// first
		// lines of the function. Note that many of these properties are optional and
		// that
		// default values are set by the script is not specified.
		//
		makeRequest : function(args) {
			var requestInfo = this.formatRequestURL(args);
			if (requestInfo.resourceObj) {
				return requestInfo.resourceObj;
			}
			var retEntry = this.executeRequest(requestInfo.url);
			this.verifyResponse(retEntry);
			return this.parseReply(retEntry, requestInfo.resourceKey);
		},
		executeRequest : function(url) {
			var retry = 0;
			var maxRetry = 2;
			var retEntry = null;
			var error = null;
			// this loop makes the actual request. If an SSL handshake error occurs,
			// attempt to retrieve
			// and import the client certificate and inform the user that TDI must be
			// restarted.
			//
			do {
				try {
					retEntry = this.http.queryReply(this.requestEntry);
				} catch (ex) {
					if (ex instanceof javax.net.ssl.SSLHandshakeException) {
						if (retry === 0) {
							this.getCertificate();
						} else {
							this.throwException(this.message["You must restart the SDI server in order for the imported certificate to be trusted."]);
						}
					} else {
						error = ex.getMessage();
						break;
					}
				}
				retry++;
			} while (retEntry === null && retry < maxRetry);
			if (error || ! retEntry)  {
				var urlInfo = url;
				try {
					var parsedURL = new java.net.URL(url);
					urlInfo = parsedURL.getProtocol() + "://" + parsedURL.getAuthority();
				} catch (e) {}
				this.throwException("Cannot establish a connection to " + urlInfo + ".  Ensure that the target server is accessible and try again." +
					(error ?
						"  The connection error returned is " + error :
						""));
			}
			// if Detailed Log is enabled, write reply details to the log
			if (this.state.isDebug()) {
				this.logDetails({
					"msg" : this.message["Response from"] + " OpenPages",
					"entry" : retEntry
				});
			}
			return retEntry;
		},
		formatRequestURL : function(args) {
			var verb = args.verb || "GET"; 	// HTTP method, e.g. GET, POST, PUT, ...
			var url = args.url || ""; 		// url for the request. May be partial (only the path &
			var body = args.body; 			// HTTP body to be passed for the request
			var ctype = args.ctype || "application/json;charset=utf-8"; // Content-Type of the HTTP body
			var where = args.where || ""; 	// where this method is called from - for debugging
			url = this.state.fixPath(url);
			//
			// If getting a resource, check to see if it has been cached by it resource key (url) yet, and if so
			// return it now without rerequesting it from the server
			//
			var resourceKey = null;
			if (! args.ignoreCache && verb === "GET" && url) {
				resourceKey = url;
				var resourceObj = this.getCachedResource(resourceKey);
				if (resourceObj) {
					// this.logmsg("Found cached resource for url " + resourceKey);
					return {
						url : url,
						resourceKey : resourceKey,
						resourceObj : resourceObj
					};
				}
			}
			var cxn = this.state.connectionProperties;
			// prepend the base url if not found in the url passed to the function
			if (url.toLowerCase().indexOf(cxn.url.toLowerCase()) < 0) {
				url = cxn.url + url;
			}
			this.requestEntry.removeAllAttributes();
			if (typeof body !== "undefined" && body !== null && body.trim().length > 0) {
				this.requestEntry["http.body"] = body;
			}
			// set Connector parameters
			this.http.setParam("method", verb.toUpperCase());
			this.http.setParam("url", url);
			// prepare the request Entry (used for POST/PUT calls)
			this.requestEntry["http.Content-Type"] = ctype;
			this.requestEntry["http.Accept"] = "application/json;charset=utf-8";
			this.requestEntry["http.Connection"] = "keep-alive";
			this.requestEntry["http.remote_user"] = cxn.username;
			this.requestEntry["http.remote_pass"] = cxn.password;
			// the following are not used for now:
			//
			// requestEntry["http.Accept-Encoding"] = "gzip, deflate";
			// requestEntry["http.Accept-Language"] = "en-US,en;q=0.5";
			// requestEntry["http.User-Agent"] = "IBM Security Directory Integrator";
			// requestEntry["http.Authorization"] = "BASIC " +
			// system.base64Encode(String(user + ":" + password).getBytes());
			// add any cookies received on previous calls
			if (this.cookies && this.cookies.size() > 0) {
				// requestEntry["X-CouchDB-WWW-Authenticate"] = "Cookie";
				this.requestEntry.merge(this.cookies);
			}
			// if Detailed Log is enabled then write request details to the log
			if (this.state.isDebug()) {
				//noinspection JSPotentiallyInvalidUsageOfThis
				this.logDetails({
					msg : this.message["Request to"] + " OpenPages",
					obj : this.requestEntry,
					url : url,
					verb : verb,
					ctype : ctype,
					where : where
				});
			}
			return {
				url : url,
				resourceKey : resourceKey
			};
		},
		parseReply : function(replyEntry, resourceKey) {
			var body = replyEntry.getString("http.bodyAsString");
			if (body.trim().length === 0) {
				return;
			}
			// var decodedBody = null;
			// try { decodedBody = new java.lang.String(body.getBytes("UTF8"), "UTF8"); } catch (e) {}
			//
			// if (decodedBody) {
			// 	body = decodedBody;
			// }
			var jobj;
			try {
				if (this.state.isDebug()) this.logmsg("DEBUG", "body: " + body);
				//
				// TDIEvn.fromJson
				//
				jobj = fromJson(body);
				// save any cookies passed back
				var setCookie = replyEntry.getAttribute("http.Set-Cookie");
				if (setCookie !== null) {
					for (var i = 0; i < setCookie.size(); i++) {
						var thisCookie = setCookie.getValue(i);
						var p = thisCookie.indexOf("=");
						if (p > 0) {
							this.cookies["http." + thisCookie.substring(0, p)] = thisCookie.substring(p + 1);
						}
					}
				}
			} catch (ex) {
				this.throwException(this.message["Unable to parse JSON return from"] + " OpenPages - " + ex);
			}
			//
			// If a resourceKey is set, then this is a get request for a resource that has been retrieved for the first
			// time in the execution of this assembly line instance.  Cache the resource away for later recall in case
			// it is re-requested on this or subsequent iterations.
			//
			if (resourceKey && jobj) {
				// this.logmsg("INFO", "Caching resource data for url " + resourceKey);
				// this.logmsg("INFO", "Resource object: " + this.toJsonString(jobj));
				this.cacheResource(resourceKey, jobj);
			}
			return jobj;
		},
		logmsg : function (lvl, msg) {
			lvl = lvl || "";
			if (! msg) {
				msg = lvl;
				lvl = "INFO";
			}
			// if Detailed Log is enabled then log output is also sent to the stdout
			if (this.state.isDebug()) {
				java.lang.System.out.println(msg);
			}
			try {
				task.logmsg(lvl, msg);
			} catch (ex) {
				main.logmsg(lvl, msg);
			}
			// send an email notification
			if (lvl === "ERROR") {
				this.mailer.sendEmailNotification(msg);
			}
		},
		// write request or reply details to the log
		logDetails : function(params) {
			var msg = params.msg;
			var obj = params.obj;
			var url = params.url;
			var verb = params.verb;
			var ctype = params.ctype;
			var where = params.where;
			if (msg === null) {
				msg = message["Unnamed entry"];
			}
			var s = new java.lang.StringBuffer();
			if (where !== null) {
				s.append("\n@@@------> (" + where + ") " + msg);
			} else {
				s.append("\n---------> " + msg);
			}
			if (verb !== null) {
				s.append("   " + verb.toUpperCase());
			}
			if (ctype !== null) {
				s.append("   " + ctype);
			}
			if (url !== null) {
				s.append("   " + url);
			}
			s.append("\n");
			if (obj !== null) {
				if (obj instanceof com.ibm.di.entry.Entry) {
					var attNames = obj.getAttributeNames();
					for ( var a in attNames) {
						// include all "http.*" attributes, except bodyAsBytes
						if (a.indexOf("http.") >= 0 && !"http.bodyAsBytes".equalsIgnoreCase(a) && !"http.remote_pass".equalsIgnoreCase(a)) {
							s += " " + a + ": " + obj[a] + "\n";
						}
					}
				} else {
					s.append(obj.toString());
				}
			}
			this.logmsg(s.toString());
		},
		// wrapper function for throwing exceptions. Otherwise exceptions thrown will be
		// 'script' exceptions
		throwException : function (msg) {
			this.logmsg("ERROR", msg); // will also send an email notification
			throw new java.lang.IllegalArgumentException(msg);
		},
		throwNotInitializedError : function() {
			this.throwException("The OpenPages Connector must be initialized before use.");
		},
		getResultObjectFields : function(jobj) {
			if (jobj.fields && jobj.fields.field) {
				return jobj.fields.field;
			}
			if (jobj.rows && jobj.rows.length && jobj.rows[0].fields && jobj.rows[0].fields.field) {
				return jobj.rows[0].fields.field;
			}
		},
		grcObjectToEntry : function(jobj) {
			var entry = system.newEntry();
			var inError = [];
			var i;
			try {
				var type = null;
				var links = jobj.links;
				if (typeof links !== "undefined") {
					for (i = 0; i < links.length; i++) {
						if ("describedby".equals(links[i].rel.toLowerCase().trim())) {
							type = links[i].href.substring(9);
							var p = type.indexOf("?");
							type = type.substring(0, p);
						}
					}
					if (type !== null) {
						entry.$grcObjectType = type;
					}
				}
				var fields = this.getResultObjectFields(jobj);
				if (typeof fields !== "undefined") {
					for (i = 0; i < fields.length; i++) {
						this.addGrcAttribute(entry, fields[i]);
					}
				}
				if (entry.size() > 0) {
					entry.$grcObject = jobj;
					entry.$grcObjectJSON = this.makeJson(jobj);
				}
			} catch (ex) {
				inError.push(this.message["Error parsing json from OpenPages"] + " - " + ex + "  -> " + this.makeJson(jobj));
			}
			if (inError.length > 0) {
				this.throwException(toJson(inError));
			}
			return entry;
		},
		objectToEntry : function(jobj) {
			var entry = system.newEntry();
			for (var prop in jobj) {
				var propValue = jobj[prop];
				if (typeof propValue !== "object") {
					entry[prop] = propValue;
				} else if (prop === "fieldDefinitions" && propValue.fieldDefinition) {
					var defs = [];
					for (var i=0; i < propValue.fieldDefinition.length; i++) {
						var fieldDef = propValue.fieldDefinition[i];
						defs.push({
							id : fieldDef.id,
							name : fieldDef.name,
							dataType : fieldDef.dataType,
							required : fieldDef.required,
							readOnly : fieldDef.readOnly
						})
					}
					entry["fieldDefinitions"] = toJson(defs);
				}
			}
			return entry;
		},
		addGrcAttribute : function(entry, field) {
			if (typeof field === "undefined" || field === null) {
				return;
			}
			var fieldName = field.name;
			var fieldValue = field.value;
			if (typeof fieldName !== "undefined" && fieldName !== null && fieldName.trim().length > 0) {
				fieldName = fieldName.trim();
				try {
					switch (field.dataType) {
						case "STRING_TYPE":
						case "MEDIUM_STRING_TYPE":
						case "LARGE_STRING_TYPE":
						case "ID_TYPE":
						case "BOOLEAN_TYPE":
							if (fieldValue) {
								this.addAttributeValue(entry, fieldName, fieldValue);
							}
							break;
						case "FLOAT_TYPE": // Handles any floating point decimal value as a
							// double value
							if (fieldValue) {
								var doubleVal = 0.0;
								try {
									doubleVal = java.lang.Double.parseDouble(fieldValue);
								} catch (ex) {
									doubleVal = "Error parsing floating point value: " + fieldValue;
								}
								this.addAttributeValue(entry, fieldName, doubleVal);
							}
							break;
						case "INTEGER_TYPE":
							if (fieldValue) {
								var intValue = 0;
								try {
									intValue = system.toInt(fieldValue);
								} catch (ex) {
									intValue = "Error parsing integer value: " + fieldValue;
								}
								this.addAttributeValue(entry, fieldName, intValue);
							} else {
								entry[fieldName] = null;
							}
							break;
						case "ENUM_TYPE":
							if (field.enumValue) {
								if (typeof field.enumValue.name !== "undefined") {
									this.addAttributeValue(entry, fieldName,
										field.enumValue.name);
								}
								if (field.enumValue.index) {
									this.addAttributeValue(entry, fieldName + "_index",
										field.enumValue.index);
								}
							}
							break;
						case "MULTI_VALUE_ENUM":
							if (typeof field.multiEnumValue !== "undefined") {
								var enums = field.multiEnumValue.enumValue;
								if (typeof enums !== "undefined" && enums.length > 0) {
									for (var i = 0; i < enums.length; i++) {
										this.addAttributeValue(entry, fieldName, enums[i].name,
											false);
									}
								}
							}
							break;
						case "DATE_TYPE":
							if (fieldValue) {
								if (fieldValue && fieldValue.endsWith("Z")) {
									fieldValue = fieldValue.substr(0, fieldValue.length-1);
								}
								var dateValue = system.parseDate(fieldValue,
									"yyyy-MM-dd'T'HH:mm:ss.SSS");
								if (dateValue === null) {
									this.logmsg("WARN",
										this.message["Unable to parse DATE_TYPE value for"] + " " + fieldName + ": " + fieldValue);
								}
								this.addAttributeValue(entry, fieldName, dateValue);
							}
							break;
						case "CURRENCY_TYPE":
							this.addAmount(entry, fieldName, "", field.baseAmount,
								field.baseCurrency);
							this.addAmount(entry, fieldName, "_localAmount", field.localAmount,
								field.localCurrency);
							break;
					}
				} catch (ex) {
					if (this.state.isDebug())
						this.logmsg("DEBUG", "--!!--> Error parsing GRC field: " + toJson(field) + " - " + ex);
				}
			}
		},
		addAttributeValue : function(entry, attName, attValue, replace) {
			if (typeof attName === "undefined" || attName === null) {
				return;
			}
			if (typeof replace === "undefined" || !"false".equalsIgnoreCase(replace)) {
				replace = true;
			}
			if (typeof attValue === "undefined" || attValue === null) {
				entry[attName] = entry.returnJavaNull;
			} else if (replace) {
				entry.setAttribute(attName, attValue);
			} else {
				entry.addAttributeValue(attName, attValue);
			}
		},
		addAmount : function(entry, attName, attSuffix, attValue, currency) {
			if (typeof attName === "undefined" || attName === null) {
				return;
			}
			var doubleVal;
			try {
				doubleVal = java.lang.Double.parseDouble(attValue);
			} catch (ex) {
				doubleVal = "Error parsing amount: " + attValue + " - " + ex;
			}
			this.addAttributeValue(entry, attName + attSuffix, doubleVal);
			if (typeof currency !== "undefined" && typeof currency.isoCode !== "undefined") {
				this.addAttributeValue(entry, attName + attSuffix + "_currency",
					currency.isoCode);
			}
		},
		nl : function(pad) {
			if (this.state.isDebug()) {
				return "\n                                            ".substring(0,
					(pad * 4) + 1);
			} else {
				return "";
			}
		},
		toJsonString : function(obj) {
			return this.json.toJsonString(obj);
		},
		makeEnumJson : function(enumVal) {
			var json = new java.lang.StringBuffer();
			json.append(this.nl(6) + '{"index" : ' + enumVal.index + ',' + this.nl(6) +
				'"hidden" : ' + enumVal.hidden + ',' + this.nl(6) + '"id" : "' +
				enumVal.id + '",' + this.nl(6) + '"name" : "' + enumVal.name + '",' +
				this.nl(6) + '"localizedLabel" : "' + enumVal.localizedLabel + '"}');
			return json.toString();
		},
		makeCurrencyJson : function(field, prop) {
			var json = new java.lang.StringBuffer();
			// The baseCurrency and localCurrency properties contain properties of
			// their own; special handling is performed here
			if (prop == "baseCurrency" || prop == "localCurrency") {
				var thisField = field[prop];
				json.append('"' + prop + '" :' + this.nl(6) + '{"isoCode" : "' +
					thisField.isoCode + '",' + this.nl(6) + '"name" : "' +
					thisField.name + '",' + this.nl(6) + '"symbol" : "' +
					thisField.symbol + '",' + this.nl(6) + '"precision" : ' +
					thisField.precision + ',' + this.nl(6) + '"isBaseCurrency" : ' +
					thisField.isBaseCurrency + ',' + this.nl(6) + '"isEnabled" : ' +
					thisField.isEnabled + ',' + this.nl(6) + '"id" : "' + thisField.id +
					'"}');
				return json.toString();
			} else {
				// Ensure that the localAmount has a localCurrency, which is
				// required for setting or updating a currency amount in OP. It
				// gets added here automatically since the currency field definition
				// does not specify any metadata for the ISO code.
				var isoCode = this.feedProps.currencyIsoCodes.get(field.id);
				if (prop == "localAmount" && isoCode !== null) {
					json.append('"' + prop + '" : ' + field[prop] + ',' + this.nl(4) +
						'"localCurrency" : ' + this.nl(6) + '{"isoCode" : "' + isoCode +
						'"},');
					return json.toString();
				} else {
					// all other currency properties are 'simple'
					return '"' + prop + '" : ' + field[prop];
				}
			}
		},
		makeValueJson : function(field, prop) {
			var json = new java.lang.StringBuffer();
			var thisField = field[prop];
			if ("MULTI_VALUE_ENUM".equals(field.dataType)) {
				json.append(this.nl(4) + '"multiEnumValue" : {' + this.nl(5) + '"enumValue" : [');
				for (var i = 0; i < thisField.length; i++) {
					if (i > 0) {
						json.append(",");
					}
					json.append(this.makeEnumJson(thisField[i]));
				}
				json.append(this.nl(5) + "]" + this.nl(4) + "}");
			} else if ("ENUM_TYPE".equals(field.dataType)) {
				json.append(this.nl(4) + '"enumValue" : ' + this.makeEnumJson(thisField));
			} else if ("CURRENCY_TYPE".equals(field.dataType)) {
				json.append(this.nl(4) + this.makeCurrencyJson(field, prop));
			} else {
				json.append(this.nl(4) + '"value" : ' + toJson(thisField));
			}
			return json.toString();
		},
		isJsonFieldPropIncluded : function(prop) {
			return ! "dataType".equals(prop) &&
				!"hasChanged".equals(prop) &&
				!"id".equals(prop) &&
				!"name".equals(prop);
		},
		formatJsonFieldStart : function(field) {
			return this.nl(3) +
				"{" +
				this.nl(4) +
				'"dataType" : "' +
				field.dataType +
				'",' +
				this.nl(4) +
				'"id" : "' +
				field.id +
				'",' +
				this.nl(4) +
				'"name" : "' +
				field.name +
				'",';
		},
		makeFieldJson : function(field) {
			var json = new java.lang.StringBuffer();
			json.append(this.formatJsonFieldStart(field));
			var started = false;
			for (var prop in field) {
				if (this.isJsonFieldPropIncluded(prop)) {
					if (! started) {started = true;} else {json.append(",");}
					json.append(this.makeValueJson(field, prop));
				}
			}
			json.append(this.nl(3) + "}");
			return json.toString();
		},
		makeFieldsJson : function(fields) {
			var json = new java.lang.StringBuffer();
			var started = false;
			for (var i = 0; i < fields.length; i++) {
				if (! started) {started = true;} else {json.append(",");}
				json.append(this.makeFieldJson(fields[i]));
			}
			return json.toString();
		},
		makeJson : function(jobj) {
			var json = new java.lang.StringBuffer("{");
			for (var prop in jobj) {
				if (typeof jobj[prop] !== "object") {
					json.append(this.nl(1) + '"' + prop + '" : ' + toJson(jobj[prop]) + ',');
				}
			}
			json.append(this.nl(1) + '"fields" : { ' + this.nl(2) + '"field" : [');
			json.append(this.makeFieldsJson(this.getResultObjectFields(jobj)));
			json.append(this.nl(2) + "]" + this.nl(1) + "}" + this.nl(0) + "}");
			return json.toString();
		}
	};
};
//noinspection JSAnnotator
return OpenPagesApiClient;]]></parameter>
        </Script>
        <Script name="OPResultSet">
            <ModTime>1597750895773</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[//////////////////////////////////////////////////////////////////////////////
//
//  Licensed Materials - Property of IBM
//
//  5725-D51
//
//  (C) Copyright IBM Corporation 2017.  All Rights Reserved.
//
//  US Government Users Restricted Rights - Use, duplication or
//  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//
//////////////////////////////////////////////////////////////////////////////
var OPResultSet = function() {
    return {
        set : null,
        index : 0,
        nextUrl : null,
        objectType : null,
        client : null,
        initialize : function(args) {
            this.set = [];
            this.client = args.client;
            return this;
        },
        add : function(jobj) {
            this.set.push(jobj);
        },
        size : function() {
            return this.set.length;
        },
        clear : function() {
            this.set = [];
            this.index = 0;
        },
        hasNext : function() {
            return (this.set !== null && (this.index < this.set.length || this.nextUrl !== null));
        },
        next : function() {
            if (! this.set) {
                return null;
            } else {
                // if no results AND no next link, end of list
                if (this.index >= this.set.length && this.nextUrl === null) {
                    return null;
                }
                // else if no results but have next link, get result set
                else if (this.index >= this.set.length && this.nextUrl !== null) {
                    this.getResultSet({
                        url : "/" + this.nextUrl
                    });
                }
                // return next entry
                return this.client.grcObjectToEntry(this.set[this.index++]);
            }
        },
        getResultSet : function(args) {
            var verb = args.verb || "GET";  // HTTP method, e.g. GET, POST, PUT, ...
            var url = args.url || "";       // url for the request. May be partial (only the
            // path & query string params)
            // var body = args.body;           // HTTP body to be passed for the request
            var ctype = args.ctype || "application/json;charset=utf-8"; // Content-Type of the HTTP body
            var where = args.where || "";   // where this method is called from - for
            // debugging purposes
            var reply = null;
            this.clear();
            if (this.client.state.isDebug())
                this.client.logmsg("DEBUG", "Issuing " + verb + " request to URL: " + url);
            try {
                reply = this.client.makeRequest({
                    verb : verb,
                    url : url,
                    ctype : ctype,
                    where : where + "resultSet.getResultSet"
                });
            } catch (ex) {
                reply = null;
                this.client.logmsg(
                    "WARN",
                    "Exception occurred while processing result set from REST request to OpenPages; continuing...");
                if (this.client.state.isDebug())
                    this.client.logmsg("DEBUG", "Exception occurred; details:\n" + ex);
            }
            if (reply !== null) {
                var i;
                if (typeof reply.rows !== "undefined") {
                    var rows = reply.rows;
                    for (i = 0; i < rows.length; i++) {
                        this.add(rows[i]);
                    }
                } else {
                    this.add(reply);
                }
                // check for next link
                if (typeof reply.links !== "undefined") {
                    this.nextUrl = null;
                    for (i = 0; i < reply.links.length; i++) {
                        if (reply.links[i].rel == "next") {
                            this.nextUrl = reply.links[i].href;
                        }
                    }
                }
            }
        }
    };
};
//noinspection JSAnnotator
return OPResultSet;]]></parameter>
        </Script>
        <Script name="OPResourcePathParser">
            <ModTime>1597750959987</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[//////////////////////////////////////////////////////////////////////////////
//
//  Licensed Materials - Property of IBM
//
//  5725-D51
//
//  (C) Copyright IBM Corporation 2017.  All Rights Reserved.
//
//  US Government Users Restricted Rights - Use, duplication or
//  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//
//////////////////////////////////////////////////////////////////////////////
var OPResourcePathParser = function() {
    var globalSubstPattern = new RegExp("^\\$\\{(.+)\\}$");
    return {
        env : null,
        init : function(args) {
            if (args.env) {
                this.env = args.env;
            }
        },
        parsePath : function(path) {
            var parts = path.splitPolyfilled(/(\$\{.+\})/);
            var newPath = null;
            for (var i=0; i < parts.length; i++) {
                var part = parts[i];
                if (part && part.prototype === [].prototype && part.length > 0) {
                    //
                    // There is a bug in the String.splitPolyfilled function where the value can be assigned as
                    // an array of 1.  Extract the first array element until the problem can be fixed.  This checks
                    // here should prevent any runtime errors from occurring if the issue is fixed
                    //
                    part = part[0];
                }
                if (! newPath) {
                    newPath = "";
                }
                
                newPath += this.substituteWorkValue(part);
            }
            return newPath ? newPath : path;
        },
        substituteWorkValue : function(value) {
            if (typeof value === "undefined" || value === null) {
                return value;
            }
            //
            // Is the value a candidate for global substition?
            //
            var subMatch = globalSubstPattern.exec(value);
            if (! subMatch || ! subMatch.length > 1) {
                return value;
            }
            //
            // Get the variable name inside the brackets
            //
            value = subMatch[1];
            if (! value) {
                return value;
            }
            var parts = value.split("=");
            value = parts[0];
            if (this.env && this.env["get"] && typeof this.env["get"] === "function") {
                var subbedValue = this.env.get(value);
                if (typeof subbedValue !== "undefined") {
                    return subbedValue;
                }
            }
            return parts.length > 1 ? parts[1] : null;
        }
    }
};]]></parameter>
        </Script>
        <Script name="OPQueryParser">
            <ModTime>1597750988091</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[//////////////////////////////////////////////////////////////////////////////
//
//  Licensed Materials - Property of IBM
//
//  5725-D51
//
//  (C) Copyright IBM Corporation 2017.  All Rights Reserved.
//
//  US Government Users Restricted Rights - Use, duplication or
//  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//
//////////////////////////////////////////////////////////////////////////////
var OPQueryParser = function () {
    /**
     * Parses an OpenPages GRC API query for the purposes of:
     *      1) Validation in a TDI connector
     *      2) Substitution of TDI environment work variables specified in the query.
     *          - If any part of the query is wrapped in ${ and }, the part inside the braces is substituted
     *            with the value of that work parameter.
     *              - example: in the query: select * from [${parentObject}], and in the work environment there is
     *                         a value of "Mandate" in work.parentObject, the query becomes:
     *                              select * from [Mandate]
     *
     * Usage (where api is an instance of OpenPagesApiClient:
     *      var parser = new OPQueryParser();
     *      var results = parser.parseQuery(someQueryString);
     *      api.executeGrcObjectQuery(results.getQueryPath());
     *
     * Regular expressions for each part of an OpenPages API query.
     *
     * The query is in the format of:
     * select <* or field list> from <grc object name> where <grc field name> <comparison operation> <grc field value>
     * <* or field list>
     *      * - indicates all fields from the matching object or objects
     *      field list - one or more field names surrounded by brackets, comma delimeted if there are more than one
     *          examples:
     *              [ID] - a single field called ID, where ID is a valid field within the grc object specified in the query
     *              [ID], [Name] - two fields, ID and Name, both valid within the grc object specified
     * <grc object name>
     *      a grc object type name, such as "Mandate", "Submandate", "Requirement", "SoxBusEntity", etc, surrounded with brackets
     *          example: [Mandate]
     * <grc field name>
     *      a field from the grc object the value of which needs to match the value being used in the where clause, surrounded by brackets.
     *      same formatting rules as the field list above, but there is one one.
     * <comparsion operation>
     *      how the field compares to the value being queried.  values are =, <, >, <=, >, >= and !=.
     * <grc field value>
     *      an actual value to compare.  if a string value, surround with single quotes.
     *
     * The where clause is optional.
     * The key words of select, from and where are case-insensitive, but all letters must be of the same casing (all upper or all lower)
     *
     * Valid query syntax:
     *      1) select [Resource ID] from [Mandate] where [UCF-Mand:UCFID] = '0002794'
     *      2) SELECT * FROM [Submandate]
     *      3) select [Name], [Description] from [SoxBusEntity] where [ID] = 12345
     *
     *  Parser doesn't support compound where clauses yet.
     */
    var selectPart = "\\s*(select|SELECT)";     // the select statement, disregarding preceding white space
    var columnsPart = "\\s+(.+)";               // the columns being queried taken entirely until the "from" section, parsed seperately
    var fromPart = "\\s+(from|FROM)";           // the from statement (enforce at least one whitespace character before)
    var grcObjectPart = "\\s+(?:\\[(.+)\\])";   // the grc object being queried, surrounded by brackets (enforce at least one whitespace character before)
    var wherePart = "\\s+(where|WHERE)";        // the where statement (enforce at least one whitespace character before)
    var fieldsPart = "(?:\\s+\\[(.+)\\])";      // the field name in the where clause, one whitespace before, value surrounded by brackets
    var operation = "\\s*(=|<|<=|>|>=|!=)";     // the compare operator in the where clause
    var valuesPart = "\\s*(.*)\\s*";            // the field value in the where clause
    var whereClause = "(?:" + wherePart + fieldsPart + operation + valuesPart + ")?";
    var joinClause = "(?:" + "\\sjoin \\[SOXRisk\\] on PARENT\\(\\[SOXAccount\\]\\)" + ")?";
    
//    var queryExpr = new RegExp(
//        "^" +
//        selectPart +
//        columnsPart +
//        fromPart +
//        grcObjectPart +
//        joinClause +
//        whereClause +
//        "$"
//    );
 		
 	var queryExpr = new RegExp(
 		".*"
 	);
    var fieldBracketsPattern = new RegExp("\\[(.+)]");
    var OPQueryMeta = function () {
        return {
            selectColumns: null,
            targetObject: null,
            whereFieldName: null,
            compareOperation: null,
            whereFieldValue: null,
            joinFieldValue: null,
            whereFieldValueQuoted: false,
            env: null,
            init: function (args) {
                if (args.env) {
                    this.env = args.env;
                }
            },
            getQueryPath: function () {
                return "select " +
                    this.getSelectColumnsQueryString() +
                    " from [" + this.targetObject + "]" +
//                    ( this.joinFieldValue ? this.joinFieldValue : "" 
//                    ) +
					" join [SOXRisk] on PARENT([SOXAccount])" +
                    (   this.whereFieldName ?
                        " where [" + this.whereFieldName + "] " + this.compareOperation + " " +
                        (this.whereFieldValueQuoted ? "'" + this.whereFieldValue + "'" : this.whereFieldValue) :
                            ""
                    );
            },
            getSelectColumnsQueryString: function () {
                if (this.selectColumns === "*") {
                    return "*";
                } else {
                    return this.selectColumns.map(function (column) {
                        return "[" + column + "]";
                    }).join(", ");
                }
            },
            setSelectColumns: function (columns) {
                if (!columns || columns === "*") {
                    this.selectColumns = "*";
                } else {
                    this.selectColumns = this.substituteWorkValues(columns);
                }
            },
            setTargetObject: function (targetObject) {
                this.targetObject = this.substituteWorkValue(targetObject);
            },
            setWhereFieldName: function (fieldName) {
                this.whereFieldName = this.substituteWorkValue(fieldName);
            },
            setCompareOperation: function (operation) {
                this.compareOperation = operation;
            },
            setWhereFieldValue: function (fieldValue) {
                this.whereFieldValue = this.substituteWorkValue(fieldValue);
            },
            
             setJoinFieldValue: function (fieldValue) {
                this.joinFieldValue = this.substituteWorkValue(fieldValue);
            },
            substituteWorkValues: function (values) {
                var that = this;
                return values.map(function (value) {
                    return that.substituteWorkValue(value);
                })
            },
            /**
             * Check to see if the value is wrapped in ${ and }.
             * If so, extract that value, which is to be used as key for the intended value from the work environment.
             *
             * But wait!  There's more.
             *
             * If the value key pair delineated by an equals sign, then to the right of the sign is the default
             * value to assign this variable if either the work environment doesn't exist or the environment doesn't
             * have a value for the specified variable.  This allows the connectors to work outside of an environment,
             * or when querying the connector schema where there is no work environment.
             *
             * @param value -   either plain value, where it is returned unchanged,
             *                  a key wrapped in ${ and }, as in these two examples:
             *                      ${workVariableName} - specifies that the value of this is acquired from work env variable named workVariableName
             *                      ${varName:Default Value} - specifies work var varName, but if not found, "Default Value" is returned instead
             * @returns {*}
             */
            substituteWorkValue: function (value) {
                if (!value || value.length == 0) {
                    return value;
                }
                var tokenIndex = value.indexOf("${");
                if (tokenIndex == -1) {
                    return value;
                }
                var valuePrefix = tokenIndex == 0 ? "" : value.substring(0, tokenIndex);
                var remainingValue = value.substring(tokenIndex + 2);
                if (!remainingValue || remainingValue.length === 0) {
                    return value;
                }
                tokenIndex = remainingValue.indexOf("}");
                if (tokenIndex == -1) {
                    return value;
                }
                var substitutionToken = remainingValue.substring(0, tokenIndex);
                
                var subbedValue = this.env && this.env["get"] && typeof this.env["get"] === "function" ?
                    this.env.get(substitutionToken) : substitutionToken;
                remainingValue = remainingValue.substring(tokenIndex + 1);
                var newValue = valuePrefix + subbedValue;
                return remainingValue && remainingValue.length ?
                    newValue + this.substituteWorkValue(remainingValue) : newValue;
            }
        }
    };
    return {
        env: null,
        init: function (args) {
            if (args.env) {
                this.env = args.env;
            }
        },
        /**
         * Pass through convenience method for substitution of global variables
         * @param value the value to
         */
        substituteWorkValue: function (value) {
            return new OPQueryMeta({env: this.env}).substituteWorkValue(value);
        },
        parseQuery: function (query) {
        	
            var queryParts = queryExpr.exec(query);
            if (!queryParts || !queryParts.length) {
                throw "The query " + query + " cannot be parsed.";
            }
            var opQueryMeta = new OPQueryMeta();
            opQueryMeta.init({
                env: this.env
            });
            var columns = this.getQueryPartAfter("select", queryParts);
            var whereFieldName = this.getQueryPartAfter("where", queryParts);
            var compareOperation = this.getQueryPartAfter(whereFieldName, queryParts);
            opQueryMeta.setSelectColumns(this.parseColumns(columns));
            opQueryMeta.setTargetObject(this.getQueryPartAfter("from", queryParts));
            opQueryMeta.setWhereFieldName(whereFieldName);
            opQueryMeta.setCompareOperation(compareOperation);
            opQueryMeta.setWhereFieldValue(this.getQueryPartAfter(compareOperation, queryParts));
            return opQueryMeta;
        },
        getQueryPartAfter: function (queryPartValue, queryParts) {
            if (typeof queryPartValue === "undefined") {
                return;
            }
            var fromIndex = queryParts.indexOf(queryPartValue);
            if (fromIndex >= 0 && queryParts && queryParts.length > fromIndex + 1) {
                return queryParts[fromIndex + 1];
            }
        },
        parseColumns: function (columns) {
            if (!columns || columns.trim() === "*") {
                return "*";
            }
            var colsSplit = columns.split(",");
            if (colsSplit) {
                return colsSplit.map(function (fv) {
                    return fieldBracketsPattern.exec(fv.trim())[1];
                });
            }
        }
    }
};]]></parameter>
        </Script>
        <Script name="OPMailProvider">
            <ModTime>1597751044920</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[//////////////////////////////////////////////////////////////////////////////
//
//  Licensed Materials - Property of IBM
//
//  5725-D51
//
//  (C) Copyright IBM Corporation 2017.  All Rights Reserved.
//
//  US Government Users Restricted Rights - Use, duplication or
//  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//
//////////////////////////////////////////////////////////////////////////////
var OPMailProvider = function () {
    return {
        mailSubject : "(Do Not Reply) OpenPages Connector error ",
        notificationsSent : null,
        mailFrom : null,
        hostname : null,
        smtpHost : null,
        smtpPort : 25,
        mailTo : null,
        client : null,
        initialize : function (args) {
            this.client = args.client;
            this.hostname = java.net.InetAddress.getLocalHost().getHostName();
            // Process the SMTP/mail properties
            this.mailFrom = "TDI-Administrator-on-" + this.hostname + "@" + this.hostname;
            this.notificationsSent = new java.util.HashSet();
            this.smtpHost = this.smtpHost || "";
            this.smtpPort = this.smtpPort || 25;
            this.mailTo = this.mailTo || "";
            // Disable mail notifications if important mailing properties were not
            // specified
            if (this.smtpHost === "" || this.mailTo === "") {
                this.smtpHost = "";
            }
            if (this.smtpHost && this.smtpHost !== "" && this.mailTo && this.mailTo !== "") {
                system.setJavaProperty("mail.smtp.host", this.smtpHost);
                system.setJavaProperty("mail.smtp.port", this.smtpPort);
                // TEST:
                // sendEmailNotification("This is a test email from the OP
                // Connector.");
            }
            return this;
        },
        sendEmailNotification : function (error) {
            var didSend = false;
            var alreadySent = this.notificationsSent.contains(error);
            if (this.smtpHost !== "" && ! alreadySent) {
                didSend = system.sendMail(this.mailFrom, this.mailTo, this.mailSubject,
                    "Additional instances of this error will not be reported via email for the " +
                    "current scheduled run.\n\nReported Issue:\n\n" + error, null);
                // remember this error to avoid mailing duplicates for this assembly
                // line run
                this.notificationsSent.add(error);
                java.lang.Thread.sleep(100); // avoids overwhelming the SMTP server
                if (didSend !== null) {
                    this.client.logmsg("WARN",
                        "Attempt to send email was not successful for message [" +
                        error +
                        "]\n\tReason: " +
                        didSend);
                }
            }
        }
    };
};]]></parameter>
        </Script>
        <Script name="OPConnectionProperties">
            <ModTime>1597751071692</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[//////////////////////////////////////////////////////////////////////////////
//
//  Licensed Materials - Property of IBM
//
//  5725-D51
//
//  (C) Copyright IBM Corporation 2017.  All Rights Reserved.
//
//  US Government Users Restricted Rights - Use, duplication or
//  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//
//////////////////////////////////////////////////////////////////////////////
var OPConnectionProperties = function() {
    return {
        root : "/grc/api",
        url : "",
        username : "",
        password : "",
        object : null,
        query : null,
        parentType : "", // from connector.properties file for deriving defaultPrimaryParentObjectId only
        parentLoc : "", // from connector.properties file for deriving defaultPrimaryParentObjectId only
        deBug : false,
        initialize : function(args) {
            // If there are no arguments, the refresh from the connector.
            if (! args) {
                this.refresh();
            } else {
                for (var argName in args) {
                    this[argName] = args[argName];
                }
            }
            return this;
        },
        iterateFields : function(callback) {
            var that = this;
            for (var fieldName in this) {
                if (typeof that[fieldName] !== "function") {
                    callback.call(that, fieldName, that[fieldName]);
                }
            }
        },
        
        /**
         * Refresh internal settings to connector-supplied initial values.
         * Note that the variable "connector" is supplied into context
         * by TDI and is not initialized anywhere that can be found in this
         * script source.
         */
        refresh : function () {
            var that = this;
            this.iterateFields(function(fieldName) {
                var connectorValue = connector.getParam(fieldName);
                if (connectorValue !== null) {
                    that[fieldName] = connectorValue;
                }
            });
        }
    };
};]]></parameter>
        </Script>
        <Script name="OPClientState">
            <ModTime>1597751391480</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[//////////////////////////////////////////////////////////////////////////////
//
//  Licensed Materials - Property of IBM
//
//  5725-D51
//
//  (C) Copyright IBM Corporation 2017.  All Rights Reserved.
//
//  US Government Users Restricted Rights - Use, duplication or
//  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//
//////////////////////////////////////////////////////////////////////////////
var OPClientState = function () {
    return {
        grcObjectType : "",
        grcObjectTypeId : null,
        schema : null,
        defaultPrimaryParentObjectId : null, // derived from op_parentType, op_parentLoc props in connector.properties
        current : null,
        validPrimaryParentIds : null,
        invalidPrimaryParentIds : null,
        connectionProperties : null,
        client : null,
        mailer : null,
        feedProps : null,
        http : null,
        //
        // Resource caches that are loaded via query to OpenPages
        //
        fieldDefinitions : null,
        templates : null,
        typesById : null,
        typesByName : null,
        typeDetailsByName : null,
        contentsCache : null,
        defaultCurrencyIsoCode : null,
        largeStringMaxSize : null,
        //
        // Properties shared across all members of an assembly line (instance of java.lang.System.getProperties()).
        // This will be used to cache results of OP queries that will not change over the lifetime of the
        // assembly line, such as type and field definitions, preventing unnecessary reloading of common data.
        //
        properties : null,
        initialize : function (args) {
            this.client = args.client;
            this.mailer = this.client.mailer;
            this.feedProps = this.client.feedProps;
            this.http = this.client.http;
            this.properties = java.lang.System.getProperties();
            this.connectionProperties = new OPConnectionProperties().initialize(args.opConnectSettings);
            this.applyHttpSettings();
            this.initializeHttpParameters();
            // this.initializeOPServerConnection();
            return this;
        },
        /**
         * Set http parameters into the http connector in preparation for
         * sending a request to OpenPages.
         */
        applyHttpSettings : function () {
            var that = this;
            this.connectionProperties.iterateFields(function(fieldName, fieldValue) {
                that.http.setParam(fieldName, fieldValue);
            });
//            if (this.connectionProperties.object) {
//                this.setGrcObjectType(this.connectionProperties.object);
//            }
//			TODO fix hard coding of object
			this.setGrcObjectType(this.connectionProperties.object);
			
            if (this.isDebug())
                this.connectionProperties.deBug = false;
        },
        initializeHttpParameters : function() {
            var cxn = this.connectionProperties;
            // verify required properties are at least present from processing
            // properties files
            if (cxn.url === null || cxn.url === "" || cxn.url.endsWith("/")) {
                this.client.throwException("Required property op_url must be set to a valid URL (with no trailing '/' character).");
                return null;
            }
            if (cxn.username === null || cxn.username === "") {
                this.client.throwException("Required property op_username must be set to a valid OpenPages login user name.");
                return null;
            }
            if (cxn.password === null || cxn.password === "") {
                this.client.throwException("Required property op_conn_password must be set to the password for the specified OpenPages login (op_username) property.");
                return null;
            }
            // if (cxn.object === null || cxn.object === "") {
            //     this.client.throwException("Required property op_object must be set to a valid OpenPages object type.");
            //     return null;
            // }
            // Ensure that if the API root was not specified that the default is
            // used
            if (! cxn.root || cxn.root === "null" || cxn.root === "") {
                cxn.root = "/grc/api";
            }
            if (! cxn.url.endsWith(cxn.root)) {
                cxn.url += this.fixPath(cxn.root);
            }
        },
        initializeOPServerConnection : function() {
            var cxn = this.connectionProperties;
            var obj = cxn.object;
            cxn.objectId = null;
            if (obj !== null && typeof obj != 'undefined') {
                var thisType = this.getTypeByName(obj);
                if (thisType !== null) {
                    cxn.objectId = thisType.id;
                }
            }
            // Process the parent type and the parent location properties from the
            // properties file
            // to establish the default primary parent to use when the feed does not
            // provide a
            // static or dynamically derived primaryParentId
            this.validPrimaryParentIds = new java.util.HashSet();
            this.invalidPrimaryParentIds = new java.util.HashSet();
            // Obtain the default currency ISO code to use in case the feed does not
            // provide one
            // when a currency amount is included.
            this.defaultCurrencyIsoCode = this.getDefaultCurrencyIsoCode();
            // Obtain the registry setting for the Large String's maximum value
            this.largeStringMaxSize = this.getLargeStringMaxValue();
            // log the property values obtained from the various properties file(s)
            if (this.isDebug()) {
                this.client.logmsg("INFO",
                    "The OpenPages Connector configuration properties used for this instance are:" +
                    "\n\tURL (op_url):                          " +
                    cxn.url +
                    "\n\tUser Id (op_username):                 " +
                    cxn.username +
                    "\n\tGRC Object (op_object):                " +
                    cxn.object +
                    "\n\tQuery (op_query):                      " +
                    cxn.query +
                    "\n\tParent Object Type (op_parentType):    " +
                    cxn.parentType +
                    "\n\tParent Object Location (op_parentLoc): " +
                    cxn.parentLoc +
                    "\n\tDebug log (op_deBug):                  " +
                    cxn.deBug +
                    "\n\tURI Root (op_root):                    " +
                    cxn.root +
                    "\n\tSMTP Host (smtpHost):                  " +
                    this.mailer.smtpHost +
                    "\n\tSMTP Port (smtpPort):                  " +
                    this.mailer.smtpPort +
                    "\n\tMail To (mailTo):                      " +
                    this.mailer.mailTo + "\n");
            }
        },
        getDefaultPrimaryParentObjectId : function() {
            if (! this.defaultPrimaryParentObjectId) {
                var msg;
                var cxn = this.connectionProperties;
                if (this.getParentObjectType(cxn.parentType) !== null) {
                    this.defaultPrimaryParentObjectId = this.getParentObjectIdFromTypeAndLoc(cxn.parentType, this.parentLoc);
                    if (this.defaultPrimaryParentObjectId === null) {
                        msg = "The Parent Object Location property (op_parentLoc='" +
                            cxn.parentLoc +
                            "') from the properties file is not valid. Verify that op_parentType '" +
                            cxn.parentType +
                            "' is a legitimate parent type for object '" +
                            cxn.object +
                            "' and that the specified parent location is correct.";
                        this.client.logmsg("WARN", msg);
                        this.mailer.sendEmailNotification(msg);
                    }
                } else {
                    msg = "The Parent Type property (op_parentType='" +
                        cxn.parentType +
                        "') from the properties file is not valid.";
                    this.client.logmsg("WARN", msg);
                    this.mailer.sendEmailNotification(msg);
                }
                if (this.defaultPrimaryParentObjectId === null) {
                    msg = "The default primaryParentId derived from the Parent Type property " +
                        "(op_parentType) and the Parent Location property (op_parentLoc) " +
                        "from the properties file is not valid. " +
                        "Unable to establish a default primaryParentId for this assembly line run.";
                    this.client.logmsg("WARN", msg);
                    this.mailer.sendEmailNotification(msg);
                }
            }
            return this.defaultPrimaryParentObjectId === "not_found" ? null : this.defaultPrimaryParentObjectId;
        },
        fixPath : function (path) {
            if (! path.startsWith("/")) {
                path = "/" + path;
            }
            return path;
        },
        setCurrent : function (entry) {
            this.current = entry;
        },
        getObjectType : function (entryOrType) {
            if (typeof entryOrType === "undefined") {
                entryOrType = this.grcObjectType;
            }
            var objectType = null;
            if (entryOrType instanceof com.ibm.di.entry.Entry) {
                var typeAttVal = entry.getString("$grcObjectType");
                if (typeAttVal !== null) {
                    objectType = typeAttVal;
                }
                if (objectType === null) {
                    typeAttVal = entry.getString("typeDefinitionId");
                    if (typeAttVal !== null) {
                        objectType = this.getTypeById(typeAttVal);
                    }
                }
            } else {
                objectType = String(entryOrType);
            }
            if (objectType === null || objectType.trim().length === 0) {
                objectType = this.grcObjectType;
            }
            return objectType;
        },
        getGrcObjectType : function() {
            return this.grcObjectType;
        },
        getGrcObjectTypeId : function() {
            return this.grcObjectTypeId;
        },
        setGrcObjectType : function(grcObjectType) {
            this.grcObjectType = grcObjectType;
        },
        setGrcObjectTypeId : function(grcObjectTypeId) {
            this.grcObjectTypeId = grcObjectTypeId;
        },
        getCachedTemplate : function(objectType) {
            var key = objectType.trim().toLowerCase();
            return this.templates.get(key) || this.properties.get("OP_TMPL_" + key);
        },
        setCachedTemplate : function(objectType, template) {
            var key = objectType.trim().toLowerCase();
            this.templates[key] = template;
            this.properties.put("OP_TMPL_" + key, template);
        },
        getTemplate : function (entryOrType) {
            var templateObj = null;
            if (this.templates === null) {
                this.templates = new java.util.concurrent.ConcurrentHashMap();
            }
            var objectType = this.getObjectType(entryOrType);
            var objectDef = this.getTypeByName(objectType);
            var objectId = objectDef.id;
            var template = this.getCachedTemplate(objectType);
            if (! template) {
                template = new java.util.concurrent.ConcurrentHashMap();
                if (this.isDebug())
                    this.client.logmsg("DEBUG", "Retrieving template for " + objectType);
                try {
                    templateObj = this.client.makeRequest({
                        url : "/contents/template?typeId=" + objectId,
                        where : "this.getTemplate"
                    });
                } catch (ex) {
                    templateObj = null;
                    if (this.isDebug())
                        this.client.logmsg("DEBUG", "Exception occurred; details:\n" + ex);
                }
                if (templateObj === null || templateObj.length === 0) {
                    this.client.throwException(this.message["No template found for GRC object type"] +
                        ": " + objectType);
                    return null;
                }
                var fds = templateObj.fields.field;
                for (var i = 0; fds !== null && i < fds.length; i++) {
                    var fd = fds[i];
                    template.put(fd.name.trim().toLowerCase(), fd);
                }
                template.put("$grcObjectType", objectType);
                this.setCachedTemplate(objectType, template);
            }
            return template;
        },
        getFieldDefinition : function (objectType, fieldName) {
            if (!fieldName) {
                fieldName = objectType;
                objectType = this.grcObjectType;
            }
            var fieldDefs = this.getFieldDefinitions(objectType);
            return fieldDefs.get(fieldName.toLowerCase().trim());
        },
        getFieldDefinitions : function (entryOrType) {
            var schema = null;
            if (! entryOrType) {
                entryOrType = this.grcObjectType;
            }
            var objectType = this.getObjectType(entryOrType);
            var fieldDefs = this.getCachedFieldDefinition(objectType);
            if (! fieldDefs) {
                fieldDefs = new java.util.concurrent.ConcurrentHashMap();
                if (this.isDebug()) {
                    this.client.logmsg("DEBUG", "Retrieving field definitions for " + objectType);
                }
                try {
                    schema = this.client.makeRequest({
                        url : "/types/" + objectType,
                        where : "this.getFieldDefinitions"
                    });
                } catch (ex) {
                    schema = null;
                    if (this.isDebug())
                        this.client.logmsg("DEBUG", "Exception occurred; details:\n" + ex);
                }
                if (! schema || ! schema.fieldDefinitions) {
                    this.client.throwException(this.client.message["No field definitions returned for GRC object type"] +
                        ": " +
                        objectType +
                        "  RESPONSE: " +
                        toJson(schema) +
                        ". A valid op_object must be specified; aborting assembly line run.");
                    return null;
                }
                var fds = schema.fieldDefinitions.fieldDefinition;
                for (var i = 0; fds !== null && i < fds.length; i++) {
                    var fd = fds[i];
                    fieldDefs.put(fd.name.trim().toLowerCase(), fd);
                }
                fieldDefs.put("$grcObjectType", objectType);
                this.setCachedFieldDefinition(objectType, fieldDefs);
            }
            return fieldDefs;
        },
        getCachedFieldDefinition : function(objectType) {
            if (! this.fieldDefinitions) {
                this.fieldDefinitions = new java.util.concurrent.ConcurrentHashMap();
                return null;
            }
            var key = objectType.trim().toLowerCase();
            var fieldDefs = this.fieldDefinitions.get(key);
            return fieldDefs || this.properties.get("OP_FIELDDEF_" + key);
        },
        setCachedFieldDefinition : function(objectType, fieldDef) {
            var key = objectType.trim().toLowerCase();
            this.fieldDefinitions.put(key, fieldDef);
            this.properties.put("OP_FIELDDEF_" + key, fieldDef);
        },
        getTypeById : function (id) {
            var ids = this.getTypesById(id);
            return ids.get(id);
        },
        getTypeByName : function (type) {
           if(type == null || typeof type == "undefined")
           {
           	return null;
           }
            var types = this.getTypesByName(type);
            return types.get(type);
        },
        getTypesByName : function () {
            if (this.typesByName) {
                return this.typesByName;
            }
            this.getTypesById();
            return this.typesByName;
        },
        getCachedTypes : function() {
            if (! this.typesById) {
                this.typesById = this.properties.get("OPTypesByID");
                if (this.typesById) {
                    this.typesByName = this.properties.get("OPTypesByName");
                }
            }
            return this.typesById;
        },
        setCachedTypes : function(typesById, typesByName) {
            this.typesById = typesById;
            this.typesByName = typesByName;
            this.properties.put("OPTypesByID", typesById);
            this.properties.put("OPTypesByName", typesByName);
        },
        getTypeContents : function(typeId) {
            if (! this.contentsCache) {
                this.contentsCache = this.properties.get("OPContentsCache");
                if (! this.contentsCache) {
                    this.contentsCache = new java.util.concurrent.ConcurrentHashMap();
                    this.properties.put("OPContentsCache", this.contentsCache);
                }
            }
            var typeContents = this.contentsCache.get(typeId);
            if (typeContents) {
                return typeContents;
            }
            typeContents = this.client.getTypeContents(typeId);
            if (typeContents) {
                this.contentsCache.put(typeId, typeContents);
            }
            return typeContents;
        },
        getTypesById : function () {
            var reply = null;
            if (this.getCachedTypes()) {
                return this.typesById;
            }
            var typesById = new java.util.concurrent.ConcurrentHashMap();
            var typesByName = new java.util.concurrent.ConcurrentHashMap();
            try {
                reply = this.client.makeRequest({
                    "verb" : "GET",
                    "url" : "/types",
                    "ctype" : "application/json",
                    "where" : "OPClientState.getTypesById"
                });
            } catch (ex) {
                reply = null;
                if (this.isDebug())
                    this.client.logmsg("DEBUG", "Exception occurred; details:\n" + ex);
            }
            if (reply === null || typeof reply.length === "undefined" ||
                typeof reply.length == 0) {
                this.client.throwException(this.client.message["No types returned by OpenPages"] +
                    " RESPONSE: - " +
                    toJson(reply) +
                    ".\nEnsure that the OpenPages server is running and that the op_url, op_root, " +
                    "op_username and op_conn_password properties are valid.");
            }
            for (var i = 0; i < reply.length; i++) {
                typesById.put(reply[i].id, reply[i]);
                typesByName.put(reply[i].name, reply[i]);
            }
            this.setCachedTypes(typesById, typesByName);
            return this.typesById;
        },
        getCachedObjectDetails : function(objectType) {
            return this.typeDetailsByName && this.typeDetailsByName.get(objectType);
        },
        setCachedObjectDetails : function(objectType, details) {
            if (! this.typeDetailsByName) {
                this.typeDetailsByName = new java.util.concurrent.ConcurrentHashMap();
            }
            this.typeDetailsByName.put(objectType, details);
        },
        //
        // Perform a lookup of the specified parent object type to verify that it
        // exists.
        // Return the parent object type (as JSON), or null if the type does not
        // exist.
        //
        // @param - ptype - The parent object type name, eg "Submandate", "Mandate", "Requirement"
        //
        getParentObjectType : function (ptype) {
            if (! ptype || ptype === "") {
                this.client.logmsg("INFO", "No value specified for parent object type.");
                return null;
            }
            ptype = ptype.trim();
            var parentObjectTypeAsJson = this.getCachedObjectDetails(ptype);
            if (parentObjectTypeAsJson) {
                return parentObjectTypeAsJson;
            }
            if (this.isDebug())
                this.client.logmsg("DEBUG", "Retrieving definition for parent object type " + ptype);
            try {
                var reply = this.client.makeRequest({
                    url : "/types/" + ptype,
                    where : "this.getParentObjectType"
                });
                if (reply && reply.fieldDefinitions) {
                    parentObjectTypeAsJson = toJson(reply);
                    this.setCachedObjectDetails(ptype, parentObjectTypeAsJson);
                }
            } catch (ex) {
                this.client.logmsg("WARN",
                    "Non-fatal exception occurred while retrieving parent object type '" +
                    ptype +
                    "'; details:\n" +
                    ex);
            }
            return parentObjectTypeAsJson;
        },
        // Given the parent type, perform a lookup to verify that it exists. Return the
        // parent object Id, or null if it does not exist. This method assumes that the
        // ptype parameter has been validated by the getParentType() function.
        getParentObjectIdFromTypeAndLoc : function (ptype, ploc) {
            var reply = null;
            var parentObjectId = null;
            if (!ptype || ptype === "") {
                this.client.logmsg("INFO", "No value specified for parent object type.");
                return null;
            }
            if (!ploc || ploc === "") {
                this.client.logmsg("INFO", "No value specified for parent object location.");
                return null;
            }
            ptype = ptype.trim();
            ploc = ploc.trim();
            ploc = this.fixPath(ploc); // ensures that the location starts with a
            // '/'
            // Search for the parent object instance of the given ptype at the
            // specified location.
            // There should be one and only one match if the provided location is
            // correct.
            var queryUrl = "query?q=SELECT * FROM [" + ptype + "] WHERE [Location] LIKE '" + ploc + "'";
            if (this.isDebug())
                this.client.logmsg("DEBUG", "Retrieving parent object with relative location: " + ploc);
            try {
                reply = this.client.makeRequest({
                    url : queryUrl,
                    where : "this.getParentObjectIdFromTypeAndLoc"
                });
                if (reply !== null && typeof reply.rows !== "undefined" && reply.rows.length === 1) {
                    if (this.isPrimaryParentIdValid(reply.rows[0].fields.field[0].value)) {
                        parentObjectId = reply.rows[0].fields.field[0].value;
                    }
                }
            } catch (ex) {
                if (this.isDebug())
                    this.client.logmsg("DEBUG", "Exception occurred; details:\n" + ex);
            }
            return parentObjectId;
        },
        isPrimaryParentIdValid : function(id) {
            var isValid = false;
            var typeDefnId = null;
            if (this.isDebug()) {
                this.client.logDebug("Verifying that the specified parent id is valid: " + id);
            }
            if (! id || id === "" || this.isInvalidPrimaryParentId(id)) {
                return false;
            }
            if (this.isValidPrimaryParentId(id)) {
                return true;
            }
            try {
                system.toInt(id);
            } catch (e) {
                this.addInvalidPrimaryParentId(id);
                return false;
            }
            // The specified id is not yet known to the connector; try getting it to
            // ensure it exists
            var typeContents = this.getTypeContents(id);
            if (typeContents && typeof typeContents.id !== "undefined" && typeContents.id === id) {
                typeDefnId = typeContents.id;
                var objectParentAssociations = this.client.getObjectParentAssociations(this.getGrcObjectType());
                if (! objectParentAssociations || ! objectParentAssociations.length) {
                    isValid = false;
                } else {
                    // The entry with the matching id must have a relationship of "Parent"
                    for (var i = 0; i < objectParentAssociations.length; i++) {
                        var parentAssoc = objectParentAssociations[i];
                        if (parentAssoc.id === typeDefnId && parentAssoc.relationship.trim().toLowerCase() === "parent") {
                            isValid = true;
                            break;
                        }
                    }
                }
            }
            if (isValid) {
                this.addValidPrimaryParentId(id);
            } else {
                this.addInvalidPrimaryParentId(id);
            }
            return isValid;
        },
        getDefaultCurrencyIsoCode : function () {
            if (this.defaultCurrencyIsoCode) {
                return this.defaultCurrencyIsoCode;
            }
            var isoCode = this.properties.get("OPDefaultCurrencyIsoCode");
            if (isoCode) {
                this.defaultCurrencyIsoCode = isoCode;
                return isoCode;
            }
            var reply = null;
            isoCode = "USD";
            if (this.isDebug())
                this.client.logmsg("DEBUG", "Retrieving default (base) currency ISO code...");
            try {
                reply = this.client.makeRequest({
                    url : "/configuration/currencies/base",
                    where : "this.getDefaultCurrencyIsoCode"
                });
                if (reply !== null && reply.isoCode !== null) {
                    isoCode = reply.isoCode;
                }
            } catch (ex) {
                this.client.logmsg("WARN",
                    "Non-fatal exception occurred while retrieving base currency ISO code;" +
                    " using 'USD'. Exception details:\n" + ex);
            }
            this.defaultCurrencyIsoCode = isoCode;
            this.properties.put("OPDefaultCurrencyIsoCode", isoCode);
            return isoCode;
        },
        getLargeStringMaxValue : function () {
            if (this.largeStringMaxSize) {
                return this.largeStringMaxSize;
            }
            var largeStringMaxSize = this.properties.get("OPLargeStringMaxSize");
            if (largeStringMaxSize) {
                this.largeStringMaxSize = largeStringMaxSize;
                return largeStringMaxSize;
            }
            var reply = null;
            var doubleVal = 256000;
            if (this.isDebug()) {
                this.client.logmsg("DEBUG",
                    "Retrieving Large Text maximum value from OP registry...");
            }
            // do a GET of this:
            // "configuration/settings/%2FOpenPages%2FPlatform%2FRepository%2FResource%2FLarge
            // Text%2FMaximum Size"
            try {
                reply = this.client.makeRequest({
                    url : "configuration/settings/%2FOpenPages%2FPlatform%2FRepository%2FResource%2FLarge Text%2FMaximum Size",
                    where : "this.getLargeStringMaxValue"
                });
                if (reply !== null && reply.value !== null) {
                    largeStringMaxSize = reply.value;
                    try {
                        doubleVal = java.lang.Double.parseDouble(largeStringMaxSize);
                    } catch (ex) {
                        this.client.logmsg(
                            "WARN",
                            "Unable to convert Large String Maximum Value of (" +
                            largeStringMaxSize +
                            ") into a number; using hard-coded value of 256000.");
                        doubleVal = 256000;
                    }
                } else {
                    this.client.logmsg(
                        "WARN",
                        "No response on attempt to retrieve Large String Maximum Value registry setting;" +
                        " using hard-coded value of 256000.");
                }
            } catch (ex) {
                this.client.logmsg(
                    "WARN",
                    "Non-fatal exception occurred while retrieving Large String Maximum Value registry setting;" +
                    " using hard-coded value of 256000. Exception details:\n" +
                    ex);
            }
            this.largeStringMaxSize = doubleVal;
            this.properties.put("OPLargeStringMaxSize", doubleVal);
            return doubleVal;
        },
        isDebug : function() {
            return this.connectionProperties.deBug;
        },
        addInvalidPrimaryParentId : function(parentId) {
            this.invalidPrimaryParentIds.add(parentId);
        },
        isInvalidPrimaryParentId : function(parentId) {
            return this.invalidPrimaryParentIds.contains(parentId);
        },
        isValidPrimaryParentId : function(parentId) {
            return this.validPrimaryParentIds.contains(parentId);
        },
        addValidPrimaryParentId : function(parentId) {
            this.validPrimaryParentIds.add(parentId);
        },
        hasQuery : function() {
            return this.connectionProperties.query && this.connectionProperties.query.length;
        },
        getQuery : function() {
            return this.connectionProperties.query;
        }
    };
};]]></parameter>
        </Script>
        <Script name="OPClientFeedProps">
            <ModTime>1597751422115</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[//////////////////////////////////////////////////////////////////////////////
//
//  Licensed Materials - Property of IBM
//
//  5725-D51
//
//  (C) Copyright IBM Corporation 2017.  All Rights Reserved.
//
//  US Government Users Restricted Rights - Use, duplication or
//  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//
//////////////////////////////////////////////////////////////////////////////
var OPClientFeedProps = function () {
    return {
        staticPrimaryParentId : null,
        parentType : null,
        parentLoc : null,
        derivedPrimaryParentId : null,
        // isoCode for each mapped CURRENCY_TYPE value per iteration
        currencyIsoCodes : null,
        mailer : null,
        client : null,
        initialize : function(args) {
            this.currencyIsoCodes = new java.util.concurrent.ConcurrentHashMap();
            this.client = args.client;
            this.mailer = this.client.mailer;
            return this;
        },
        clear : function () {
            this.staticPrimaryParentId = null;
            this.parentType = null;
            this.parentLoc = null;
            this.derivedPrimaryParentId = null;
            this.currencyIsoCodes.clear();
        },
        recoverPrimaryParentIdFromFeed : function (entry) {
            if (entry.primaryparentType && entry.primaryparentLocation) {
                this.parentType = entry.primaryparentType.getValue();
                this.parentLoc = entry.primaryparentLocation.getValue();
                if (this.parentType && this.parentType !== "" && this.parentLoc && this.parentLoc !== "") {
                    var parentObjectType = this.state.getParentObjectType(this.parentType);
                    if (parentObjectType) {
                        this.derivedPrimaryParentId =
                            this.client.state.getParentObjectIdFromTypeAndLoc(this.parentType, this.parentLoc);
                    }
                    if (this.derivedPrimaryParentId === null) {
                        var msg = "A primaryParentId could not be derived from the feed's parentType '" +
                            this.parentType +
                            "' and parentLocation '" +
                            this.parentLoc +
                            "' properties for this entry." +
                            "Verify that the parentType is a legitimate parent type for an object of type '" +
                            this.client.state.getGrcObjectType() +
                            "' and that the parentLocation is correct.";
                        this.client.logmsg("WARN", msg);
                        this.mailer.sendEmailNotification(msg);
                    }
                }
            }
        },
        obtainPrimaryParentIdFromFeed : function (entry) {
            var msg = "";
            var parentObjectType = null;
            if (entry && entry instanceof com.ibm.di.entry.Entry) {
                var currentWork = task && task.getCurrentWork();
                if (currentWork) {
                    if (currentWork.primaryParentId) {
                        entry.primaryParentId = currentWork.primaryParentId;
                    }
                    
                    if (currentWork.primaryParentTypeId) {
                        entry.primaryParentTypeId = currentWork.primaryParentTypeId;    
                    }
                }
                // First check if a valid primary parent id value was included in
                // the feed
                // if (entry.primaryParentId && this.client.state.isPrimaryParentIdValid(entry.primaryParentId.getValue())) {
                if (entry.primaryParentId) {
                    this.staticPrimaryParentId = entry.primaryParentId.getValue();
                }
                // Otherwise check if it can be derived from the feed's parentType
                // and parentLocation values
                else if (entry && entry.parentLocation) {
                    this.parentType = entry.parentType.getValue();
                    this.parentLoc = entry.parentLocation.getValue();
                    if (this.parentType && this.parentType !== "" &&
                        this.parentLoc && this.parentLoc !== "") {
                        parentObjectType = this.client.state.getParentObjectType(this.parentType);
                        if (parentObjectType !== null) {
                            this.derivedPrimaryParentId =
                                this.client.state.getParentObjectIdFromTypeAndLoc(this.parentType, this.parentLoc);
                        }
                        if (this.derivedPrimaryParentId === null) {
                            msg = "A primaryParentId could not be derived from the feed's parentType '" +
                                this.parentType +
                                "' and parentLocation '" +
                                this.parentLoc +
                                "' properties for this entry." +
                                "Verify that the parentType is a legitimate parent type for an object of type '" +
                                this.client.state.getGrcObjectType() +
                                "' and that the parentLocation is correct.";
                            this.client.logmsg("WARN", msg);
                            this.mailer.sendEmailNotification(msg);
                        }
                    }
                }
            }
        }
    };
};]]></parameter>
        </Script>
        <Script name="JsonUtil">
            <ModTime>1597751448714</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[//////////////////////////////////////////////////////////////////////////////
//
//  Licensed Materials - Property of IBM
//
//  5725-D51
//
//  (C) Copyright IBM Corporation 2017.  All Rights Reserved.
//
//  US Government Users Restricted Rights - Use, duplication or
//  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//
//////////////////////////////////////////////////////////////////////////////
var JsonUtil = function () {
    return {
        getJsonPropertyType : function(propValue) {
            var propType = typeof propValue;
            if (propType === "object") {
                // If object is type type and it has a child called "0", then this is an array
                try {
                    return propValue && propValue["0"] ? "array" : "object";
                } catch (e) {
                    return "string";
                }
            } else {
                return propType;
            }
        },
        visitJsonObject : function(obj, callback) {
            try {
                for (var propName in obj) {
                    var propValue = null;
                    try {
                        propValue = obj[propName];
                    } catch (e) {}
                    this.visitJsonProperty(propName, propValue, callback);
                }
            } catch (e) {}
        },
        visitJsonProperty : function(propName, propValue, callback) {
            var propType = this.getJsonPropertyType(propValue);
            if (propType === "object") {
                if (callback.jsonObjectStart) {
                    callback.jsonObjectStart.call(this, propName);
                }
                this.visitJsonObject(propValue, callback);
                if (callback.jsonObjectEnd) {
                    callback.jsonObjectEnd.call(this, propName);
                }
            } else if (propType === "array") {
                if (callback.jsonArrayStart) {
                    callback.jsonArrayStart.call(this, propName);
                }
                try {
                    for (var index in propValue) {
                        this.visitJsonProperty(null, propValue[index], callback);
                    }
                } catch (e) {}
                if (callback.jsonArrayEnd) {
                    callback.jsonArrayEnd.call(this, propName);
                }
            } else if (propType === "function") {
                if (callback.jsonFunction) {
                    callback.jsonFunction.call(this, propName, propValue);
                }
            } else if (propName) {
                if (callback.jsonProperty) {
                    callback.jsonProperty.call(this, propName, propType, propValue);
                }
            } else if (callback.jsonArrayElement) {
                callback.jsonArrayElement.call(this, propType, propValue);
            }
        },
        toJsonString : function(obj) {
            var jsonEntries = [];
            var jsonContextStack = [];
            var isArray = this.getJsonPropertyType(obj) === "array";
            function startEntry() {
                jsonContextStack.push(jsonEntries);
                jsonEntries = [];
            }
            function endEntry(entryName, entryIsArray) {
                if (jsonContextStack.length == 1 && isArray) {
                    entryName = null;
                }
                var entryJson = formatEntry(entryName, entryIsArray);
                jsonEntries = jsonContextStack.pop();
                jsonEntries.push(entryJson);
            }
            function formatEntry(entryName, isArray) {
                var entry = "";
                if (entryName) {
                    entry += "\"" + entryName + "\":";
                }
                entry += (isArray ? "[" : "{") + jsonEntries.join(",") + (isArray ? "]" : "}");
                return entry;
            }
            function formatPropValue(propType, propValue) {
                return propValue && propType === "string" ?
                "\"" + propValue.replace(/\n/g, "\\\\n")
                    .replace(/"/g, '\\\\"')
                    .replace(/'/g, '\\\'"')
                    .replace(/\\r/g, "\\\\r")
                    .replace(/\\t/g, "\\\\t")
                    .replace(/\\b/g, "\\\\b")
                    .replace(/\\f/g, "\\\\f") + "\"" :
                    propValue;
            }
            this.visitJsonObject(obj, {
                jsonObjectStart : function() {
                    startEntry();
                },
                jsonObjectEnd : function(objectName) {
                    endEntry(objectName, false);
                },
                jsonArrayStart : function() {
                    startEntry();
                },
                jsonArrayEnd : function(arrayName) {
                    endEntry(arrayName, true);
                },
                jsonArrayElement : function(propType, propValue) {
                    return jsonEntries.push(this.formatPropValue(propType, propValue));
                },
                jsonProperty : function(propName, propType, propValue) {
                    return jsonEntries.push("\"" + propName + "\":" + this.formatPropValue(propType, propValue));
                }
            });
            return formatEntry(null, isArray);
        }
    }
};]]></parameter>
        </Script>
    </Folder>
    <JavaLibraries/>
    <JavaProperties/>
    <Folder name="Includes"/>
    <Folder name="Config">
        <LogConfig name="Logging"/>
        <InstanceProperties name="AutoStart">
            <AutoStart/>
        </InstanceProperties>
        <TombstonesConfig name="Tombstones">
            <ModTime>1588765300562</ModTime>
            <parameter name="AssemblyLines">false</parameter>
            <parameter name="Configuration">false</parameter>
        </TombstonesConfig>
        <SolutionInterface name="SolutionInterface">
            <ModTime>1588765357552</ModTime>
            <InstanceID>POC_MVP</InstanceID>
            <enabled>true</enabled>
        </SolutionInterface>
    <Container name="SystemStore">
            <ParameterList name="Default"/>
        </Container>
    </Folder>
    <Folder name="Functions"/>
    <Folder name="AttributeMaps">
        <ALMap name="UCFConnector_Input">
            <ModTime>1585557882857</ModTime>
            <AttributeMap name="Input">
                <InheritFrom>[parent]</InheritFrom>
                <AttributeMapItem>
                    <Name>adCommonName</Name>
                    <Type>simple</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Simple>adCommonName</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>ciName</Name>
                    <Type>simple</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Simple>ciName</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>classification</Name>
                    <Type>simple</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Simple>classification</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>deprecated_by</Name>
                    <Type>simple</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Simple>deprecated_by</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>deprecation_notes</Name>
                    <Type>simple</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Simple>deprecation_notes</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>formattedid</Name>
                    <Type>simple</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Simple>formattedid</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>guidance</Name>
                    <Type>simple</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Simple>guidance</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>impact_zone</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn.impact_zone</Script>
                    <Simple>impact_zone</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>live</Name>
                    <Type>simple</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Simple>live</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>name</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script><![CDATA[var name = conn.name.getValue();
name.replace("\u0022", "\"");]]></Script>
                    <Simple>name</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>parentLocation</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script><![CDATA[var location = conn.parentLocation.getValue();
location.replace(" Organizations", "");]]></Script>
                    <Simple>parentLocation</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>parentType</Name>
                    <Type>simple</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Simple>parentType</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>parent_category</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script><![CDATA[var category = conn.parent_category.getValue();
category.replace(" Organizations", "");]]></Script>
                    <Simple>parent_category</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>parentadid</Name>
                    <Type>simple</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Simple>parentadid</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>primaryparentLocation</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script><![CDATA[var location = conn.primaryparentLocation.getValue();
location.replace(" Organizations", "");]]></Script>
                    <Simple>primaryparentLocation</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>primaryparentType</Name>
                    <Type>simple</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Simple>primaryparentType</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>type</Name>
                    <Type>simple</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Simple>type</Simple>
                </AttributeMapItem>
            </AttributeMap>
        </ALMap>
        <ALMap name="UCFConnector_Control_Input">
            <ModTime>1585557882878</ModTime>
            <AttributeMap name="Input">
                <InheritFrom>[parent]</InheritFrom>
                <AttributeMapItem>
                    <Name>deprecated_by</Name>
                    <Type>simple</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Simple>deprecated_by</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>deprecation_notes</Name>
                    <Type>simple</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Simple>deprecation_notes</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>formattedid</Name>
                    <Type>simple</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Simple>formattedid</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>guidance</Name>
                    <Type>simple</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Simple>guidance</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>id</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn.id</Script>
                    <Simple>id</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>live</Name>
                    <Type>simple</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Simple>live</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>name</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn.objname</Script>
                    <Simple>name</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>parentLocation</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script><![CDATA[var location = conn.parentLocation.getValue();
location.replace(" Organizations", "");]]></Script>
                    <Simple>parentLocation</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>parentType</Name>
                    <Type>simple</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Simple>parentType</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>parent_category</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script><![CDATA[var category = conn.parent_category.getValue();
category.replace(" Organizations", "");]]></Script>
                    <Simple>parent_category</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>parentadid</Name>
                    <Type>simple</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Simple>parentadid</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>reference</Name>
                    <Type>simple</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Simple>reference</Simple>
                </AttributeMapItem>
            </AttributeMap>
        </ALMap>
    <ALMap name="OP_SOXAccount">
            <ModTime>1589357390255</ModTime>
            <AttributeMap name="Input">
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1589357390255</ModTime>
                <AttributeMapItem>
                    <Name>Account Alias</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Account:AccAlias"]</Script>
                    <Simple>Account Alias</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Account ID</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["Name"]</Script>
                    <Simple>Parent Objects</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Account Name</Name>
                    <Type>advanced</Type>
                    <Script>conn["Description"]</Script>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Account Regulated</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Account:AccRegulated"]</Script>
                    <Simple>Account Regulated</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Account Status</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Account:Status"]</Script>
                    <Simple>Status</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>BAM ID</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Account:BAMID"]</Script>
                    <Simple>BAM ID</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Client Risk Review Period</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Account:CltRskReviewPeriod"]</Script>
                    <Simple>Client Risk Review Period</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Country</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Account:AccCountry"]</Script>
                    <Simple>Country</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Current Contract End Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Account:CContractEndDate"]</Script>
                    <Simple>Current Contract End Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Geography</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Account:AccGeo"]</Script>
                    <Simple>Geography</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Industry</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Account:AccIndustry"]</Script>
                    <Simple>Industry</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Market</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Account:AccMarket"]</Script>
                    <Simple>Market</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Restricted</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Account:Restricted"]</Script>
                    <Simple>Restricted</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Sector</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Account:AccSector"]</Script>
                    <Simple>Sector</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Steady State Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Account:SteadyStateDate"]</Script>
                    <Simple>Steady State Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Transformation Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Account:TransformationDate"]</Script>
                    <Simple>Transformation Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Transition Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Account:TransitionDate"]</Script>
                    <Simple>Transition Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Type</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Account:Type"]</Script>
                    <Simple>Type</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Type of Restriction</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Account:TypeofRestriction"]</Script>
                    <Simple>Type of Restriction</Simple>
                </AttributeMapItem>
            </AttributeMap>
            <State>Enabled</State>
        </ALMap>
        <ALMap name="OP_SOXRisk">
            <ModTime>1589283724440</ModTime>
            <AttributeMap name="Input">
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1589283724440</ModTime>
                <AttributeMapItem>
                    <Name>Account ID</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Shared:AccountID"]</Script>
                    <Simple>Account ID</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Applicable Global Process</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:Process"]</Script>
                    <Simple>Applicable Global Process</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Applicable Policies</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Policies:AppPolicies"]</Script>
                    <Simple>Applicable Policies</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Applicable Regulations</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Regulations:AppRegs"]</Script>
                    <Simple>Applicable Regulations</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Approved by Chief IT Risk Officer</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:AppCITRO"]</Script>
                    <Simple>Approved by Chief IT Risk Officer</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Approved by DPE</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:AppDPE"]</Script>
                    <Simple>Approved by DPE</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Approved by Geography GM</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:AppGeoGM"]</Script>
                    <Simple>Approved by Geography GM</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Approved by Market GM</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:AppMarketGM"]</Script>
                    <Simple>Approved by Market GM</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Approved by PE</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:AppPE"]</Script>
                    <Simple>Approved by PE</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Approved by Sr. Legal Counsel</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:AppSrLegalCounsel"]</Script>
                    <Simple>Approved by Sr. Legal Counsel</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Assess Phase Completed Late</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_CompletedLate_Assess"]</Script>
                    <Simple>Assess Phase Completed Late</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Assess Phase Completion Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_EndDate_Assess"]</Script>
                    <Simple>Assess Phase Completion Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Assess Phase Due Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_DueDate_Assess"]</Script>
                    <Simple>Assess Phase Due Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Assess Phase Start Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_StartDate_Assess"]</Script>
                    <Simple>Assess Phase Start Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Assessment Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:AssDate"]</Script>
                    <Simple>Assessment Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>CM Approval Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:CMAppDate"]</Script>
                    <Simple>CM Approval Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>CM Letter Rejection Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:CMLetterRejectDate"]</Script>
                    <Simple>CM Letter Rejection Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>CM Risk Rejection Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:CMRiskRejectDate"]</Script>
                    <Simple>CM Risk Rejection Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>CRF Validation Date Performed</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:CRFValidationDate"]</Script>
                    <Simple>CRF Validation Date Performed</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>CRF Validation Result</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:CRF Validation Result"]</Script>
                    <Simple>CRF Validation Result</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Chief IT Risk Officer Approval Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:CitroAppDate"] || conn["GTS-Risk:CITRODate"]</Script>
                    <Simple>Chief IT Risk Officer Approval Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Chief IT Risk Officer Rejection Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:CITRORiskRejectDate"]</Script>
                    <Simple>Chief IT Risk Officer Rejection Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Claim Code</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:ClaimCode"]</Script>
                    <Simple>Claim Code</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Client Communication Complete</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:CltCommunicationComplete"]</Script>
                    <Simple>Client Communication Complete</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Client Communication Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:CltCommunicationDate"]</Script>
                    <Simple>Client Communication Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Client Dependency on Reducing Risk</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:ClientDepRedRsk"]</Script>
                    <Simple>Client Dependency on Reducing Risk</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Client Response</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:CltResponse"]</Script>
                    <Simple>Client Response</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Client Response Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:CltResponseDate"]</Script>
                    <Simple>Client Response Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Closed Phase Start Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_StartDate_Closed"]</Script>
                    <Simple>Closed Phase Start Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Communicate Phase Completed Late</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_CompletedLate_Communicate"]</Script>
                    <Simple>Communicate Phase Completed Late</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Communicate Phase Completion Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_EndDate_Communicate"]</Script>
                    <Simple>Communicate Phase Completion Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Communicate Phase Due Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_DueDate_Communicate"]</Script>
                    <Simple>Communicate Phase Due Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Communicate Phase Start Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_StartDate_Communicate"]</Script>
                    <Simple>Communicate Phase Start Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Creation Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["Creation Date"]</Script>
                    <Simple>Creation Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Current Phase Due Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_DueDate_Current Phase"]</Script>
                    <Simple>Current Phase Due Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Current Phase Start Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_StartDate_Current Phase"]</Script>
                    <Simple>Current Phase Start Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Current Stage Due Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-Std:LCCustStageDueDate"]</Script>
                    <Simple>Current Stage Due Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Current Status Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:CurrentStatusDate"]</Script>
                    <Simple>Current Status Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>DPE Approval Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:DPEAppDate"]</Script>
                    <Simple>DPE Approval Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Date Closed</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:Date Closed"]</Script>
                    <Simple>Date Closed</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Date Letter Sent</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:DateLetterSent"]</Script>
                    <Simple>Date Letter Sent</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Document Phase Completed Late</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_CompletedLate_Document"]</Script>
                    <Simple>Document Phase Completed Late</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Document Phase Completion Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_EndDate_Document"]</Script>
                    <Simple>Document Phase Completion Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Document Phase Due Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_DueDate_Document"]</Script>
                    <Simple>Document Phase Due Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Document Phase Start Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_StartDate_Document"]</Script>
                    <Simple>Document Phase Start Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Early Notification</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:EarlyNotification"]</Script>
                    <Simple>Early Notification</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Estimated Impact of the threat resulting in adverse effect(s)</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-RiskRating:EstImpactLevel"]</Script>
                    <Simple>Estimated Impact of the threat resulting in adverse effect(s)</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Estimated Overall Probability</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-RiskRating:EstOverallProb"]</Script>
                    <Simple>Estimated Overall Probability</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Estimated Probability of Threat Event Occurrence</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-RiskRating:EstProbTEOccurance"]</Script>
                    <Simple>Estimated Probability of Threat Event Occurance</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Estimated Probability of Threat Event Resulting in Adverse Impacts</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-RiskRating:EstProbTEAdvImpacts"]</Script>
                    <Simple>GTS-RiskRating:EstProbTEAdvImpacts</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Estimated Risk Rating</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-RiskRating:EstRiskRating"]</Script>
                    <Simple>Estimated Risk Rating</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Final Impact of the threat resulting in adverse effect(s)</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-RiskRating:FinImpactLevel"]</Script>
                    <Simple>Final Impact of the threat resulting in adverse effect(s)</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Final Overall Probability</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-RiskRating:FinOverallProb"]</Script>
                    <Simple>Final Overall Probability</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Final Probability of Threat Event Occurrence</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-RiskRating:FintProbTEOccurance"]</Script>
                    <Simple>Final Probability of Threat Event Occurrence</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Final Probability of Threat Event Resulting in Adverse Impacts</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-RiskRating:FinProbTEAdvImpacts"]</Script>
                    <Simple>Final Probability of Threat Event Resulting in Adverse Impacts</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Final Risk Assessment</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:Final Risk Assessment"]</Script>
                    <Simple>Final Risk Assessment</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Final Risk Rating</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-RiskRating:FinRiskRating"]</Script>
                    <Simple>Final Risk Rating</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>GRA Approval Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:GRAAppDate"]</Script>
                    <Simple>GRA Approval Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>GRA Rejection Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:GRARejectDate"]</Script>
                    <Simple>GRA Rejection Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Geo Legal Review Complete</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:LegalReview"]</Script>
                    <Simple>Geo Legal Review Complete</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Geo Legal Review Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:LegalReviewDate"]</Script>
                    <Simple>Geo Legal Review Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Geography GM Approval Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:GeoGMDate"]</Script>
                    <Simple>Geography GM Approval Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>IBM Corporate Risk and Issue Tracking System</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:RskIssueTrackingSystem"]</Script>
                    <Simple>IBM Corporate Risk and Issue Tracking System</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Implement Phase Completed Late</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_Completed_Late_Implement"]</Script>
                    <Simple>Implement Phase Completed Late</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Implement Phase Completion Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_EndDate_Implement"]</Script>
                    <Simple>Implement Phase Completion Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Implement Phase Due Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_DueDate_Implement"]</Script>
                    <Simple>Implement Phase Due Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Implement Phase Start Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_StartDate_Implement"]</Script>
                    <Simple>Implement Phase Start Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Initial Impact of the threat resulting in adverse effect(s)</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-RiskRating:InImpactLevel"]</Script>
                    <Simple>Initial Impact of the threat resulting in adverse effect(s)</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Initial Overall Probability</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-RiskRating:InOverallProb"]</Script>
                    <Simple>Initial Overall Probability</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Initial Probability of Threat Event Occurrence</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-RiskRating:InProbTEOccurance"]</Script>
                    <Simple>Initial Probability of Threat Even Occurance</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Initial Probability of Threat Event Resulting in Adverse Impacts</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-RiskRating:InProbTEAdvImpacts"]</Script>
                    <Simple>Initial Probability of Threat Event Resulting in Adverse Impacts</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Initial Risk Rating</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-RiskRating:InRiskRating"]</Script>
                    <Simple>Initial Risk Rating</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Initial Risk Response</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-RiskRating:Initial Risk Response"]</Script>
                    <Simple>Initial Risk Response</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>LC Transition</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:LCTransition"]</Script>
                    <Simple>LC Transition</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>LCName</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:LCName"]</Script>
                    <Simple>LCName</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Last Modification Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["Last Modification Date"]</Script>
                    <Simple>Last Modification Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Legacy_Status</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPSS-Risk:Status"]</Script>
                    <Simple>Legacy_Status</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Legal Rejection Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:LegalRiskRejectDate"]</Script>
                    <Simple>Legal Rejection Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Legal Validation Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:LegalAppDate"]</Script>
                    <Simple>Legal Validation Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Letter Documented Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:LetterDocumentedDate"]</Script>
                    <Simple>Letter Documented Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Letter Sent</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:LetterSent"]</Script>
                    <Simple>Letter Sent</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Level of Process or Differentiation Evaluated</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:LoProcessDiffEval"]</Script>
                    <Simple>Level of Process or Differentiation Evaluated</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Market GM Approval Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:MrktGMAppDate"]</Script>
                    <Simple>Market GM Approval Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Migrated</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Shared:Migrated"]</Script>
                    <Simple>Migrated</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Monitor Phase Completed Late</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_CompletedLate_Monitor"]</Script>
                    <Simple>Monitor Phase Completed Late</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Monitor Phase Completion Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_EndDate_Monitor"]</Script>
                    <Simple>Monitor Phase Completion Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Monitor Phase Due Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_DueDate_Monitor"]</Script>
                    <Simple>Monitor Phase Due Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Monitor Phase Start Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_StartDate_Monitor"]</Script>
                    <Simple>Monitor Phase Start Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Negative Confirmation</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:NegativeConfirmation"]</Script>
                    <Simple>Negative Confirmation</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Negative Confirmation Phase Completed Late</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_CompletedLate_NegativeConfirmation"]</Script>
                    <Simple>Negative Confirmation Phase Completed Late</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Negative Confirmation Phase Completion Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_EndDate_NegativeConfirmation"]</Script>
                    <Simple>Negative Confirmation Phase Completion Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Negative Confirmation Phase Due Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_DueDate_NegativeConfirmation"]</Script>
                    <Simple>Negative Confirmation Phase Due Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Negative Confirmation Phase Start Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_StartDate_NegativeConfirmation"]</Script>
                    <Simple>Negative Confirmation Phase Start Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Negative Confirmation Sent</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:NegativeConfirmationSent"]</Script>
                    <Simple>Negative Confirmation Sent</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Negative Confirmation Sent Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:NegativeConfirmationSentDate"]</Script>
                    <Simple>Negative Confirmation Sent Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>New Phase Completion Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_EndDate_New"]</Script>
                    <Simple>New Phase Completion Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>New Phase Start Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_StartDate_New"]</Script>
                    <Simple>New Phase Start Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Non Compliance Issue Number</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:Non Compliance Issue Number"]</Script>
                    <Simple>Non Compliance Issue Number</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Other Applicable Global Process</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:OtherProcess"]</Script>
                    <Simple>Other Applicable Global Process</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Other Level of Process or Differentiation Evaluated</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:LoProcessDiffEvalOther"]</Script>
                    <Simple>Other Level of Process or Differentiation Evaluated</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Other Platforms</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:Other Platforms"]</Script>
                    <Simple>Other Platforms</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Other Regulations</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Regulations:Other Regulations"]</Script>
                    <Simple>Other Regulations</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Overall Impact of the threat resulting in adverse effect(s)</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-RiskRating:OveralImpact"]</Script>
                    <Simple>Overall Impact of the threat resulting in adverse effect(s)</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Overall Probability</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-RiskRating:OverallProb"]</Script>
                    <Simple>Overall Probability</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Overall Risk Rating</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-RiskRating:ORiskRating"]</Script>
                    <Simple>Overall Risk Rating</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>PE Approval Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:PEAppDate"]</Script>
                    <Simple>PE Approval Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Perform CRF Validation</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:Perform CRF Validation"]</Script>
                    <Simple>Perform CRF Validation</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Phase</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:LCPhase"]</Script>
                    <Simple>Phase</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Platform</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:Platform"]</Script>
                    <Simple>Platform</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Potential Risk Caused By</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:PotRiskCausedBy"]</Script>
                    <Simple>Potential Risk Caused By</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Potential Risk to IBM</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:PotRiskToIBM"]</Script>
                    <Simple>Potential Risk to IBM</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Proceed To Monitoring</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:ProceedToMonitoring"]</Script>
                    <Simple>Proceed To Monitoring</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Process Sub-Domain</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:ProcessSubDomain"]</Script>
                    <Simple>Process Sub Domain</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Reference System ID</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:CIRATSSIMID"]</Script>
                    <Simple>Reference System ID</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Regulation Impacted</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:RegImpacted"]</Script>
                    <Simple>Regulation Impacted</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Regulation Impacted Country</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:RegImpactedCountry"]</Script>
                    <Simple>Regulation Impacted Country</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Reset Risk Response</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-RiskRating:Reset Risk Response"]</Script>
                    <Simple>Reset Risk Response</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Resource ID</Name>
                    <Type>advanced</Type>
                    <Script>conn["Resource ID"]</Script>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Risk Approval Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:RiskAppDate"]</Script>
                    <Simple>Risk Approval Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Risk Captured In External Risk Management System</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:ExtRMCaptured"]</Script>
                    <Simple>Risk Captured In External Risk Management System</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Risk Expiration Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:Risk Expiration Date"]</Script>
                    <Simple>Risk Expiration Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Risk ID</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["Name"]</Script>
                    <Simple>Resource ID</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Risk Identified Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:Risk Identified"]</Script>
                    <Simple>Risk Identified Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Risk Mitigating Actions Completion Due Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-Std:LCDueDate"]</Script>
                    <Simple>Risk Mitigating Actions Completion Due Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Risk Rejection Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:RiskRejectDate"]</Script>
                    <Simple>Risk Rejection Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Risk Response</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-RiskRating:RskResponse"]</Script>
                    <Simple>Risk Response</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Risk Status</Name>
                    <Type>advanced</Type>
                    <Script>conn["OPLC-SOXRisk:LCStatus"]</Script>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Risk Type</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:RiskType"]</Script>
                    <Simple>Risk Type</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Risk Validation Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:RiskValidationDate"]</Script>
                    <Simple>Risk Validation Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Sr. Legal Counsel Approval Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["GTS-Risk:SrLegalCounselAppDate"]</Script>
                    <Simple>Sr. Legal Counsel Approval Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Stage</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:LCStage"]</Script>
                    <Simple>Stage</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Validate Phase Completed Late</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_CompletedLate_Validate"]</Script>
                    <Simple>Validate Phase Completed Late</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Validate Phase Completion Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_EndDate_Validate"]</Script>
                    <Simple>Validate Phase Completion Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Validate Phase Due Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_DueDate_Validate"]</Script>
                    <Simple>Validate Phase Due Date</Simple>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Validate Phase Start Date</Name>
                    <Type>advanced</Type>
                    <Enabled>true</Enabled>
                    <Add>true</Add>
                    <Modify>true</Modify>
                    <Script>conn["OPLC-SOXRisk:Phase_StartDate_Validate"]</Script>
                    <Simple>Validate Phase Start Date</Simple>
                </AttributeMapItem>
            </AttributeMap>
            <State>Enabled</State>
        </ALMap>
    <ALMap name="ePolicyData">
            <ModTime>1591182452381</ModTime>
            <AttributeMap name="Input">
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1591182452381</ModTime>
                <AttributeMapItem>
                    <Name>Account</Name>
                    <Type>advanced</Type>
                    <Script>"WHITEHATS-001"</Script>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Account short name</Name>
                    <Type>advanced</Type>
                    <Script>"WH001"</Script>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Comment</Name>
                    <Type>advanced</Type>
                    <Script>"Spurious comment here"</Script>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Country</Name>
                    <Type>advanced</Type>
                    <Script>"Norvegè"</Script>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Document</Name>
                    <Type>advanced</Type>
                    <Script>"DOC_AB"</Script>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Environment</Name>
                    <Type>advanced</Type>
                    <Script>"UAT"</Script>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Evidence</Name>
                    <Type>advanced</Type>
                    <Script>"EV_XY"</Script>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Evidence Type</Name>
                    <Type>advanced</Type>
                    <Script>"Best ev type"</Script>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>File name</Name>
                    <Type>advanced</Type>
                    <Script>"evidenceXXY.docx"</Script>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Other</Name>
                    <Type>advanced</Type>
                    <Script>"Other than..."</Script>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Rev</Name>
                    <Type>advanced</Type>
                    <Script>"2A"</Script>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Status type</Name>
                    <Type>advanced</Type>
                    <Script>"Obsolete"</Script>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Sub customer</Name>
                    <Type>advanced</Type>
                    <Script>"subCustA"</Script>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Updated by</Name>
                    <Type>advanced</Type>
                    <Script>"Eddie"</Script>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>Updated on</Name>
                    <Type>advanced</Type>
                    <Script>new Date();</Script>
                </AttributeMapItem>
                <AttributeMapItem>
                    <Name>sub-version</Name>
                    <Type>advanced</Type>
                    <Script>"042"</Script>
                </AttributeMapItem>
            </AttributeMap>
            <State>Enabled</State>
        </ALMap>
        
    </Folder>
    <Properties name="Properties">
        <Stores>
            <PropertyStore name="Solution-Properties">
                <Parser/>
                <RawConnector>
                    <InheritFrom>system:/Connectors/ibmdi.Properties</InheritFrom>
                    <parameter name="collectionType">Solution-Properties</parameter>
                </RawConnector>
                <Key>key</Key>
                <Value>value</Value>
                <ReadOnly>false</ReadOnly>
                <InitialLoad>true</InitialLoad>
                <CacheTimeout>0</CacheTimeout>
            </PropertyStore>
            <PropertyStore name="Global-Properties">
                <Parser/>
                <RawConnector>
                    <InheritFrom>system:/Connectors/ibmdi.Properties</InheritFrom>
                    <parameter name="collectionType">Global-Properties</parameter>
                </RawConnector>
                <Key>key</Key>
                <Value>value</Value>
                <ReadOnly>false</ReadOnly>
                <InitialLoad>true</InitialLoad>
                <CacheTimeout>0</CacheTimeout>
            </PropertyStore>
            <PropertyStore name="System-Properties">
                <Parser/>
                <RawConnector>
                    <InheritFrom>system:/Connectors/ibmdi.Properties</InheritFrom>
                    <parameter name="collectionType">System-Properties</parameter>
                </RawConnector>
                <Key>key</Key>
                <Value>value</Value>
                <ReadOnly>false</ReadOnly>
                <InitialLoad>true</InitialLoad>
                <CacheTimeout>0</CacheTimeout>
            </PropertyStore>
            <PropertyStore name="Java-Properties">
                <Parser/>
                <RawConnector>
                    <InheritFrom>system:/Connectors/ibmdi.Properties</InheritFrom>
                    <parameter name="collection">@SUBSTITUTE{config.$directory}/POC_MVP.properties</parameter>
                    <parameter name="collectionType">Java-Properties</parameter>
                </RawConnector>
                <Key>key</Key>
                <Value>value</Value>
                <ReadOnly>false</ReadOnly>
                <InitialLoad>true</InitialLoad>
                <CacheTimeout>0</CacheTimeout>
            </PropertyStore>
            <PropertyStore name="POC_MVP">
                <ModTime>1587974096746</ModTime>
                <Parser/>
                <RawConnector>
                    <InheritFrom>system:/Connectors/ibmdi.Properties</InheritFrom>
                    <parameter name="autorewrite">true</parameter>
                    <parameter name="collection">POC_MVP/POC_MVP.properties</parameter>
                    <parameter name="collectionType">POC_MVP</parameter>
                    <parameter name="keyAlias"/>
                </RawConnector>
                <Key>key</Key>
                <Value>value</Value>
                <ReadOnly>false</ReadOnly>
                <InitialLoad>true</InitialLoad>
                <CacheTimeout>0</CacheTimeout>
            </PropertyStore>
        </Stores>
    </Properties>
    <Folder name="Schedules">
        <Scheduler name="Export Risks">
            <ModTime>1592419103031</ModTime>
            <parameter name="StartTimes">* * * 0 1 0</parameter>
            <parameter name="assemblyLine">Risk_2_csv</parameter>
            <parameter name="enabled">true</parameter>
        </Scheduler>
    </Folder>
    <Folder name="Sequences"/>
</MetamergeConfig>